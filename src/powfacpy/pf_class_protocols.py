"""Protocol classes for (almost) all PowerFactory classes in the python scripting reference pdf file. Protocol classes are helpful for example for type hints where they can be used just like 'normal' implementations of classes.
"""

from typing import Protocol

class PFApp(Protocol):
  __version__: str


  def GetRandomNumberEx(*args):
    ...

  def IsAutomaticCalculationResetEnabled(*args):
    ...

  def GetCalcRelevantObjects(*args):
    ...

  def GetWorkspaceDirectory(*args):
    ...

  def SetEnableUserBreak(*args):
    ...

  def CreateProject(*args):
    ...

  def GetActiveNetworkVariations(*args):
    ...

  def ResGetFirstValidObjectVariable(*args):
    ...

  def DecodeColour(*args):
    ...

  def GetLanguage(*args):
    ...

  def GetTouchingExpansionStages(*args):
    ...

  def GetInstallDir(*args):
    ...

  def RndUnifInt(*args):
    ...

  def ResGetNextValidObjectVariable(*args):
    ...

  def SetInterfaceVersion(*args):
    ...

  def GetWorkingDir(*args):
    ...

  def GetActiveStages(*args):
    ...

  def GetGlobalLibrary(*args):
    ...

  def GetInstallationDirectory(*args):
    ...

  def GetTempDir(*args):
    ...

  def SetUserBreakEnabled(*args):
    ...

  def UpdateTableReports(*args):
    ...

  def IsFinalEchoOnEnabled(*args):
    ...

  def GetAllUsers(*args):
    ...

  def GetSettings(*args):
    ...

  def RndExp(*args):
    ...

  def GetClassId(*args):
    ...

  def SetProgressBarUpdatesEnabled(*args):
    ...

  def GetCurrentScript(*args):
    ...

  def CommitTransaction(*args):
    ...

  def SetWriteCacheEnabled(*args):
    ...

  def ResGetValueCount(*args):
    ...

  def EchoOn(*args):
    ...

  def GetBorderCubicles(*args):
    ...

  def GetOutputWindow(*args):
    ...

  def EncodeColour(*args):
    ...

  def InvertMatrix(*args):
    ...

  def ResetCalculation(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def GetTouchedObjects(*args):
    ...

  def GetDataFolder(*args):
    ...

  def SetOutputWindowState(*args):
    ...

  def ResGetMax(*args):
    ...

  def SaveAsScenario(*args):
    ...

  def ResGetNextValidVariable(*args):
    ...

  def StatFileGetXrange(*args):
    ...

  def StatFileSetXrange(*args):
    ...

  def ClearOutputWindow(*args):
    ...

  def GetBrowserSelection(*args):
    ...

  def Show(*args):
    ...

  def GetTouchingStageObjects(*args):
    ...

  def IsWriteCacheEnabled(*args):
    ...

  def SetRandomSeed(*args):
    ...

  def ShowModalBrowser(*args):
    ...

  def ClearRecycleBin(*args):
    ...

  def ResGetIndex(*args):
    ...

  def ShowModalSelectBrowser(*args):
    ...

  def GetCurrentSelection(*args):
    ...

  def IsShcValid(*args):
    ...

  def SetAutomaticCalculationResetEnabled(*args):
    ...

  def __getattr__(*args):
    ...

  def GetTemporaryDirectory(*args):
    ...

  def SplitLine(*args):
    ...

  def EchoOff(*args):
    ...

  def GetUserManager(*args):
    ...

  def GetLocalLibrary(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def ResGetMin(*args):
    ...

  def GetFromStudyCase(*args):
    ...

  def ResGetVariableCount(*args):
    ...

  def RndNormal(*args):
    ...

  def IsSimValid(*args):
    ...

  def SetGraphicUpdate(*args):
    ...

  def ConvertGeometryStringToMDL(*args):
    ...

  def PostCommand(*args):
    ...

  def IsRmsValid(*args):
    ...

  def CreateFaultCase(*args):
    ...

  def Rebuild(*args):
    ...

  def SetShowAllUsers(*args):
    ...

  def IsAttributeModeInternal(*args):
    ...

  def ResGetUnit(*args):
    ...

  def ActivateProject(*args):
    ...

  def ImportDz(*args):
    ...

  def RndWeibull(*args):
    ...

  def GetFlowOrientation(*args):
    ...

  def Hide(*args):
    ...

  def RndGetSeed(*args):
    ...

  def GetCurrentZoomScaleLevel(*args):
    ...

  def GetStudyTimeObject(*args):
    ...

  def PrintWarn(*args):
    ...

  def ResGetFirstValidVariable(*args):
    ...

  def ResGetObject(*args):
    ...

  def ImportSnapshot(*args):
    ...

  def GetInterfaceVersion(*args):
    ...

  def OutputFlexibleData(*args):
    ...

  def FlushOutputWindow(*args):
    ...

  def GetTableReports(*args):
    ...

  def IsNAN(*args):
    ...

  def ResGetNextValidObject(*args):
    ...

  def GetGraphicsBoard(*args):
    ...

  def SelectToolbox(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def GetActiveCalculationStr(*args):
    ...

  def StatFileResetXrange(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def ResLoadData(*args):
    ...

  def GetDiagramSelection(*args):
    ...

  def SearchObjectByForeignKey(*args):
    ...

  def ResGetData(*args):
    ...

  def SetFinalEchoOnEnabled(*args):
    ...

  def GetMem(*args):
    ...

  def ResGetVariable(*args):
    ...

  def GetTouchingVariations(*args):
    ...

  def GetProjectFolder(*args):
    ...

  def IsScenarioAttribute(*args):
    ...

  def GetUserSettings(*args):
    ...

  def LicenceHasModule(*args):
    ...

  def ResReleaseData(*args):
    ...

  def IsLdfValid(*args):
    ...

  def RndUnifReal(*args):
    ...

  def GetActiveStudyCase(*args):
    ...

  def PrintError(*args):
    ...

  def SetGuiUpdateEnabled(*args):
    ...

  def PrintPlain(*args):
    ...

  def ResSortToVariable(*args):
    ...

  def GetCurrentDiagram(*args):
    ...

  def GetRandomNumber(*args):
    ...

  def ShowModelessBrowser(*args):
    ...

  def LoadProfile(*args):
    ...

  def GetRecordingStage(*args):
    ...

  def SetAttributeModeInternal(*args):
    ...

  def ExecuteCmd(*args):
    ...

  def GetActiveScenario(*args):
    ...

  def ReloadProfile(*args):
    ...

  def RndSetup(*args):
    ...

  def RndGetMethod(*args):
    ...

  def SetRescheduleFlag(*args):
    ...

  def ResGetFirstValidObject(*args):
    ...

  def GetClassDescription(*args):
    ...

  def GetSummaryGrid(*args):
    ...

  def GetCurrentUser(*args):
    ...

  def ResGetDescription(*args):
    ...

  def CloseTableReports(*args):
    ...

  def PrintInfo(*args):
    ...

  def DefineTransferAttributes(*args):
    ...

  def GetActiveProject(*args):
    ...

  def GetActiveScenarioScheduler(*args):
    ...



class ElmArea(Protocol):
  cimRdfId: list
  "RDF ID"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  icolor: int
  "Colour"
  cpHeadFold: object
  "Head Folder"
  spinReserve: float
  "Min. spinning reserve constraint: Spinning reserve"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  isConsSpinReserve: int
  "Min. spinning reserve constraint"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  InterPset: float
  "Consider Interchange Schedule: Scheduled Active Power Interchange"
  tid_: int
  "TimeID"
  iInterChg: int
  "Consider Interchange Schedule"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetBuses(*args):
    ...

  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def DefineBoundary(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetBranches(*args):
    ...

  def CalculateInterchangeTo(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def GetObjs(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetAll(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def CalculateVoltageLevel(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def CalculateVoltInterVolt(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmAsm(Protocol):
  IkWDmin: float
  "Steady-state short-circuit current contribution: Minimum current"
  Pmin_ucPU: float
  "Active power operational limits: Min."
  iintgnd: int
  "Neutral conductor: N-Connection:None:At terminal (ABC-N):Separate terminal"
  iHmcType: int
  "Harmonic Current Injections: Harmonic Model:Norton Equivalent:Ideal Current Source:Impedance"
  drawStall: int
  "Time-Overcurrent plot: Draw Thermal Overload"
  dpl1: float
  "dpl1"
  Pmax_uc: float
  "Active power operational limits: Max."
  pQlimType: object
  "Reactive power operational limits: Capability curve"
  allowGenMode: int
  "Separate generation mode"
  iInterPol: int
  "Approximation:Spline:Piecewise linear:Polynomial:Hermite"
  cpOperator: object
  "Operator"
  cimRdfId: list
  "RDF ID"
  isRPR: int
  "Optimisation of reactive power reserve"
  costRedispatchP: float
  "Redispatch costs for active power change"
  iOPFCQmin: int
  "Reactive power operational limits: Min."
  pPowerCrv: object
  "Wind Power Curve"
  dpl5: float
  "dpl5"
  chr_name: str
  "Characteristic Name"
  isDispatchable: int
  "Generator Dispatch"
  appr_modby: str
  "Approval Information: Modified by"
  speedbyp: float
  "Reactor: Bypass at speed >="
  minUpTime: float
  "Start-up/shut-down time constraints: Minimum up-time"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  P_max: float
  "Active power: Ratings: Max."
  chr_slip: list
  "Slip Settings: slip"
  iNoShcContr: int
  "No Short-Circuit Contribution"
  Xe: float
  "Internal grounding impedance: Reactance, Xe"
  Inom: float
  "Nominal Current"
  isDiscreteCtrlP: int
  "Restriction to discrete active power values"
  Tyd: float
  "Switch to 'D' after"
  allowConsumMode: int
  "Separate consumption mode"
  consumCosts: float
  "Consumption mode: Consumption costs"
  appr_modif: int
  "Approval Information: Modified"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  pgini_a: float
  "Actual Dispatch: Active Power (act.)"
  isConsShutDownCost: int
  "Shut-down costs"
  cTypHmc: str
  "Harmonic Current Injections: Type of Harmonic Sources"
  discMethCostOp: int
  "Piecewise linearisation for LP"
  c_pmod: object
  "Model"
  limRampDownPU: float
  "Ramp rate constraints: Ramp-down limit"
  efficiencyLPgen: float
  "Efficiency: Used efficiency (generation)"
  cgnd: int
  "Internal grounding impedance: Star Point:Connected:Not connected"
  iUseStart: int
  "Use motor starting method"
  cIsDiscreteCtrlP: int
  "Restriction to discrete active power values"
  scaleQmax: float
  "Reactive power operational limits: Scaling factor (max.)"
  efficiencyCurveConsum: object
  "Efficiency: Efficiency curve (consumption)"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  fixedCosts: float
  "Fixed costs"
  pmaxratf: float
  "Active power: Ratings: Rating factor"
  vecPowerRedispatchDown: list
  "Redispatch"
  desc: list
  "Description"
  iOPFCPmax: int
  "Active power operational limits: Max."
  cUserDefIndex: int
  "User defined Index"
  mdmex: float
  "Mechanical load: Exponent"
  chr_p: list
  "Slip Settings: Active Power"
  oid_: int
  "ObjectID"
  limRampDown: float
  "Ramp rate constraints: Ramp-down limit"
  icurref: int
  "Harmonic Current Injections: Harmonic currents referred to"
  p_direc: int
  "Dispatch: Power direction:P>=0:P<0"
  iComDate: int
  "Commissioning Date"
  pStorage: object
  "Storage model"
  pmini: float
  "Mechanical power"
  r0iec: float
  "Zero sequence short-circuit impedance: Resistance, r0"
  QtargetRPR: float
  "Optimisation of reactive power reserve: Q target value"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  bustpc: str
  "Corresponding bus type:"
  isConstrUpDown: int
  "Start-up/shut-down time constraints"
  costRedispatchDown: float
  "Additional redispatch costs: Downward active power redispatch costs"
  limRampUpPU: float
  "Ramp rate constraints: Ramp-up limit"
  pOwner: object
  "Owner"
  slipset: float
  "Slip Settings: Slip"
  Iks: float
  "Fault Contribution: Transient Short-Circuit Current"
  Pnom: float
  "Active power operational limits: Pr(rated)"
  cost_up: float
  "Start-up costs: Warm-start costs"
  cnwsamples: int
  "Wind Model Time Series Characteristics: Annual Samples: Number of Samples"
  dataExtDesc: list
  "Description"
  Pmax_ucPU: float
  "Active power operational limits: Max."
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  shcDeadband: int
  "Voltage deadband"
  outServPzero: int
  "Out of service when active power is zero"
  cpFeed: object
  "Feeder"
  mode_inp: str
  "Dispatch: Input mode"
  numBreakpointsCostOp: int
  "Piecewise linearisation for LP: Number of breakpoints"
  dataExtUnit: list
  "Unit"
  mean: float
  "Wind Model Weibull Distribution for Wind Speed: Mean"
  cVecDiscreteCtrlPvals: list
  "Valid active power values"
  drawInrush: int
  "Time-Overcurrent plot: Draw Inrush Current"
  cosgini_a: float
  "Actual Dispatch: Power Factor (act.)"
  cpMeteostat: object
  "Meteo Station"
  autotap: float
  "Auto transformer: Tap:85:65:50"
  costColdStart: float
  "Start-up costs: Cold-start costs"
  bus1n: object
  "Neutral conductor: Neutral"
  limRampUp: float
  "Ramp rate constraints: Ramp-up limit"
  pOperator: object
  "Operator"
  pf_recap: int
  "Dispatch: Power factor:ind.:cap."
  i_pset: int
  "State Estimation: Estimate active power"
  ignd: int
  "Star Point:&0&grounded:&2&isolated"
  isVRE: int
  "Generator usage: Generator usage:Single thermal generation unit:Variable renewable energy source (VRE):Coupled with storage model:Part of Virtual Power Plant"
  cpArea: object
  "Area"
  isMustRunUC: int
  "Additional constraints for controls: Must run"
  pQPcurve: object
  "Q(P)-Characteristic: Q(P)-curve"
  iAstabint: int
  "A-stable integration algorithm"
  iWindGen: int
  "Wind generator"
  sgini_a: float
  "Actual Dispatch: Apparent Power (act.)"
  iOPFCQmax: int
  "Reactive power operational limits: Max."
  bus1: object
  "Terminal"
  usp_min: float
  "Voltage setpoint limits: Min. voltage setpoint"
  constr: int
  "Year of Construction"
  cQ_min: float
  "Reactive power operational limits: Minimum"
  costShutDown: float
  "Shut-down costs"
  cpSupplyTransformer: object
  "Supplying Transformer"
  crrspeed: float
  "Speed"
  genShiftKey: float
  "Generation shift key"
  iopt_windm: int
  "Wind Model: Wind Model"
  windspeed: float
  "Dispatch: Wind speed"
  iopt_slip: int
  "Slip Settings"
  doc_id: object
  "Additional Data"
  sgini: float
  "Dispatch: Apparent power"
  p_cub: object
  "Controlled branch (Cubicle)"
  cJtot: float
  "Mechanical load: Total Moment of Inertia"
  uDeadband: float
  "Voltage deadband: Deadband"
  scaleQmin: float
  "Reactive power operational limits: Scaling factor (min.)"
  vecStartUpCosts: list
  "Start-up costs: Start-up costs"
  pid_: int
  "ProjectID"
  dispatch: int
  "Generator Dispatch"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  penaltyCosts: float
  "Penalty costs"
  speedyd: float
  "Switch to 'D' at speed >="
  i_mot: int
  "Generator/Motor"
  usp_max: float
  "Voltage setpoint limits: Max. voltage setpoint"
  isCtrlPplacement: int
  "Optimise active power"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  bustp: str
  "Bus type:AS:PQ"
  dsecres: float
  "Reserve"
  cspeed: list
  "Speed"
  Jme: float
  "Mechanical load: Moment of Inertia"
  phmc: object
  "Harmonic Current Injections: Harmonic Currents"
  qdslCtrl: object
  "Quasi-Dynamic Model"
  mdTradd: list
  "Variable rotor resistance"
  av_mode: str
  "Local controller"
  xrea: float
  "Reactor: Reactance"
  aCategory: str
  "Plant Category"
  Pngrel: float
  "Stochastic Model for Generation: Based on rated active power (Pr)"
  cQ_max: float
  "Reactive power operational limits: Maximum"
  polyDegree: int
  "Polynomial degree"
  fold_id: object
  "In Folder"
  dpl3: float
  "dpl3"
  minDownTime: float
  "Start-up/shut-down time constraints: Minimum down-time"
  Irze: list
  "Rated current of grounding"
  iStartMethod: int
  "Motor starting method"
  typ_id: object
  "Type"
  tstart: float
  "Time-Overcurrent plot: Starting Time"
  pmode: int
  "Input mode:Electrical power:Mechanical power:Mechanical torque"
  monof: int
  "Operation mode"
  costRedispatchUp: float
  "Additional redispatch costs: Upward active power redispatch costs"
  vecStartUpTimes: list
  "Start-up costs: Down-time"
  iconfed: int
  "Static converter-fed drive"
  dat_src: str
  "Data source"
  limRampStartUpPU: float
  "Ramp rate constraints: Start-up ramp limit"
  pgini: float
  "Dispatch: Active power"
  Tbypass: float
  "Reactor: Bypass after"
  pginisum: float
  "Active power"
  Kfactor: float
  "Fault Contribution: K Factor"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  isCtrlFixedToLdfVal: int
  "Additional constraints for controls: Fix controls to Load Flow values"
  availFactor: float
  "Availability Factor"
  limRampStartUp: float
  "Ramp rate constraints: Start-up ramp limit"
  isConsCostsRedispatch: int
  "Additional redispatch costs"
  pFlicker: object
  "Flicker Contribution: Flicker Coefficients"
  PmaxInvPU: float
  "Separate consumption mode: Max."
  cCategory: str
  "Plant Category"
  beta: float
  "Wind Model Weibull Distribution for Wind Speed: Beta"
  coldStartTime: float
  "Start-up costs: Cold-start time"
  cStorage: object
  "Generator usage: Storage model"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  costRedispatchQ: float
  "Redispatch costs for reactive power change"
  PminInv: float
  "Separate consumption mode: Min."
  for_name: str
  "Foreign Key"
  Re: float
  "Internal grounding impedance: Resistance, Re"
  vecCostRedispatchDown: list
  "Costs"
  cosgini: float
  "Dispatch: Power factor"
  speed1ph: float
  "Switch at speed >="
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  dpl4: float
  "dpl4"
  xmtn: float
  "Rated mechanical torque"
  ratedStr: float
  "Reactor: Rated apparent power"
  isConsStartUpCost: int
  "Start-up costs"
  ciEarthed: int
  "Earthed"
  isLimQmax: int
  "Reactive power operational limits: Max."
  kWD: float
  "Initial symmetrical short-circuit current contribution: Factor kappaWD"
  Tstaroff: float
  "Auto transformer: Release star contactor after"
  outserv: int
  "Out of Service"
  pBMU: object
  "Virtual Power Plant"
  r2iec: float
  "Negative sequence short-cicuit impedance: Resistance, r2"
  rxWD: float
  "Initial symmetrical short-circuit current contribution: Ratio RWD/XWD"
  PminInvPU: float
  "Separate consumption mode: Min."
  pOpCostCurve: object
  "Operating costs: Generator cost curve"
  cfixedCosts: float
  "Consumption mode: Fixed costs"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  mdmlp: float
  "Mechanical load: Proportional factor"
  ctime: list
  "Time"
  avgCostsUc: float
  "Piecewise linearisation for LP: Average costs"
  iSchemeStatus: int
  "Scheme Status"
  ddroop: float
  "Voltage Droop: Droop"
  qgini: float
  "Dispatch: Reactive power"
  phtech: int
  "Technology"
  isLimPmax: int
  "Active power operational limits: Max."
  c_pstac: object
  "External station controller"
  crrtime: float
  "Time"
  appr_status: int
  "Approval Information: Status"
  smoothfac: float
  "Smoothing factor"
  iOPFCPmin: int
  "Active power operational limits: Min."
  isPcurrAllowed: int
  "Restriction to discrete active power values: Allow current active power value"
  ictqg: int
  "Controls: Reactive Power"
  iShcModel: int
  "Short-Circuit Model:Equivalent synchronous machine:Dynamic voltage support:Doubly fed asynchronous generator"
  pblocktrf: object
  "Externally modelled unit transformer: Unit transformer"
  isCtrlQ: int
  "Controls: Reactive power"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  crradd: float
  "Additional rotor resistance"
  EDS: float
  "Stochastic Model for Generation: Expectancy of derated states"
  isLimQmin: int
  "Reactive power operational limits: Min."
  cpower: list
  "Power"
  i_qset: int
  "State Estimation: Estimate reactive power"
  cOperSpeed: float
  "Slip Settings: Operating speed"
  charact: list
  "Charact."
  efficiencyCurveGen: object
  "Efficiency: Efficiency curve (generation)"
  limRampShutDownPU: float
  "Ramp rate constraints: Shut-down ramp limit"
  cJ: float
  "Mechanical load: Moment of Inertia from Type"
  gratio: float
  "Mechanical load: Gear ratio"
  stowind: int
  "Wind Model"
  iv_mode: int
  "Local controller"
  Irated: float
  "Harmonic Current Injections: Rated Current"
  QtargetBase: int
  "Optimisation of reactive power reserve: Base:Reactive power limits:Rated apparent power"
  efficiencyLPconsum: float
  "Efficiency: Used efficiency (consumption)"
  ngnum: int
  "Number of: parallel machines"
  vecDiscreteCtrlPvals: list
  "Restriction to discrete active power values: Valid active power values"
  cSubCategory: str
  "Subcategory"
  isLimPmin: int
  "Active power operational limits: Min."
  isConstrRamp: int
  "Ramp rate constraints"
  is4SpinReserve: int
  "Consider for region spinning reserve"
  q_min: float
  "Reactive power operational limits: Min."
  sernum: str
  "Serial Number"
  pf_recap_a: str
  "Actual Dispatch: Power Factor Ind/Cap (act.)"
  speedsoff: float
  "Auto transformer: Release star contactor at speed >="
  Kpf: float
  "Dispatch: Prim. frequency bias"
  PmaxInv: float
  "Separate consumption mode: Max."
  FOE: float
  "Stochastic Model for Generation: Forced Outage Expectancy"
  costCurtailment: float
  "Costs for curtailment"
  limRampShutDown: float
  "Ramp rate constraints: Shut-down ramp limit"
  ctagtot: float
  "Mechanical load: Total Acceleration Time Const."
  isConsCostOp: int
  "Operating costs"
  FAY: float
  "Stochastic Model for Generation: Full Availability Expectancy"
  mode_pgi: int
  "Model:Active power input:Wind speed input"
  aSubCategory: str
  "Subcategory"
  T1ph: float
  "Switch after"
  idfig: int
  "Machine type"
  c_pmdm: object
  "Mechanical load: Mdm"
  isCtrlP: int
  "Controls: Active power"
  pMeteostat: object
  "Wind Model: Meteo Station (Correlation)"
  fixed: int
  "Must run"
  vecPowerRedispatchUp: list
  "Redispatch"
  gnrl_modby: str
  "Object modified by"
  dpl2: float
  "dpl2"
  variance: float
  "Wind Model Weibull Distribution for Wind Speed: Variance"
  q_max: float
  "Reactive power operational limits: Max."
  ciLater: int
  "Lateral Index"
  priority: int
  "Merit Order"
  avgCosts: float
  "Average costs"
  iTrigg: int
  "Triggered by..."
  i_rem: int
  "Remote control"
  x0iec: float
  "Zero sequence short-circuit impedance: Reactance, x0"
  tid_: int
  "TimeID"
  x2iec: float
  "Negative sequence short-cicuit impedance: Reactance, x2"
  cIsMustRunUC: int
  "Additional constraints for controls: Must run"
  IkWDmax: float
  "Steady-state short-circuit current contribution: Maximum current"
  ictpg: int
  "Controls: Active Power"
  usetp: float
  "Dispatch: Voltage"
  root_id: object
  "Original Location"
  pCharYrMW: list
  "Wind Model Time Series Characteristics: Annual Samples: Time Series Characteristics of Active Power Contribution (MW)"
  cIsPcurrAllowed: int
  "Allow current active power value"
  pGRStoch: object
  "Stochastic Model for Generation: Stochastic Model"
  qgini_a: float
  "Actual Dispatch: Reactive Power (act.)"
  Pmin_uc: float
  "Active power operational limits: Min."
  ccost: list
  "Costs"
  windspeed_a: float
  "Actual Dispatch: Wind speed (act.)"
  loc_name: str
  "Name"
  iWDmax: float
  "Initial symmetrical short-circuit current contribution: Max. instantaneous short-circuit current, iWDmax"
  pCharYrWS: list
  "Wind Model Time Series Characteristics: Annual Samples: Time Series Characteristics for Wind Speed (m/s)"
  searchBlockTrf: int
  "Externally modelled unit transformer"
  crotor: list
  "Additional rotor resistance"
  vecBreakpointsP: list
  "Piecewise linearisation for LP: Power"
  xmtini: float
  "Mechanical torque"
  vecCostRedispatchUp: list
  "Costs"
  imax: float
  "Fault Contribution: Max. Current"


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetMotorStartingFlag(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def GetAvailableGenPower(*args):
    ...

  def Delete(*args):
    ...

  def GetStepupTransformer(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetInom(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def IsPQ(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetParent(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def GetMechTorque(*args):
    ...

  def IsReducible(*args):
    ...

  def GetElecTorque(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def CalcEfficiency(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmAsmsc(Protocol):
  IkWDmin: float
  "Steady-state short-circuit current contribution: Minimum current"
  Irze: list
  "Rated Current of Grounding"
  cv: float
  "Cv"
  iHmcType: int
  "Harmonic Current Injections: Harmonic Model:Norton Equivalent:Current Source:Impedance"
  tstart: float
  "Starting Time"
  typ_id: object
  "Type"
  Urot: float
  "Rated Slip Ring Voltage"
  cpOperator: object
  "Operator"
  cimRdfId: list
  "RDF ID"
  monof: int
  "Operation Mode"
  iconfed: int
  "Static converter-fed drive"
  pPowerCrv: object
  "Wind Model: Wind Power Curve"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  pgini: float
  "Active Power"
  Kfactor: float
  "Fault Contribution: K Factor"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  rcrow: float
  "Rotor-Bypass Settings: Crow-Bar Resistance"
  iNoShcContr: int
  "No Short-Circuit Contribution"
  Xe: float
  "Internal Grounding Impedance: Reactance, Xe"
  Inom: float
  "Nominal Current"
  pFlicker: object
  "Flicker Contribution: Flicker Coefficients"
  cCategory: str
  "Plant Category"
  beta: float
  "Wind Model Weibull Distribution for Wind Speed: Beta"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  i_ctrl: int
  "Use Built-In Current Controller"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  Re: float
  "Internal Grounding Impedance: Resistance, Re"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  p_pctrl: object
  "Controlled Flow"
  cTypHmc: str
  "Harmonic Current Injections: Type of Harmonic Sources"
  c_pmod: object
  "Model"
  ciEarthed: int
  "Earthed"
  cgnd: int
  "Internal Grounding Impedance: Star Point:Connected:Not connected"
  kWD: float
  "Initial symmetrical short-circuit current contribution: Factor kappaWD"
  outserv: int
  "Out of Service"
  r2iec: float
  "Negative sequence short-cicuit impedance: Resistance, r2"
  rxWD: float
  "Initial symmetrical short-circuit current contribution: Ratio RWD/XWD"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  iAreaBus: int
  "Area"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  mdmlp: float
  "Mechanical Load: Proportional Factor"
  mdmex: float
  "Mechanical Load: Exponent"
  bus2: object
  "Terminal R"
  qgini: float
  "Reactive Power"
  oid_: int
  "ObjectID"
  iComDate: int
  "Commissioning Date"
  icurref: int
  "Harmonic Current Injections: Harmonic currents referred to"
  appr_status: int
  "Approval Information: Status"
  r0iec: float
  "Zero sequence short-circuit impedance: Resistance, r0"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  imax: float
  "Fault Contribution: Max. Current"
  iShcModel: int
  "Short-Circuit Model:Equivalent synchronous machine:Dynamic voltage support:Doubly fed asynchronous generator"
  pblocktrf: object
  "Externally modelled unit transformer: Unit transformer"
  iZoneBus: int
  "Zone"
  pOwner: object
  "Owner"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  slipset: float
  "Slip"
  Iks: float
  "Fault Contribution: Transient Short-Circuit Current"
  Kq: float
  "Kq: q-Axis, Proportional Gain"
  cnwsamples: int
  "Wind Model Time Series Characteristics: Annual Samples: Number of Samples"
  cOperSpeed: float
  "Operating speed"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  stowind: int
  "Wind Model"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  shcDeadband: int
  "Voltage deadband"
  cpFeed: object
  "Feeder"
  Pmmax: float
  "Max Pulse Width Modulation Index"
  Irated: float
  "Harmonic Current Injections: Rated Current"
  dataExtUnit: list
  "Unit"
  mean: float
  "Wind Model Weibull Distribution for Wind Speed: Mean"
  ngnum: int
  "Number of: parallel Machines"
  cpMeteostat: object
  "Meteo Station"
  cSubCategory: str
  "Subcategory"
  ignd: int
  "Star Point:&0&grounded:&2&isolated"
  cpArea: object
  "Area"
  pOperator: object
  "Operator"
  sernum: str
  "Serial Number"
  iAstabint: int
  "A-stable integration algorithm"
  iWindGen: int
  "Wind Generator"
  bus1: object
  "Terminal AC"
  constr: int
  "Year of Construction"
  cpSupplyTransformer: object
  "Supplying Transformer"
  iopt_windm: int
  "Wind Model: Wind Model"
  i_conv: int
  "Use Integrated PWM Converter"
  Kd: float
  "Kd: d-Axis, Proportional Gain"
  doc_id: object
  "Additional Data"
  aSubCategory: str
  "Subcategory"
  pMeteostat: object
  "Wind Model: Meteo Station (Correlation)"
  uDeadband: float
  "Voltage deadband: Deadband"
  gnrl_modby: str
  "Object modified by"
  i_feedback: int
  "Rotor Flux Feed-Back"
  pid_: int
  "ProjectID"
  variance: float
  "Wind Model Weibull Distribution for Wind Speed: Variance"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  Td: float
  "Td: d-Axis, Integration Time Constant"
  i_mot: int
  "Generator/Motor"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  x0iec: float
  "Zero sequence short-circuit impedance: Reactance, x0"
  tid_: int
  "TimeID"
  IkWDmax: float
  "Steady-state short-circuit current contribution: Maximum current"
  x2iec: float
  "Negative sequence short-cicuit impedance: Reactance, x2"
  root_id: object
  "Original Location"
  pCharYrMW: list
  "Wind Model Time Series Characteristics: Annual Samples: Time Series Characteristics of Active Power Contribution (MW)"
  pGRStoch: object
  "Stochastic Model for Generation: Stochastic Model"
  phmc: object
  "Harmonic Current Injections: Harmonic Currents"
  xcrow: float
  "Rotor-Bypass Settings: Crow-Bar Reactance"
  loc_name: str
  "Name"
  iWDmax: float
  "Initial symmetrical short-circuit current contribution: Max. instantaneous short-circuit current, iWDmax"
  aCategory: str
  "Plant Category"
  pCharYrWS: list
  "Wind Model Time Series Characteristics: Annual Samples: Time Series Characteristics for Wind Speed (m/s)"
  Pngrel: float
  "Stochastic Model for Generation: Based on rated active power (Pr)"
  searchBlockTrf: int
  "Externally modelled unit transformer"
  fold_id: object
  "In Folder"
  Tq: float
  "Tq: q-Axis, Integration Time Constant"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetAvailableGenPower(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetStepupTransformer(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmBbone(Protocol):
  cBbLength: float
  "Backbone data: Length of Backbone"
  dat_src: str
  "Data source"
  pathLoad: float
  "Calculated path load"
  chr_name: str
  "Characteristic Name"
  pBbStart: object
  "Start"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  cpHeadFold: object
  "Head Folder"
  iBbOrder: int
  "Order"
  pBbEnd: object
  "End"
  cMinCs: float
  "Backbone data: Minimum cross section on Backbone"
  outserv: int
  "Out of Service"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  cTieOpen: object
  "Tie Open Point"
  gnrl_modif: int
  "Object modified"
  cBbFOR: float
  "Backbone data: Forced outage rate of Backbone"
  cBbOrder: int
  "Backbone data: Order"
  cMeanCs: float
  "Backbone data: Mean cross section"
  charact: list
  "Charact."
  iCalcMeth: int
  "Calculation method"
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetMeanCs(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetTieOpenPoint(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetFOR(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetCompleteBbPath(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def CheckBbPath(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetMinCs(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetBbOrder(*args):
    ...

  def GetClassName(*args):
    ...

  def GetTotLength(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def HasGnrlMod(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmBmu(Protocol):
  merit_order: list
  "Merit Order"
  Ptot: float
  "Active Power Setpoint"
  cSumCostRedispUp: float
  "Additional redispatch costs: Upward active power redispatch costs"
  iInterPol: int
  "Operating costs: Approximation:Spline:Piecewise linear:Polynomial:Hermite"
  cpOperator: object
  "Operator"
  Psum: float
  "Max. Active Power Sum"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  minUpTime: float
  "Start-up/shut-down time constraints: Minimum up-time"
  powerDistrMethod: int
  "Power distribution"
  cFixedCostSum: float
  "Fixed costs"
  isDiscreteCtrlP: int
  "Restriction to discrete active power values"
  cDiscMethCostOp: int
  "Piecewise linearisation for LP"
  colPrated: list
  "Rated Active Power"
  consumCosts: float
  "Consumption mode: Consumption costs"
  appr_modif: int
  "Approval Information: Modified"
  PmaxConsum: float
  "Separate consumption mode: Max."
  ciDist: int
  "Distance from infeed in number of buses"
  colCtrlQ: list
  "Reactive powercontrol"
  cpBranch: object
  "Branch"
  isConsShutDownCost: int
  "Shut-down costs"
  discMethCostOp: int
  "Piecewise linearisation for LP"
  cPowerDistrMethod: int
  "Power distribution"
  consumMode: int
  "Separate consumption mode"
  cCostShutDownSum: float
  "Shut-down costs"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  cSumCostCurtailment: float
  "Costs for curtailment: Costs for curtailment"
  fixedCosts: float
  "Operating costs: Fixed costs"
  vecPowerRedispatchDown: list
  "Redispatch"
  desc: list
  "Description"
  cPsumMinConsum: float
  "Separate consumption mode: Min."
  cUserDefIndex: int
  "User defined Index"
  oid_: int
  "ObjectID"
  limRampDown: float
  "Ramp rate constraints: Ramp-down limit"
  pStorage: object
  "Storage model"
  PminConsum: float
  "Separate consumption mode: Min."
  machines_fix: list
  "Non-Dispatchable Machines"
  gnrl_modif: int
  "Object modified"
  cSumCostRedispDown: float
  "Additional redispatch costs: Downward active power redispatch costs"
  ciEnergized: int
  "Energized"
  plantUsage: int
  "Power plant usage:Thermal generation unit:Variable renewable energy source (VRE):Coupled with storage model"
  isConstrUpDown: int
  "Start-up/shut-down time constraints"
  costRedispatchDown: float
  "Additional redispatch costs: Downward active power redispatch costs"
  cLimRampShutDownSum: float
  "Ramp rate constraints: Shut-down ramp limit"
  colNomPower: list
  "Rated Power"
  cost_up: float
  "Start-up costs: Warm-start costs"
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  PsumAct: float
  "Actual Active Power Sum"
  cpFeed: object
  "Feeder"
  colCtrlP: list
  "Active powercontrol"
  numBreakpointsCostOp: int
  "Piecewise linearisation for LP: Number of breakpoints"
  cLimRampDownSum: float
  "Ramp rate constraints: Ramp-down limit"
  dataExtUnit: list
  "Unit"
  costColdStart: float
  "Start-up costs: Cold-start costs"
  cpMeteostat: object
  "Meteo Station"
  limRampUp: float
  "Ramp rate constraints: Ramp-up limit"
  cpArea: object
  "Area"
  isMustRunUC: int
  "Controls: Must run"
  cpSupplyTransformer: object
  "Supplying Transformer"
  costShutDown: float
  "Shut-down costs: Shut-down costs"
  cLimRampUpSum: float
  "Ramp rate constraints: Ramp-up limit"
  vecStartUpCosts: list
  "Start-up costs: Start-up costs"
  pid_: int
  "ProjectID"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  penaltyCosts: float
  "Operating costs: Penalty costs"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  cPenaltyCostWeightSum: float
  "Penalty costs"
  available_fix: list
  "Available"
  colGenShiftKey: list
  "Generationshift key"
  cSumCostRedispQ: float
  "Additional redispatch costs: Redispatch costs for reactive power change"
  isBmuPlims: int
  "Active power operational limits"
  polyDegree: int
  "Operating costs: Polynomial degree"
  fold_id: object
  "In Folder"
  cNumDispMachAutoDisp: int
  "Automatic Dispatch: Number of dispatchable machines"
  Qmin: float
  "Reactive power operational limits: Min."
  minDownTime: float
  "Start-up/shut-down time constraints: Minimum down-time"
  costRedispatchUp: float
  "Additional redispatch costs: Upward active power redispatch costs"
  vecStartUpTimes: list
  "Start-up costs: Down-time"
  dat_src: str
  "Data source"
  cMinUpTimeMach: float
  "Start-up/shut-down time constraints: Minimum up-time"
  Qmax: float
  "Reactive power operational limits: Max."
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  limRampStartUp: float
  "Ramp rate constraints: Start-up ramp limit"
  colCtrlFixedToLdfVal: list
  "Fix controls to Load Flow values"
  isConsCostsRedispatch: int
  "Additional redispatch costs"
  coldStartTime: float
  "Start-up costs: Cold-start time"
  cStorage: object
  "Storage model"
  cDisplayName: str
  "Display Name"
  costRedispatchQ: float
  "Additional redispatch costs: Redispatch costs for reactive power change"
  for_name: str
  "Foreign Key"
  contents: list
  "Scripts"
  isBmuQlims: int
  "Reactive power operational limits"
  vecCostRedispatchDown: list
  "Costs"
  cLimRampStartUpSum: float
  "Ramp rate constraints: Start-up ramp limit"
  cNumMachQds: int
  "Quasi-Dynamic Simulation: Number of machines for storage model"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  machines_disp: list
  "Dispatchable Machines"
  isConsStartUpCost: int
  "Start-up costs"
  cPsumMin: float
  "Active power operational limits: Min."
  cConsumWeightCostSum: float
  "Consumption costs"
  ciEarthed: int
  "Earthed"
  cNumFixedMachAutoDisp: int
  "Automatic Dispatch: Number of non-dispatchable machines"
  isLimQmax: int
  "Reactive power operational limits: Max."
  pOpCostCurve: object
  "Operating costs: Generator cost curve"
  outserv: int
  "Out of Service"
  cfixedCosts: float
  "Consumption mode: Fixed costs"
  avgCostsUc: float
  "Piecewise linearisation for LP: Average costs"
  iSchemeStatus: int
  "Scheme Status"
  isLimPmax: int
  "Active power operational limits: Max."
  appr_status: int
  "Approval Information: Status"
  smoothfac: float
  "Operating costs: Smoothing factor"
  isPcurrAllowed: int
  "Restriction to discrete active power values: Allow current active power value"
  iAdjustQ: int
  "Adjust Reactive Power accordingly"
  cPsumMaxConsum: float
  "Separate consumption mode: Max."
  isCtrlQ: int
  "Controls: Reactive power"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  colMachine: list
  "Machine"
  isLimQmin: int
  "Reactive power operational limits: Min."
  cNumCtrlsUc: int
  "Unit Commitment: Number of controllable machines"
  cpower: list
  "Operating costs: Power"
  charact: list
  "Charact."
  cPsumMax: float
  "Active power operational limits: Max."
  cQsumMin: float
  "Reactive power operational limits: Min."
  Pmin: float
  "Active power operational limits: Min."
  vecDiscreteCtrlPvals: list
  "Restriction to discrete active power values: Valid active power values"
  isLimPmin: int
  "Active power operational limits: Min."
  cMinDownTimeMach: float
  "Start-up/shut-down time constraints: Minimum down-time"
  isConstrRamp: int
  "Ramp rate constraints"
  isBmuCurtailCosts: int
  "Costs for curtailment"
  costCurtailment: float
  "Costs for curtailment: Costs for curtailment"
  colGenUsageBmu: list
  "Generatorusage"
  limRampShutDown: float
  "Ramp rate constraints: Shut-down ramp limit"
  isConsCostOp: int
  "Operating costs"
  isCtrlP: int
  "Controls: Active power"
  fixed: list
  "Must run"
  gnrl_modby: str
  "Object modified by"
  vecPowerRedispatchUp: list
  "Redispatch"
  ciLater: int
  "Lateral Index"
  priority: int
  "Virtual Power Plant, Merit Order"
  cQsumMax: float
  "Reactive power operational limits: Max."
  cPratedSum: float
  "Restriction to discrete active power values: Pr(rated)"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  Pmax: float
  "Active power operational limits: Max."
  ccost: list
  "Operating costs: Costs"
  iNoReserve: int
  "Exclude from reserve allocation"
  distr_mod: int
  "Distribution Mode"
  loc_name: str
  "Name"
  isRespectLims: int
  "Power distribution: Respect individual operational machine limits"
  vecBreakpointsP: list
  "Piecewise linearisation for LP: Power"
  vecCostRedispatchUp: list
  "Costs"


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def Delete(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetInom(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Apply(*args):
    ...

  def GetParent(*args):
    ...

  def Update(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmBoundary(Protocol):
  psummin: float
  "Active Power Limits: Min. Total Active Power Limit"
  branches: list
  "Branch"
  isLimIncreaseQ: int
  "Reactive power limits for Unit Commitment: Max. increase"
  cpOperator: object
  "Operator"
  qsummin: float
  "Reactive Power Limits: Min. Total Reactive Power Limit"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  QlimIncrease: float
  "Reactive power limits for Unit Commitment: Max. reactive boundary flow increase"
  appr_modby: str
  "Approval Information: Modified by"
  cntConstrTypeQ: int
  "Reactive power limits for Unit Commitment: Contingency-constraint type:Off:Soft constraint"
  manuf: str
  "Manufacturer"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  iOPFCqsummax: int
  "Reactive Power Limits: Max. Reactive Boundary Flow"
  iSwitchStates: int
  "Interior Region: Topological search: Stop at open breakers"
  isSoftQConstrUC: int
  "Reactive power limits for Unit Commitment: Soft constraint"
  scalingFacSoftConstrOpfQ: float
  "Reactive Power Limits: Weighting factor for soft constraint penalty"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  allowMarginFiltQ: int
  "Reactive power limits for Unit Commitment: Allow filtering by constraint margin"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  qsummax: float
  "Reactive Power Limits: Max. Total Reactive Power Limit"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  icolor: int
  "Colour"
  isLimDecreaseP: int
  "Active power limits for Unit Commitment: Max. decrease"
  iorient: list
  "Orientation"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  allowCntConstrFiltP: int
  "Active power limits for Unit Commitment: Allow contingency filtering by number of critical constraints"
  ciEarthed: int
  "Earthed"
  isLimQmax: int
  "Reactive power limits for Unit Commitment: Max."
  scalingFacSoftConstrCostP: float
  "Active power limits for Unit Commitment Penalty costs for soft constraints: Cost scaling factor"
  outserv: int
  "Out of Service"
  isQlimsRel: int
  "Reactive power limits for Unit Commitment"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  isLimPmax: int
  "Active power limits for Unit Commitment: Max."
  oid_: int
  "ObjectID"
  iComDate: int
  "Commissioning Date"
  iOPFCpsummax: int
  "Active Power Limits: Max. Active Boundary Flow"
  allowCntConstrFiltQ: int
  "Reactive power limits for Unit Commitment: Allow contingency filtering by number of critical constraints"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  iOPFCqsummin: int
  "Reactive Power Limits: Min. Reactive Boundary Flow"
  pOwner: object
  "Owner"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  ciorient: list
  "Orientation"
  cpZone: object
  "Zone"
  isLimQmin: int
  "Reactive power limits for Unit Commitment: Min."
  isLimDecreaseQ: int
  "Reactive power limits for Unit Commitment: Max. decrease"
  isPlimsRel: int
  "Active power limits for Unit Commitment"
  charact: list
  "Charact."
  headfold: list
  "Head Folder"
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  isLimIncreaseP: int
  "Active power limits for Unit Commitment: Max. increase"
  dataExtUnit: list
  "Unit"
  isMaxLoadSoftNlinP: int
  "Active power limits for Unit Commitment: Penalty costs for soft constraints"
  cpMeteostat: object
  "Meteo Station"
  cntConstrTypeP: int
  "Active power limits for Unit Commitment: Contingency-constraint type:Off:Soft constraint"
  isLimPmin: int
  "Active power limits for Unit Commitment: Min."
  cpArea: object
  "Area"
  pOperator: object
  "Operator"
  cAllowMarginFilt: int
  "Active power limits for Unit Commitment: Allow filtering by constraint margin"
  sernum: str
  "Serial Number"
  isSepCntConstrTypeP: int
  "Active power limits for Unit Commitment: Separate constraint type for contingencies"
  QlimDecrease: float
  "Reactive power limits for Unit Commitment: Max. reactive boundary flow decrease"
  cIsSepCntConstrType: int
  "Active power limits for Unit Commitment: Separate constraint type for contingencies"
  constr: int
  "Year of Construction"
  cpSupplyTransformer: object
  "Supplying Transformer"
  iOPFCpsummin: int
  "Active Power Limits: Min. Active Boundary Flow"
  isSoftPConstrUC: int
  "Active power limits for Unit Commitment: Soft constraint"
  psummax: float
  "Active Power Limits: Max. Total Active Power Limit"
  doc_id: object
  "Additional Data"
  buses: list
  "Busbar"
  PlimDecrease: float
  "Active power limits for Unit Commitment: Max. active boundary flow decrease"
  cAllowCntConstrFilt: int
  "Active power limits for Unit Commitment: Allow contingency filtering by number of critical constraints"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cubicles: list
  "Boundary Cubicle"
  iNeutral: int
  "Topological search: consider neutral wire connections"
  isMaxLoadSoftNlinQ: int
  "Reactive power limits for Unit Commitment: Penalty costs for soft constraints"
  cpSite: object
  "Site"
  InterPset: float
  "Consider Interchange Schedule: Scheduled Active Power Interchange"
  allowMarginFiltP: int
  "Active power limits for Unit Commitment: Allow filtering by constraint margin"
  cpSubstat: object
  "Substation"
  isSoftPConstr: int
  "Active Power Limits: Soft constraint (AC OPF only)"
  cpGrid: object
  "Grid"
  iSimTemp: int
  "Temp"
  isSoftQConstr: int
  "Reactive Power Limits: Soft constraint (AC OPF only)"
  PlimIncrease: float
  "Active power limits for Unit Commitment: Max. active boundary flow increase"
  tid_: int
  "TimeID"
  iInterChg: int
  "Consider Interchange Schedule"
  root_id: object
  "Original Location"
  scalingFacSoftConstrOpfP: float
  "Active Power Limits: Weighting factor for soft constraint penalty"
  scalingFacSoftConstrCostQ: float
  "Reactive power limits for Unit Commitment Penalty costs for soft constraints: Cost scaling factor"
  loc_name: str
  "Name"
  isSepCntConstrTypeQ: int
  "Reactive power limits for Unit Commitment: Separate constraint type for contingencies"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Resize(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Clear(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsSplitting(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def CalcShiftedReversedBoundary(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetInterior(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def AddCubicle(*args):
    ...

  def Update(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmBranch(Protocol):
  pPreRating: object
  "Pre-fault continuous rating: Thermal Rating"
  cTerm0: str
  "Terminal 0"
  fshcloc: float
  "Short-Circuit Location"
  cpOperator: object
  "Operator"
  cimRdfId: list
  "RDF ID"
  CCEarFr: float
  "Failures Double Earth Fault: Frequency of single earth faults"
  ContRating: float
  "Continuous rating: Rating"
  dat_src: str
  "Data source"
  pPreLimComp: object
  "Pre-fault continuous rating: Limiting Component"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  GPScoords: list
  "Geographical Position"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  iDatCon0: int
  "Connection 1"
  containsDCEquip: int
  "Contains DC equipment"
  pLimComp: object
  "Continuous rating: Limiting Component"
  cshcLne: object
  "Affected Line"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  bus2: object
  "Terminal j"
  CCEarProb: float
  "Failures Double Earth Fault: Conditional probability of a second earth fault"
  cIsInfoOk: int
  "Resulting Variables Ok"
  oid_: int
  "ObjectID"
  pRating: object
  "Continuous rating: Thermal Rating"
  appr_status: int
  "Approval Information: Status"
  circuit: object
  "Circuit"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  FOR1: float
  "Failures Branch Failures: Forced Outage Rate"
  pOwner: object
  "Owner"
  cTerm1: str
  "Terminal 1"
  PostRating: float
  "Post-fault continuous rating: Rating"
  PreRating: float
  "Pre-fault continuous rating: Rating"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  p_conn1: object
  "Connection 2"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  cIsConform: int
  "Branch is conformant for short-circuit calculation."
  ishcbrch: int
  "Available"
  iDatCon1: int
  "Connection 2"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  CCEarRepMu: float
  "Repair duration"
  pOperator: object
  "Operator"
  cpArea: object
  "Area"
  sernum: str
  "Serial Number"
  FOE: float
  "Failures Branch Failures: Forced Outage Expectancy"
  FOD: float
  "Failures Branch Failures: Forced Outage Duration"
  bus1: object
  "Terminal i"
  cpSupplyTransformer: object
  "Supplying Transformer"
  gnrl_modby: str
  "Object modified by"
  pDiagram: object
  "Diagram"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  pStoch: object
  "Failures: Element model"
  tid_: int
  "TimeID"
  p_conn0: object
  "Connection 1"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  iperfect: int
  "Failures: Ideal component"
  cLength4Shc: float
  "Length of branch (for short-circuit calculation)."
  cshcloc: float
  "Short-Circuit Location"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def Update(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmCabsys(Protocol):
  polesA_Im: list
  "Poles of A (Im)"
  maxErrVFZ: float
  "Vector fitting: RMS error"
  resY_Re: list
  "Residues of Yc (Re)"
  polesVFA: int
  "Vector fitting: Max. number of poles"
  disp_eig: int
  "Display data for eigenvalue"
  typ_id: object
  "Cable Definition"
  cpOperator: object
  "Operator"
  iterVFZ: int
  "Vector fitting: Max. number of iterations"
  fmin: float
  "Vector fitting: Min. frequency"
  dbg_fullBodeIntegral: int
  "Vector fitting: Full Bode integral"
  dat_src: str
  "Data source"
  disp_col: int
  "Display data for phase matrix index"
  chr_name: str
  "Characteristic Name"
  polesA: list
  "Poles"
  appr_modby: str
  "Approval Information: Modified by"
  writeMats: int
  "Write out matrices"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  ci_model: int
  "Line Model"
  fmax: float
  "Vector fitting: Max. frequency"
  c_rmsErrorZ_ULM: float
  "RMS error for Zc"
  cdisp_col: list
  "Display data for phase matrix index"
  stMarginA: float
  "Vector fitting: Stability margin"
  dbg_largePolesToConst: int
  "Vector fitting: Replace large poles by constants"
  pys: list
  "Surge Admittance"
  i_dist: int
  "Line Model"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  polesVFZ: int
  "Vector fitting: Max. number of poles"
  ciDist: int
  "Distance from infeed in number of buses"
  c_dist: int
  "Line Model: Distributed Parameter"
  cdisp_eig: list
  "Display data for eigenvalue"
  cpBranch: object
  "Branch"
  internalDataLayout: int
  "Internal data layout"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  useZorY: int
  "Used fit"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  dtmp: list
  "Passivity settings"
  iopt_tem: int
  "Line Parameters Calculation: Temperature Dependency"
  desc: list
  "Description"
  iterVFA: int
  "Vector fitting: Max. number of iterations"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  i_model: int
  "Line Model"
  oid_: int
  "ObjectID"
  c_pz: int
  "Number of poles:"
  appr_status: int
  "Approval Information: Status"
  adcFR: list
  "Wave propagation, DC"
  c_pzs: list
  "Surge impedance"
  dpolar: list
  "Polarity"
  fd_fit: int
  "Vector fitting: Fit"
  pTa: list
  "Travel Time"
  c_adc: list
  "Wave propagation, DC"
  gnrl_modif: int
  "Object modified"
  methodVFZ: int
  "Vector fitting: Number of poles:Increase and flip unstable poles:Increase until rms met"
  ciEnergized: int
  "Energized"
  zerosA: list
  "Zeros"
  resA_Im: list
  "Residues of Zc (Im)"
  dcCorr: int
  "Vector fitting: Apply DC correction"
  c_pa: int
  "A, Number of poles:"
  resZ_Re: list
  "Residues of Zc (Re)"
  pzs: list
  "Surge Impedance"
  c_rmsErrorA_ULM: float
  "RMS error for A"
  maxResPoleRatioZ: float
  "Max. residue-pole ratio"
  c_aAtDC: float
  "Wave propagation, DC"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  c_pTa: list
  "Travel time"
  resY_Im: list
  "Residues of Yc (Im)"
  charact: list
  "Charact."
  tuneDelays: int
  "Vector fitting: Fine-tune delays"
  dataExtDesc: list
  "Description"
  grpPoles: list
  "Poles per group"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  polesY_Im: list
  "Poles of Yc (Im)"
  c_rmsErrorY_ULM: float
  "RMS error for Yc"
  cpFeed: object
  "Feeder"
  maxErrVFA: float
  "Vector fitting: RMS error"
  stMarginZ: float
  "Vector fitting: Stability margin"
  dataExtUnit: list
  "Unit"
  resZ_Im: list
  "Residues of Zc (Im)"
  tmat: list
  "Transformation Matrix Tv"
  cpMeteostat: object
  "Meteo Station"
  cpArea: object
  "Area"
  summandDelayIdx: list
  "Delay index for summand"
  plines: list
  "Circuit"
  cdisp_row: list
  "Display data for phase matrix row"
  fd_model: int
  "Vector fitting: Line Model"
  ftau: float
  "Line Parameters Calculation: Frequency for parameter approx."
  polesZ_Re: list
  "Poles of Zc (Re)"
  cpSupplyTransformer: object
  "Supplying Transformer"
  resA_Re: list
  "Residues of Zc (Re)"
  maxResPoleRatioA: float
  "Max. residue-pole ratio"
  useDCcorr: int
  "Apply DC correction"
  outputPoles: int
  "Vector fitting: Output poles"
  c_lumped: int
  "Line Model: Lumped Parameter (PI)"
  adc: list
  "Wave propagation, DC"
  gnrl_modby: str
  "Object modified by"
  maxErrVFY: float
  "Vector fitting: RMS error"
  pRoute: object
  "Route"
  c_pTad: float
  "Travel time"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  disp_mode: int
  "Display Propagation Function Data for Mode"
  passivity: int
  "Passivity correction"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  polesZ_Im: list
  "Poles of Zc (Im)"
  pa: list
  "Wave Propagation"
  cpGrid: object
  "Grid"
  delayIdx: list
  "Delay index"
  polesY_Re: list
  "Poles of Yc (Re)"
  strategy: int
  "Unstable poles:0"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  disp_row: int
  "Display data for phase matrix row"
  loc_name: str
  "Name"
  methodVFA: int
  "Vector fitting: Number of poles:Increase and flip unstable poles:Increase until rms met"
  polesA_Re: list
  "Poles of A (Re)"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def GetLineCable(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def FitParams(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def Update(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmComp(Protocol):
  typ_id: object
  "Frame"
  cpOperator: object
  "Operator"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  pelm: list
  "Net Elements"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  pblk: list
  "Slots"
  cpFeed: object
  "Feeder"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  cpArea: object
  "Area"
  cpSupplyTransformer: object
  "Supplying Transformer"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def SlotUpdate(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def Slotupd(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmCoup(Protocol):
  iExclRA: int
  "Excluded from Running Arrangement"
  dpl1: float
  "dpl1"
  typ_id: object
  "Type"
  cpOperator: object
  "Operator"
  cimRdfId: list
  "RDF ID"
  Tprot: float
  "Protection Tripping Time"
  deltaFlow: float
  "Max. active power change"
  shownValues: int
  "Value representation"
  idetail: int
  "Detailed for calculation"
  dat_src: str
  "Data source"
  dpl5: float
  "dpl5"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  iRestore: int
  "Use as power restoration switch"
  t_del_b: float
  "Scatter: Phase b"
  ctrl_type: int
  "Fault Separation/ Power Restoration: Sectionalising:Remote Controlled (Stage 1):Indicator of Short Circuit (Stage 2):Manual (Stage 3)"
  InomPre: float
  "Pre-fault nominal current"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  Inom: float
  "Nominal Current"
  t_del_a: float
  "Scatter: Phase a"
  t_del_n: float
  "Scatter: Neutral"
  iSep: int
  "Fault Separation/ Power Restoration: Switch can be opened during restoration"
  nphase: int
  "No. of Phases:1:2:3"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  nneutral: int
  "No. of Neutrals:0:1"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  revFlowChk: int
  "Relevant for the reversed power flow analysis"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  iNeutInter: int
  "Switch interrupts neutral wire"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  dpl4: float
  "dpl4"
  rel_hasProt: int
  "Fault clearance: Consider as switch with protection device"
  ciEarthed: int
  "Earthed"
  reclAttempts: int
  "Fault clearance: Maximum number of reclosing attempts"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  iAreaBus: int
  "Area"
  isclosed: int
  "Actual State:open:closed"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  bus2: object
  "Terminal j"
  oid_: int
  "ObjectID"
  iComDate: int
  "Commissioning Date"
  pRating: object
  "Thermal Rating"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  iZoneBus: int
  "Zone"
  pOwner: object
  "Owner"
  iNormOpenSwt: int
  "Normally open switch"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciScenarioType: int
  "Scenario Type"
  Tclear: float
  "Fault Clearing Time"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  logEnvCurve: int
  "Log TRV envelope:No:For first opening event only:For all opening events"
  dataExtUnit: list
  "Unit"
  limitRevFlow: int
  "Limit reversed flow"
  prot_fail: float
  "Failure Data for Protection: Circuit breaker fails to open"
  cpMeteostat: object
  "Meteo Station"
  Tswitch: float
  "Fault Separation/ Power Restoration: Time to actuate switch"
  spon_prot_t: float
  "Independent unnecessary open: Time to close"
  aUsage: str
  "Switch Type"
  cpArea: object
  "Area"
  pOperator: object
  "Operator"
  cTswitch: float
  "Fault Separation/ Power Restoration: Time to open remote controlled switch"
  cpBay: object
  "Bay"
  deltaFlowrel: float
  "Max. active power change"
  sernum: str
  "Serial Number"
  iResDir: int
  "Fault Separation/ Power Restoration: Power Restoration"
  pCBrating: object
  "Ratings"
  bus1: object
  "Terminal i"
  constr: int
  "Year of Construction"
  dep_protOver: float
  "Failure Data for Protection: Unnecessary backup protection maloperation"
  cpSupplyTransformer: object
  "Supplying Transformer"
  rel_hasRecl: int
  "Fault clearance: Consider as switch with automatic reclosing device"
  t_del_c: float
  "Scatter: Phase c"
  doc_id: object
  "Additional Data"
  spon_prot_f: float
  "Failure Data for Protection: Frequency of spurious protection operation"
  gnrl_modby: str
  "Object modified by"
  dpl2: float
  "dpl2"
  Tb: float
  "Break Time"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  iNoOpt: int
  "Exclude from optimisation"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  on_off: int
  "Closed"
  fold_id: object
  "In Folder"
  dpl3: float
  "dpl3"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsOpen(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsClosed(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetRemoteBreakers(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def IsBreaker(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def Open(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def Close(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmDsl(Protocol):
  parnam: list
  "Parameter Names"
  typ_id: object
  "Type"
  cpOperator: object
  "Operator"
  configScript: object
  "Configuration Script"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  pelm: list
  "Net Element"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  contents: list
  "Events"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  matrix: list
  "Characteristics"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  signal: list
  "Signal Name"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  matrix2: list
  "Two Dimensional Characteristics"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  cpArea: object
  "Area"
  iAstabint: int
  "A-stable integration algorithm"
  params: list
  "Parameter"
  cpSupplyTransformer: object
  "Supplying Transformer"
  oarrmat: list
  "Array/Matrix"
  gnrl_modby: str
  "Object modified by"
  parameterNames: list
  "Parameter Names"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def ExportToClipboard(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def ExportToFile(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmFeeder(Protocol):
  dpl7: float
  "dpl7"
  cosphiset: float
  "Load Scaling: Power Factor, cos(phi)"
  ctrlType: int
  "Control type"
  scale2tini: float
  "Initial value for control 2, ph. 3"
  Isetr: float
  "Load Scaling: Current, ph. 1"
  dpl1: float
  "dpl1"
  Qsett: float
  "Load Scaling: Reactive Power, ph. 3"
  scalePhaseWise: int
  "Load Scaling: Phasewise scaling"
  cpOperator: object
  "Operator"
  ciRadial: int
  "Radial"
  cimRdfId: list
  "RDF ID"
  scaleini: float
  "Initial value for control 1"
  dat_src: str
  "Data source"
  dpl5: float
  "dpl5"
  n_4wt: int
  "No. of 4-w Trfs."
  Iset: float
  "Load Scaling: Current"
  chr_name: str
  "Characteristic Name"
  n_pvs: int
  "No. of PV Systems"
  appr_modby: str
  "Approval Information: Modified by"
  pf_recapsetr: int
  "Load Scaling: Power Factor, ph. 1:ind.:cap."
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  Qsets: float
  "Load Scaling: Reactive Power, ph. 2"
  n_stg: int
  "No. of Static Generators"
  scale10r: float
  "Load Scaling: Scaling Factor, ph. 1"
  cbranch: object
  "Location: Branch"
  n_term: int
  "No. of Terminals"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  scale2sini: float
  "Initial value for control 2, ph. 2"
  ciDist: int
  "Distance from infeed in number of buses"
  ipfdir: int
  "Consider active power flow direction"
  operRadial: int
  "Feeder is supposed to be operated radially."
  cpBranch: object
  "Branch"
  Isets: float
  "Load Scaling: Current, ph. 2"
  icolor: int
  "Colour"
  obj_id: object
  "Cubicle"
  iorient: int
  "Orientation:--> Branch:--> Busbar"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  dpl4: float
  "dpl4"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  Ssetr: float
  "Load Scaling: Apparent Power, ph. 1"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  ciConn: int
  "Connected"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  maxVrise: float
  "Limits for Voltage Change relative to Feeding Point: Maximum allowed Voltage Rise"
  cpParFeed: object
  "Parallel Feeder"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  Psetr: float
  "Load Scaling: Active Power, ph. 1"
  Sset: float
  "Load Scaling: Apparent Power"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  obj_bus: int
  "Direction"
  scale1sini: float
  "Initial value for control 1, ph. 2"
  pf_recapsets: int
  "Load Scaling: Power Factor, ph. 2:ind.:cap."
  fold_id: object
  "In Folder"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  ciorient: int
  "Location: Orientation:--> Branch:--> Busbar"
  cpZone: object
  "Zone"
  n_lod: int
  "No. of Loads"
  cPhaseWise: int
  "Load Scaling: Phasewise input"
  cosphisetr: float
  "Load Scaling: Power Factor, cos(phi), ph. 1"
  charact: list
  "Charact."
  n_3wt: int
  "No. of 3-w Trfs."
  Pset: float
  "Load Scaling: Active Power"
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  maxVdrop: float
  "Limits for Voltage Change relative to Feeding Point: Maximum allowed Voltage Drop"
  dataExtUnit: list
  "Unit"
  Psett: float
  "Load Scaling: Active Power, ph. 3"
  i_scalepf: int
  "Load Scaling: Second setpoint"
  n_bar: int
  "No. of Busbars"
  n_asm: int
  "No. of asyn. Machines"
  scale1tini: float
  "Initial value for control 1, ph. 3"
  cpMeteostat: object
  "Meteo Station"
  cn_bus: object
  "Location: Busbar"
  cpArea: object
  "Area"
  dpl6: float
  "dpl6"
  pf_recapsett: int
  "Load Scaling: Power Factor, ph. 3:ind.:cap."
  dpl10: float
  "dpl10"
  cosphisett: float
  "Load Scaling: Power Factor, cos(phi), ph. 3"
  Isett: float
  "Load Scaling: Current, ph. 3"
  n_cust: int
  "Total number of customers"
  cpSupplyTransformer: object
  "Supplying Transformer"
  dpl9: float
  "dpl9"
  preDefIniSc: int
  "User defined initial scale"
  scale10t: float
  "Load Scaling: Scaling Factor, ph. 3"
  n_2wt: int
  "No. of 2-w Trfs."
  cosphisets: float
  "Load Scaling: Power Factor, cos(phi), ph. 2"
  gnrl_modby: str
  "Object modified by"
  i_scale: int
  "Load Scaling: First setpoint"
  dpl2: float
  "dpl2"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpTrfFeed: object
  "Feeding Transformer"
  dpl8: float
  "dpl8"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  irVolt: int
  "Terminate feeder when encountering higher voltage levels"
  n_lne: int
  "No. of Lines"
  scale2rini: float
  "Initial value for control 2, ph. 1"
  scalephiini: float
  "Initial value for control 2"
  root_id: object
  "Original Location"
  scale0: float
  "Load Scaling: Scaling Factor"
  Qset: float
  "Load Scaling: Reactive Power"
  Qsetr: float
  "Load Scaling: Reactive Power, ph. 1"
  n_sym: int
  "No. of syn. Machines"
  loc_name: str
  "Name"
  scale10s: float
  "Load Scaling: Scaling Factor, ph. 2"
  Ssett: float
  "Load Scaling: Apparent Power, ph. 3"
  Ssets: float
  "Load Scaling: Apparent Power, ph. 2"
  ilVolt: int
  "Terminate feeder when encountering lower voltage levels"
  scale1rini: float
  "Initial value for control 1, ph. 1"
  pf_recapset: int
  "Load Scaling: Power Factor:ind.:cap."
  Psets: float
  "Load Scaling: Active Power, ph. 2"
  dpl3: float
  "dpl3"


  def GetBuses(*args):
    ...

  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetBranches(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def GetNodesBranches(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def GetObjs(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def CalcAggrVarsInRadFeed(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetAll(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmFile(Protocol):
  iopt_imp: int
  "Import from"
  cpOperator: object
  "Operator"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  cDisplayName: str
  "Display Name"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  oid_: int
  "ObjectID"
  approx: int
  "Approximation:constant:linear"
  variable: list
  "Variable"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  results: object
  "Results"
  icol: list
  "Column j"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  object: list
  "Element"
  dataExtUnit: list
  "Unit"
  iopt_tini: int
  "Load Flow Time"
  cpMeteostat: object
  "Meteo Station"
  cpArea: object
  "Area"
  afac: list
  "Factor a"
  cpSupplyTransformer: object
  "Supplying Transformer"
  prim: str
  "P or S"
  Variable: list
  "Variable"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  bfac: list
  "Factor b"
  loc_name: str
  "Name"
  tini: float
  "Load Flow Time: Load Flow Time"
  f_name: str
  "Filename"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def SaveFile(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def LoadFile(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmFilter(Protocol):
  Irze: list
  "Rated current of grounding"
  harmPgeRp: float
  "Frequency dependence of parallel resistances: Parallel resistance Rp"
  l2: float
  "Layout parameter: Inductance L2"
  ufltnom: float
  "Rated voltage"
  iintgnd: int
  "Neutral conductor: N-connection:None:At terminal (ABC-N):Separate terminal"
  QF1: float
  "Design parameter: Quality factor 1"
  c2: float
  "Layout parameter: Capacitance C2"
  ccap: float
  "Layout parameter: Capacitance C"
  cpOperator: object
  "Operator"
  cimRdfId: list
  "RDF ID"
  CCEarFr: float
  "Failures Double Earth Fault: Frequency of single earth faults"
  fcharRp: object
  "Frequency dependence of parallel resistances: Rp(f)"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  fcharR1: object
  "Frequency dependence of R-L elements: Rs1(f)"
  rp1: float
  "Layout parameter: Parallel resistance Rp1"
  appr_modby: str
  "Approval Information: Modified by"
  lrea: float
  "Layout parameter: Inductance L"
  harmPgeC1: float
  "Frequency dependence of capacitors: Capacitance C1"
  manuf: str
  "Failures: Manufacturer"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  Xe: float
  "Internal grounding impedance: Reactance, Xe"
  fres1: float
  "Design parameter: Resonant frequency 1"
  harmPgeR: float
  "Frequency dependence of R-L elements: Resistance Rs"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  Re: float
  "Internal grounding impedance: Resistance, Re"
  ciDist: int
  "Distance from infeed in number of buses"
  rsrea: float
  "Layout parameter: Resistance Rs"
  cpBranch: object
  "Branch"
  fcharL1: object
  "Frequency dependence of R-L elements: L1(f)"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  fcharR2: object
  "Frequency dependence of R-L elements: Rs2(f)"
  systp: int
  "System Type:&0&AC:&2&AC/BI"
  ciEarthed: int
  "Earthed"
  cgnd: int
  "Internal grounding impedance: Star point:Connected:Not connected"
  outserv: int
  "Out of Service"
  harmPgeC2: float
  "Frequency dependence of capacitors: Capacitance C2"
  harmPgeL1: float
  "Frequency dependence of R-L elements: Inductance L1"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  desc: list
  "Description"
  fcharRp1: object
  "Frequency dependence of parallel resistances: Rp1(f)"
  cUserDefIndex: int
  "User defined Index"
  harmPgeRp1: float
  "Frequency dependence of parallel resistances: Parallel resistance Rp1"
  iSchemeStatus: int
  "Scheme Status"
  rs1: float
  "Layout parameter: Resistance Rs1"
  sOpComment: list
  "Operator comment"
  CCEarProb: float
  "Failures Double Earth Fault: Conditional probability of a second earth fault"
  QF: float
  "Design parameter: Quality factor QF"
  oid_: int
  "ObjectID"
  nres1: float
  "Design parameter: Tuning order 1"
  phtech: int
  "Technology"
  iComDate: int
  "Commissioning Date"
  appr_status: int
  "Approval Information: Status"
  fres2: float
  "Design parameter: Resonant frequency 2"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  harmPgeR1: float
  "Frequency dependence of R-L elements: Resistance Rs1"
  FOR1: float
  "Failures: Forced Outage Rate"
  rs2: float
  "Layout parameter: Resistance Rs2"
  l1: float
  "Layout parameter: Inductance L1"
  pOwner: object
  "Owner"
  rp2: float
  "Layout parameter: Parallel resistance Rp2"
  acost: float
  "Annual cost"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  fcharL: object
  "Frequency dependence of R-L elements: L(f)"
  fcharRp2: object
  "Frequency dependence of parallel resistances: Rp2(f)"
  charact: list
  "Charact."
  fcharR: object
  "Frequency dependence of R-L elements: Rs(f)"
  dataExtDesc: list
  "Description"
  fcharC2: object
  "Frequency dependence of capacitors: C2(f)"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  rpara: float
  "Layout parameter: Parallel resistance Rp"
  mode_inp: int
  "Input mode:Default:Design parameter:Layout parameter"
  harmPgeR2: float
  "Frequency dependence of R-L elements: Resistance Rs2"
  dataExtUnit: list
  "Unit"
  ctech: int
  "Technology"
  cpMeteostat: object
  "Meteo Station"
  fnom: float
  "Nominal frequency"
  bus1n: object
  "Neutral conductor: Neutral"
  CCEarRepMu: float
  "Failures Double Earth Fault: Repair duration"
  nflph: int
  "Phases:1:2:3"
  ignd: int
  "Star point:grounded:compensated:isolated"
  cpArea: object
  "Area"
  pOperator: object
  "Operator"
  sernum: str
  "Failures: Serial Number"
  fcharL2: object
  "Frequency dependence of R-L elements: L2(f)"
  FOE: float
  "Failures: Forced Outage Expectancy"
  FOD: float
  "Failures: Forced Outage Duration"
  bus1: object
  "Terminal"
  constr: int
  "Year of Construction"
  cpSupplyTransformer: object
  "Supplying Transformer"
  cutot: float
  "Design parameter: Rated current"
  doc_id: object
  "Additional Data"
  capsa: str
  "Vector group:Y:D:YN"
  fcharC: object
  "Frequency dependence of capacitors: C(f)"
  harmPgeRp2: float
  "Frequency dependence of parallel resistances: Parallel resistance Rp2"
  c1: float
  "Layout parameter: Capacitance C1"
  gnrl_modby: str
  "Object modified by"
  flttype: int
  "Filter type:Single-tuned:HP Second order:HP Third order:HP C-type:Double-tuned type 1:Double-tuned type 2:Double-tuned type 3:Double-tuned type 4"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  nres: float
  "Design parameter: Tuning order"
  cpSite: object
  "Site"
  harmPgeL: float
  "Frequency dependence of R-L elements: Inductance L"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  pStoch: object
  "Failures: Element model"
  qtotn: float
  "Design parameter: Rated reactive power"
  tid_: int
  "TimeID"
  harmPgeL2: float
  "Frequency dependence of R-L elements: Inductance L2"
  nres2: float
  "Design parameter: Tuning order 2"
  root_id: object
  "Original Location"
  fres: float
  "Design parameter: Resonant frequency"
  loc_name: str
  "Name"
  iperfect: int
  "Failures: Ideal component"
  harmPgeC: float
  "Frequency dependence of capacitors: Capacitance C"
  fold_id: object
  "In Folder"
  fcharC1: object
  "Frequency dependence of capacitors: C1(f)"
  QF2: float
  "Design parameter: Quality factor 2"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmGenstat(Protocol):
  IkWDmin: float
  "Steady-state short-circuit current contribution: Minimum current"
  Pmin_ucPU: float
  "Active Power Operational Limits: Min."
  IkPFmax: float
  "Steady-state short-circuit current contribution: Maximum current"
  Ikss1PF: float
  "Initial symmetrical short-circuit current contribution: Single-phase faults, Ik1PF"
  fcharx1: object
  "Norton Equivalent: Frequency-Dependence, x1h(f)"
  dpl1: float
  "dpl1"
  Pmax_uc: float
  "Active Power Operational Limits: Max."
  pQlimType: object
  "Reactive Power Operational Limits: Capability Curve"
  allowGenMode: int
  "Separate generation mode"
  iInterPol: int
  "Approximation:Spline:Piecewise linear:Polynomial:Hermite"
  cpOperator: object
  "Operator"
  cimRdfId: list
  "RDF ID"
  isRPR: int
  "Optimisation of reactive power reserve"
  costRedispatchP: float
  "Redispatch costs for active power change"
  iOPFCQmin: int
  "Reactive Power Operational Limits: Min."
  pPowerCrv: object
  "Wind Power Curve"
  dpl5: float
  "dpl5"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  T1_pllu: float
  "Voltage PLL: Low-Pass Filter Time Constant"
  p_under: float
  "cosphi(P)-Characteristic Underexcited: Active Power"
  pf_under: float
  "cosphi(P)-Characteristic Underexcited: Min. Power Factor"
  minUpTime: float
  "Start-up/shut-down time constraints: Minimum up-time"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  P_max: float
  "Active Power: Rating: Max."
  Pcu: float
  "Series reactor: Copper losses"
  iNoShcContr: int
  "No Short-Circuit Contribution"
  Inom: float
  "Nominal Current"
  isDiscreteCtrlP: int
  "Restriction to discrete active power values"
  pSubModel: object
  "Submodel"
  Qmin_a: float
  "Qmin(act.)"
  allowConsumMode: int
  "Separate consumption mode"
  nneutral: int
  "Neutral Conductor: N-Connection:None:At terminal (ABC-N):Separate terminal"
  consumCosts: float
  "Consumption mode: Consumption costs"
  appr_modif: int
  "Approval Information: Modified"
  R0hmc: float
  "Norton Equivalent: Resistance, R0h"
  ciDist: int
  "Distance from infeed in number of buses"
  r2: float
  "Negative sequence: Resistance r2"
  cpBranch: object
  "Branch"
  pgini_a: float
  "Actual Dispatch: Active Power (act.)"
  isConsShutDownCost: int
  "Shut-down costs"
  x0: float
  "Zero sequence: Reactance, x0"
  cTypHmc: str
  "Harmonic Source: Type of Harmonic Sources"
  discMethCostOp: int
  "Piecewise linearisation for LP"
  c_pmod: object
  "Model"
  limRampDownPU: float
  "Ramp rate constraints: Ramp-down limit"
  Qfu_max: float
  "Q(V)-Characteristic: Q max"
  efficiencyLPgen: float
  "Efficiency: Used efficiency (generation)"
  cIsDiscreteCtrlP: int
  "Restriction to discrete active power values"
  scaleQmax: float
  "Reactive Power Operational Limits: Scaling Factor (max.)"
  efficiencyCurveConsum: object
  "Efficiency: Efficiency curve (consumption)"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  fixedCosts: float
  "Fixed costs"
  pmaxratf: float
  "Active Power: Rating: Rating Factor"
  vecPowerRedispatchDown: list
  "Redispatch"
  desc: list
  "Description"
  Qfu_min: float
  "Q(V)-Characteristic: Q min"
  Tondelay: float
  "Min. operation voltage: Switch-on delay"
  cUserDefIndex: int
  "User defined Index"
  iOPFCPmax: int
  "Active Power Operational Limits: Max."
  sOpComment: list
  "Operator Comment"
  Ik: float
  "Fault Contribution: Steady-State Shc. Current"
  oid_: int
  "ObjectID"
  limRampDown: float
  "Ramp rate constraints: Ramp-down limit"
  icurref: int
  "Harmonic Source: Harmonic currents referred to"
  fcharr2: object
  "Norton Equivalent: Frequency-Dependence, r2h(f)"
  p_direc: int
  "Dispatch: Power Direction:P>=0:P<0"
  r1hmc: float
  "Norton Equivalent: Resistance, r1h"
  iComDate: int
  "Commissioning Date"
  installCost: float
  "General costs: Installation costs"
  pStorage: object
  "Storage model"
  r0iec: float
  "Zero sequence short-circuit impedance: Resistance, r0"
  QtargetRPR: float
  "Optimisation of reactive power reserve: Q target value"
  c_pCtrlHV: object
  "Controlled HV-busbar"
  umin: float
  "Min. operation voltage: Switch-off threshold"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  rtox: float
  "Max. Fault Contribution: R to X'' ratio"
  isConstrUpDown: int
  "Start-up/shut-down time constraints"
  costRedispatchDown: float
  "Additional redispatch costs: Downward active power redispatch costs"
  Ki_plli: float
  "Current PLL: Integration Gain"
  limRampUpPU: float
  "Ramp rate constraints: Ramp-up limit"
  pOwner: object
  "Owner"
  phiini: float
  "Dispatch: Angle"
  Iks: float
  "Fault Contribution: Transient Short-Circuit Current"
  Kq: float
  "Current controller: Kq: q-Axis, proportional gain"
  Pnom: float
  "Active Power Operational Limits: Pr(rated)"
  cost_up: float
  "Start-up costs: Warm-start costs"
  cnwsamples: int
  "Wind Model Time Series Characteristics: Annual Samples: Number of Samples"
  iestq: int
  "State Estimation: Estimate Reactive Power"
  dataExtDesc: list
  "Description"
  Pmax_ucPU: float
  "Active Power Operational Limits: Max."
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  shcDeadband: int
  "Voltage deadband"
  outServPzero: int
  "Out of service when active power is zero"
  cpFeed: object
  "Feeder"
  mode_inp: str
  "Dispatch: Input Mode"
  numBreakpointsCostOp: int
  "Piecewise linearisation for LP: Number of breakpoints"
  dataExtUnit: list
  "Unit"
  mean: float
  "Wind Model Weibull Distribution for Wind Speed: Mean"
  cVecDiscreteCtrlPvals: list
  "Valid active power values"
  ip_ctrl: int
  "Reference Machine"
  cosgini_a: float
  "Actual Dispatch: Power Factor (act.)"
  cpMeteostat: object
  "Meteo Station"
  costColdStart: float
  "Start-up costs: Cold-start costs"
  limRampUp: float
  "Ramp rate constraints: Ramp-up limit"
  bus1n: object
  "Neutral Conductor: Neutral"
  pOperator: object
  "Operator"
  pf_recap: int
  "Dispatch: Power Factor:ind.:cap."
  isVRE: int
  "Generator usage: Generator usage:Single thermal generation unit:Variable renewable energy source (VRE):Coupled with storage model:Part of Virtual Power Plant"
  cpArea: object
  "Area"
  IkPFmin: float
  "Steady-state short-circuit current contribution: Minimum current"
  isMustRunUC: int
  "Additional constraints for controls: Must run"
  R0toR1: float
  "Series reactor: R0/R1 ratio"
  pQPcurve: object
  "Q(P)-Characteristic: Q(P)-Curve"
  iAstabint: int
  "A-stable integration algorithm"
  sgini_a: float
  "Actual Dispatch: Apparent Power (act.)"
  iOPFCQmax: int
  "Reactive Power Operational Limits: Max."
  p_over: float
  "cosphi(P)-Characteristic Overexcited: Active Power"
  bus1: object
  "Terminal"
  usp_min: float
  "Voltage Setpoint Limits: Min. Voltage Setpoint"
  x2hmc: float
  "Norton Equivalent: Reactance, x2h"
  constr: int
  "Year of Construction"
  uk: float
  "Series reactor: Short circuit impedance"
  costShutDown: float
  "Shut-down costs"
  originalValue: float
  "Original value"
  cQ_min: float
  "Reactive Power Operational Limits: Minimum"
  cpSupplyTransformer: object
  "Supplying Transformer"
  iopt_windm: int
  "Wind Model: Wind Model"
  genShiftKey: float
  "Generation shift key"
  tds: float
  "Time Constants: Td'"
  windspeed: float
  "Dispatch: Wind speed"
  doc_id: object
  "Additional Data"
  udeadblow: float
  "Q(V)-Characteristic Voltage Dead Band: Lower Voltage Limit"
  sgini: float
  "Dispatch: Apparent Power"
  iestp: int
  "State Estimation: Estimate Active Power"
  uDeadband: float
  "Voltage deadband: Deadband"
  fcharx2: object
  "Norton Equivalent: Frequency-Dependence, x2h(f)"
  scaleQmin: float
  "Reactive Power Operational Limits: Scaling Factor (min.)"
  fcharx0: object
  "Norton Equivalent: Frequency-dependence, x0h(f)"
  vecStartUpCosts: list
  "Start-up costs: Start-up costs"
  pid_: int
  "ProjectID"
  dispatch: int
  "Generator Dispatch"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  penaltyCosts: float
  "Penalty costs"
  usp_max: float
  "Voltage Setpoint Limits: Max. Voltage Setpoint"
  Td: float
  "Current controller: Td: d-Axis, integration time constant"
  isCtrlPplacement: int
  "Optimise active power"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  c_psecc: object
  "External Secondary Controller"
  scale0: float
  "Dispatch: Scaling Factor"
  bustp: str
  "Corresponding Bus Type:"
  dsecres: float
  "Reserve"
  pf_over: float
  "cosphi(P)-Characteristic Overexcited: Min. Power Factor"
  phmc: object
  "Harmonic Source: Harmonic Currents"
  qdslCtrl: object
  "Quasi-Dynamic Model"
  av_mode: str
  "Local Controller"
  Qmax_a: float
  "Qmax(act.)"
  aCategory: str
  "Plant Category"
  Pngrel: float
  "Stochastic Model for Generation: Based on rated active power (Pr)"
  cQ_max: float
  "Reactive Power Operational Limits: Maximum"
  polyDegree: int
  "Polynomial degree"
  fold_id: object
  "In Folder"
  dpl3: float
  "dpl3"
  minDownTime: float
  "Start-up/shut-down time constraints: Minimum down-time"
  Irze: list
  "Rated Current of Grounding"
  x0hmc: float
  "Norton Equivalent: Reactance, x0h"
  iSimModel: int
  "Model:According to connected input signals:Current source:Voltage source:Constant impedance:Constant power"
  Ikss: float
  "Max. Fault Contribution: Subtransient Short-Circuit Current"
  costRedispatchUp: float
  "Additional redispatch costs: Upward active power redispatch costs"
  vecStartUpTimes: list
  "Start-up costs: Down-time"
  iconfed: int
  "Static Converter-Fed Drive"
  dat_src: str
  "Data source"
  Ikss3PF: float
  "Initial symmetrical short-circuit current contribution: Three-phase faults, Ik3PF"
  limRampStartUpPU: float
  "Ramp rate constraints: Start-up ramp limit"
  fcharr0: object
  "Norton Equivalent: Frequency-dependence, r0h(f)"
  T1_plli: float
  "Current PLL: Low-Pass Filter Time Constant"
  qinput: int
  "Interpretation of input signals: Reactive Power signal:in Mvar:in p.u. based on Snom:in p.u. based on Pnom:as cos(phi)"
  pgini: float
  "Dispatch: Active Power"
  isCtrlFixedToLdfVal: int
  "Additional constraints for controls: Fix controls to Load Flow values"
  Kfactor: float
  "Fault Contribution: K Factor"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  Pmax_a: float
  "Pmax(act.)"
  availFactor: float
  "Availability Factor"
  limRampStartUp: float
  "Ramp rate constraints: Start-up ramp limit"
  Tdelay: float
  "Current source model: Delay time constant"
  isConsCostsRedispatch: int
  "Additional redispatch costs"
  r2shc: float
  "Negative sequence short-circuit impedance: Resistance, r2"
  pFlicker: object
  "Flicker Coefficients"
  PmaxInvPU: float
  "Separate consumption mode: Max."
  xtor: float
  "Max. Fault Contribution: X'' to R ratio"
  cCategory: str
  "Plant Category"
  beta: float
  "Wind Model Weibull Distribution for Wind Speed: Beta"
  coldStartTime: float
  "Start-up costs: Cold-start time"
  cStorage: object
  "Generator usage: Storage model"
  nphase: int
  "No. of Phases"
  R1hmc: float
  "Norton Equivalent: Resistance, R1h"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  costRedispatchQ: float
  "Redispatch costs for reactive power change"
  PminInv: float
  "Separate consumption mode: Min."
  tdss: float
  "Time Constants: Td''"
  for_name: str
  "Foreign Key"
  vecCostRedispatchDown: list
  "Costs"
  x2: float
  "Negative sequence: Reactance x2"
  cosgini: float
  "Dispatch: Power Factor"
  fcharr1: object
  "Norton Equivalent: Frequency-Dependence, r1h(f)"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  dpl4: float
  "dpl4"
  Skss: float
  "Max. Fault Contribution: Subtransient Short-Circuit Level"
  isConsStartUpCost: int
  "Start-up costs"
  ciEarthed: int
  "Earthed"
  isLimQmax: int
  "Reactive Power Operational Limits: Max."
  kWD: float
  "Initial symmetrical short-circuit current contribution: Factor kappaWD"
  outserv: int
  "Out of Service"
  pOpCostCurve: object
  "Operating costs: Generator cost curve"
  pBMU: object
  "Virtual Power Plant"
  r2iec: float
  "Negative sequence short-circuit impedance: Resistance, r2"
  rxWD: float
  "Initial symmetrical short-circuit current contribution: Ratio RWD/XWD"
  PminInvPU: float
  "Separate consumption mode: Min."
  cfixedCosts: float
  "Consumption mode: Fixed costs"
  Pmin_a: float
  "Pmin(act.)"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  r2hmc: float
  "Norton Equivalent: Resistance, r2h"
  avgCostsUc: float
  "Piecewise linearisation for LP: Average costs"
  iSchemeStatus: int
  "Scheme Status"
  X2hmc: float
  "Norton Equivalent: Reactance, X2h"
  ddroop: float
  "Voltage Droop: Droop"
  qgini: float
  "Dispatch: Reactive Power"
  iUseZsr: int
  "Negative sequence: Use series reactor impedance, if negative sequence voltage signals are connected"
  phtech: int
  "Technology:3PH:3PH-E:1PH PH-E:1PH PH-N:1PH PH-PH"
  isLimPmax: int
  "Active Power Operational Limits: Max."
  c_pstac: object
  "External Station Controller"
  appr_status: int
  "Approval Information: Status"
  smoothfac: float
  "Smoothing factor"
  iOPFCPmin: int
  "Active Power Operational Limits: Min."
  isPcurrAllowed: int
  "Restriction to discrete active power values: Allow current active power value"
  iUseNegSeqAngle: int
  "Negative sequence: Current source model: Use negative sequence angle for negative sequence current source"
  ictqg: int
  "Controls: Reactive Power"
  x2shc: float
  "Negative sequence short-circuit impedance: Reactance, x2"
  imax: float
  "Fault Contribution: Max. Current"
  cosn: float
  "Ratings: Rated Power Factor"
  iShcModel: int
  "Short-Circuit Model:Equivalent synchronous machine:Dynamic voltage support:Doubly fed asynchronous generator:Full size converter"
  pblocktrf: object
  "Externally modelled unit transformer: Unit transformer"
  psutype: str
  "Power station unit type"
  isCtrlQ: int
  "Controls: Reactive power"
  lifeSpan: float
  "Expected life span"
  iearthed: int
  "Earthed"
  ddroopue: float
  "Q(V)-Characteristic: Droop (underexcited)"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  Kp_pllu: float
  "Voltage PLL: Proportional Gain"
  cpZone: object
  "Zone"
  EDS: float
  "Stochastic Model for Generation: Expectancy of derated states"
  isLimQmin: int
  "Reactive Power Operational Limits: Min."
  cpower: list
  "Power"
  charact: list
  "Charact."
  efficiencyCurveGen: object
  "Efficiency: Efficiency curve (generation)"
  limRampShutDownPU: float
  "Ramp rate constraints: Shut-down ramp limit"
  ddroopoe: float
  "Q(V)-Characteristic: Droop (overexcited)"
  ciScenarioType: int
  "Scenario Type"
  stowind: int
  "Wind Model"
  iv_mode: int
  "Local Controller"
  Irated: float
  "Harmonic Source: Rated Current"
  Sk: float
  "Fault Contribution: Steady-State Short-Circuit Level"
  QtargetBase: int
  "Optimisation of reactive power reserve: Base:Reactive power limits:Rated apparent power"
  efficiencyLPconsum: float
  "Efficiency: Used efficiency (consumption)"
  ngnum: int
  "Number of: parallel units"
  vecDiscreteCtrlPvals: list
  "Restriction to discrete active power values: Valid active power values"
  cSubCategory: str
  "Subcategory"
  scrapValue: float
  "Scrap value"
  X0toX1: float
  "Series reactor: X0/X1 ratio"
  isLimPmin: int
  "Active Power Operational Limits: Min."
  isConstrRamp: int
  "Ramp rate constraints"
  R2hmc: float
  "Norton Equivalent: Resistance, R2h"
  is4SpinReserve: int
  "Consider for region spinning reserve"
  q_min: float
  "Reactive Power Operational Limits: Min."
  maintenCost: float
  "General costs: Maintenance costs"
  Ki_pllu: float
  "Voltage PLL: Integration Gain"
  scale0_a: float
  "Actual Dispatch: Scaling Factor (act.)"
  sernum: str
  "Serial Number"
  pf_recap_a: str
  "Actual Dispatch: Power Factor Ind/Cap (act.)"
  iopt_tdr: int
  "Q(V)-Characteristic: Different droop values"
  Kpf: float
  "Dispatch: Prim. Frequency Bias"
  PmaxInv: float
  "Separate consumption mode: Max."
  FOE: float
  "Stochastic Model for Generation: Forced Outage Expectancy"
  Sks: float
  "Fault Contribution: Transient Short-Circuit Level"
  costCurtailment: float
  "Costs for curtailment"
  X0hmc: float
  "Norton Equivalent: Reactance, X0h"
  sgn: float
  "Ratings: Rated Apparent Power"
  Ikss2PF: float
  "Initial symmetrical short-circuit current contribution: Two-phase faults, Ik2PF"
  limRampShutDown: float
  "Ramp rate constraints: Shut-down ramp limit"
  Kd: float
  "Current controller: Kd: d-Axis, proportional gain"
  r0: float
  "Zero sequence: Resistance, r0"
  isConsCostOp: int
  "Operating costs"
  FAY: float
  "Stochastic Model for Generation: Full Availability Expectancy"
  X1hmc: float
  "Norton Equivalent: Reactance, X1h"
  mode_pgi: int
  "Model:Active power input:Wind speed input"
  aSubCategory: str
  "Subcategory"
  isCtrlP: int
  "Controls: Active power"
  pMeteostat: object
  "Wind Model: Meteo Station (Correlation)"
  fixed: int
  "Must run"
  vecPowerRedispatchUp: list
  "Redispatch"
  gnrl_modby: str
  "Object modified by"
  dpl2: float
  "dpl2"
  variance: float
  "Wind Model Weibull Distribution for Wind Speed: Variance"
  iDelay: int
  "Current source model: dq-reference angle delay (if dq-reference signals not connected)"
  q_max: float
  "Reactive Power Operational Limits: Max."
  ciLater: int
  "Lateral Index"
  priority: int
  "Merit Order"
  r0hmc: float
  "Norton Equivalent: Resistance, r0h"
  avgCosts: float
  "Average costs"
  x0iec: float
  "Zero sequence short-circuit impedance: Reactance, x0"
  tid_: int
  "TimeID"
  x2iec: float
  "Negative sequence short-circuit impedance: Reactance, x2"
  cIsMustRunUC: int
  "Additional constraints for controls: Must run"
  IkWDmax: float
  "Steady-state short-circuit current contribution: Maximum current"
  ictpg: int
  "Controls: Active Power"
  usetp: float
  "Dispatch: Voltage"
  x1hmc: float
  "Norton Equivalent: Reactance, x1h"
  root_id: object
  "Original Location"
  pCharYrMW: list
  "Wind Model Time Series Characteristics: Annual Samples: Time Series Characteristics of Active Power Contribution (MW)"
  cIsPcurrAllowed: int
  "Allow current active power value"
  udeadbup: float
  "Q(V)-Characteristic Voltage Dead Band: Upper Voltage Limit"
  uonthr: float
  "Min. operation voltage: Switch-on threshold"
  pGRStoch: object
  "Stochastic Model for Generation: Stochastic Model"
  qgini_a: float
  "Actual Dispatch: Reactive Power (act.)"
  Kp_plli: float
  "Current PLL: Proportional Gain"
  Pmin_uc: float
  "Active Power Operational Limits: Min."
  ccost: list
  "Costs"
  windspeed_a: float
  "Actual Dispatch: Wind speed (act.)"
  loc_name: str
  "Name"
  pinput: int
  "Interpretation of input signals: Active Power signal:in MW:in p.u. based on Snom:in p.u. based on Pnom"
  iWDmax: float
  "Initial symmetrical short-circuit current contribution: Max. instantaneous short-circuit current, iWDmax"
  pCharYrWS: list
  "Wind Model Time Series Characteristics: Annual Samples: Time Series Characteristics for Wind Speed (m/s)"
  searchBlockTrf: int
  "Externally modelled unit transformer"
  vecBreakpointsP: list
  "Piecewise linearisation for LP: Power"
  vecCostRedispatchUp: list
  "Costs"
  Tq: float
  "Current controller: Tq: q-Axis, integration time constant"


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def ResetDerating(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def GetAvailableGenPower(*args):
    ...

  def Delete(*args):
    ...

  def GetStepupTransformer(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetInom(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def Reconnect(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def Derate(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def Disconnect(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetParent(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def CalcEfficiency(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsConnected(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmGndswt(Protocol):
  Irze: list
  "Rated Current of Grounding"
  typ_id: object
  "Type"
  cpOperator: object
  "Operator"
  idetail: int
  "Detailed for calculation"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  nphase: int
  "No. of Phases:1:2:3"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  nneutral: int
  "No. of Neutrals:0:1"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  oid_: int
  "ObjectID"
  iComDate: int
  "Commissioning Date"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  pOwner: object
  "Owner"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  pOperator: object
  "Operator"
  cpArea: object
  "Area"
  sernum: str
  "Serial Number"
  bus1: object
  "Terminal"
  constr: int
  "Year of Construction"
  cpSupplyTransformer: object
  "Supplying Transformer"
  doc_id: object
  "Additional Data"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  on_off: int
  "Closed"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsOpen(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsClosed(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def Open(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def Close(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmLne(Protocol):
  polesA_Im: list
  "Poles of A (Im)"
  cmethChr: str
  "Reference Method"
  condMat: int
  "Type Parameters: Conductor Material:Aluminium:Copper:Aldrey (AlMgSi):Aluminium-Steel:Aldrey-Steel"
  txt_typ: str
  "Type of Line"
  resY_Re: list
  "Residues of Y (Re)"
  Imaxlim: float
  "Max. permissible current"
  polesVFA: int
  "Vector fitting: Max. number of poles"
  X0: float
  "Resulting Values: Zero Seq. Reactance, X0"
  ka1: float
  "Wave Propagation Constant."
  pa2: list
  "Poles, A2"
  loadfactor: float
  "Load factor (lf)"
  c_pCompi: object
  "Compensation i"
  dpl1: float
  "dpl1"
  if_depth: float
  "Installation Conditions: Depth of Laying"
  cpOperator: object
  "Operator"
  a2dc: float
  "Results of Line Parameters Calculation: Wave Propagation, DC, Mode 2"
  cimRdfId: list
  "RDF ID"
  za0: list
  "Zeros, A0"
  maxResPoleRatioY: float
  "Max. residue-pole ratio"
  dpl5: float
  "dpl5"
  chr_name: str
  "Characteristic Name"
  kz1: float
  "Results of Line Parameters Calculation: Surge Impedance, HF, Mode 1."
  Ta0: float
  "Travel Time, Mode 0"
  iopt_tem_rms: int
  "Line parameter calculation: Temperature dependency"
  appr_modby: str
  "Approval Information: Modified by"
  ktrto: int
  "Transposition"
  dataExtValue: list
  "Value"
  soilThermResdry: float
  "Dry soil thermal resistivity"
  InomPre: float
  "Pre-fault nominal current"
  GPScoords: list
  "Geographical Position"
  iopt_turns: int
  "Installation Conditions: Drum winding with multiple turns"
  C1: float
  "Capacitance C1"
  nlnum: int
  "Number of: parallel Lines"
  fmax: float
  "Line Parameters Calculation: Max. Frequency of Parameter Fitting"
  cdisp_col: list
  "Display data for phase matrix index"
  Inom_a: float
  "Resulting Values: Nominal Current (act.)"
  Inom: float
  "Resulting Values: Nominal Current"
  stMarginA: float
  "Vector fitting: Stability margin"
  cTa0_rms: float
  "Results of line parameter calculation: Travel time, mode 0"
  dbg_largePolesToConst: int
  "Vector fitting: Replace large poles by constants"
  cnm_typ: float
  "Type"
  c_za0: int
  "Results of Line Parameters Calculation: A0, N Zeros"
  i_dist: int
  "Line Model"
  induct: int
  "Cable in Duct"
  kz2: float
  "Results of Line Parameters Calculation: Surge Impedance, HF, Mode 2."
  r0mSbasepu: list
  "r0m (Sbase)"
  ckz2_rms: float
  "Results of line parameter calculation: Surge Impedance, HF, mode 2."
  appr_modif: int
  "Approval Information: Modified"
  x0mSbasepu: list
  "x0m (Sbase)"
  ciDist: int
  "Distance from infeed in number of buses"
  x0Sbasepu: float
  "x0 (Sbase)"
  pz0: list
  "Poles, Mode 0"
  pCondN: object
  "Type of neutral conductors"
  lossModel_rms: int
  "Line model: Loss model:R/2 at both ends"
  XeXl: float
  "Earth Factor, Xe/Xl"
  cpBranch: object
  "Branch"
  c_pa1: int
  "Results of Line Parameters Calculation: A1, N Poles"
  za1: list
  "Zeros, A1"
  dist_a: float
  "Line loop inductance: Distance between cables"
  Ice: float
  "Resulting Values: Earth-Fault Current, Ice"
  dryingoutavoid: int
  "Soil drying-out avoided"
  G0: float
  "Conductance G0"
  pMeteo: object
  "Parameters: Meteo. Station"
  earthReturn: int
  "Earth return formula:Carson:Deri-Semlyen"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  nlsim: int
  "Enable for Contingency Analysis"
  inAir: int
  "Parameters: Laying:Ground:Air"
  cTa2_rms: float
  "Results of line parameter calculation: Travel time, mode 2"
  iAreaBus: int
  "Area"
  methodVFY: int
  "Vector fitting: Number of poles:Increase and flip unstable poles:Increase until rms met"
  zz1: list
  "Zeros, Z1"
  iterVFA: int
  "Vector fitting: Max. number of iterations"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  bus2: object
  "Terminal j"
  CCEarProb: float
  "Failures Double Earth Fault: Conditional probability of a second earth fault"
  c_Ta0: float
  "Results of Line Parameters Calculation: Travel Time, Mode 0"
  oid_: int
  "ObjectID"
  iComDate: int
  "Commissioning Date"
  adcFR: list
  "Wave propagation, DC"
  iopt_laid: int
  "Laid on:Perforated trays:Unperforated trays:Ladders, Supports or Cleats"
  gnrl_modif: int
  "Object modified"
  zz2: list
  "Zeros, Z2"
  ciEnergized: int
  "Energized"
  isConstrLoadingPlacement: int
  "Max. loading constraint for Optimal Equipment Placement"
  asys: int
  "Installation Conditions: Clearance :Touching:1x Cable Diameter:d <= 0.125 m:0.125 m < d <= 0.25 m:0.25 m < d <= 0.5 m:0.5 m < d <= 1.0 m"
  resA_Im: list
  "Residues of Z (Im)"
  dcCorr: int
  "Vector fitting: Apply DC correction"
  iZoneBus: int
  "Zone"
  cubsecs: list
  "Sections/Line Loads/Compensation"
  pOwner: object
  "Owner"
  xSbasepu: float
  "x (Sbase)"
  c_aAtDC: float
  "Wave propagation, DC"
  occupCoeff: float
  "Installation Conditions: Occupation coefficient"
  sagGnd: float
  "Max.sag, earth conductors"
  c_pa2: int
  "Results of Line Parameters Calculation: A2, N Poles"
  resY_Im: list
  "Residues of Y (Im)"
  lossModel_emt: int
  "Loss model:R/4 at both ends; R/2 in the middle:R/2 at both ends"
  cvaltyp: int
  "According to Standard"
  dataExtDesc: list
  "Description"
  bSbasepu: float
  "b (Sbase)"
  grpPoles: list
  "Poles per group"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  c_rmsErrorY_ULM: float
  "RMS error for Y"
  c_pysULM: float
  "Surge admittance"
  cpFeed: object
  "Feeder"
  ca2dc_rms: float
  "Results of line parameter calculation: Wave propagation, DC, mode 2"
  icond: int
  "Bunched in Air, on Surface, Embedded or Enclosed"
  allowCntConstrFilt: int
  "Constraint Filtering: Allow contingency filtering by number of critical constraints"
  dataExtUnit: list
  "Unit"
  tmat: list
  "Transformation Matrix"
  boltResOn: int
  "Bolted joint"
  cpMeteostat: object
  "Meteo Station"
  ckz0_rms: float
  "Results of line parameter calculation: Surge impedance, HF, mode 0."
  initypset: int
  "Missing Type"
  armTyp: int
  "Type Parameters: Armour Type:AWA:SWA"
  isSepCntConstrType: int
  "Max. loading constraint for contingencies: Separate constraint type"
  CCEarRepMu: float
  "Failures Double Earth Fault: Repair duration"
  pOperator: object
  "Operator"
  meth_nfc: str
  "Installation Conditions: Reference Method"
  cpArea: object
  "Area"
  B0: float
  "Susceptance B0"
  summandDelayIdx: list
  "Delay index for summand"
  b0Sbasepu: float
  "b0 (Sbase)"
  conTrainPos: list
  "Train position"
  ftau: float
  "Line Parameters Calculation: Frequency for Travel-Time Estimation"
  cIsSepCntConstrType: int
  "Max. loading constraint for contingencies: Separate constraint type"
  Top: float
  "Operating Temperature"
  bus1: object
  "Terminal i"
  constr: int
  "Year of Construction"
  cpSupplyTransformer: object
  "Supplying Transformer"
  resA_Re: list
  "Residues of Z (Re)"
  c_pz0: int
  "Results of Line Parameters Calculation: Z0, N Poles/Zeros"
  pCondGnd: object
  "Type of earth conductors"
  cka1_rms: float
  "Wave propagation constant."
  sagCir: float
  "Max.sag, phase conductors"
  doc_id: object
  "Additional Data"
  rearth: float
  "Earth resistivity"
  iopt_dir: str
  "Installation Conditions: Arrangement"
  outputPoles: int
  "Vector fitting: Output poles"
  cAllowCntConstrFilt: int
  "Constraint Filtering: Allow contingency filtering by number of critical constraints"
  shMat: int
  "Type Parameters: Sheath Insulation:PVC:XLPE/EPR"
  adc: list
  "Wave propagation, DC"
  maxErrVFY: float
  "Vector fitting: RMS error"
  mediumTemp: float
  "Medium mean temperature"
  pid_: int
  "ProjectID"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  iopt_ord: str
  "Installation Conditions: Cable Formation"
  cpSite: object
  "Site"
  R1: float
  "Resulting Values: Pos. Seq. Resistance, R1"
  cpSubstat: object
  "Substation"
  ftau_rms: float
  "Frequency for travel-time estimation"
  pStoch: object
  "Failures: Element model"
  nconTrains: int
  "No. of trains"
  ducts: int
  "Number of Ducts"
  delayIdx: list
  "Delay index"
  cpGrid: object
  "Grid"
  soiltyp: int
  "Environment Conditions: Soil Type:Underwater:Very Moist:Moist:Normal:Dry:Very Dry"
  polesY_Re: list
  "Poles of Y (Re)"
  trays: int
  "Installation Conditions: Number of Trays/Ducts"
  c_pz2: int
  "Results of Line Parameters Calculation: Z2, N Poles/Zeros"
  ckz1_rms: float
  "Results of line parameter calculation: Surge Impedance, HF, mode 1."
  disp_row: int
  "Display data for phase matrix row"
  c_pTadULM: float
  "Travel time"
  ca1dc_rms: float
  "Results of line parameter calculation: Wave propagation, DC, mode 1"
  ReRl: float
  "Earth Factor, Re/Rl"
  ccosphi: float
  "Definition of Line Load: Power Factor"
  B1: float
  "Susceptance B1"
  za2: list
  "Zeros, A2"
  ishclne: int
  "Available"
  methodVFA: int
  "Vector fitting: Number of poles:Increase and flip unstable poles:Increase until rms met"
  polesA_Re: list
  "Poles of A (Re)"
  fold_id: object
  "In Folder"
  c_adcULM: float
  "Wave propagation, DC"
  dpl3: float
  "dpl3"
  thick_d: float
  "Bolted joint resistance: Joint thickness"
  pa1: list
  "Poles, A1"
  cmethChrBs: str
  "Reference Method"
  solar_rad: float
  "Solar radiation intensity"
  fshcloc: float
  "Short-Circuit Location"
  typ_id: object
  "Type"
  forTrainSim: int
  "Line for train simulation"
  CCEarFr: float
  "Failures Double Earth Fault: Frequency of single earth faults"
  fmin: float
  "Line Parameters Calculation: Min. Frequency of Parameter Fitting"
  isSepCntMaxAllowedLoading: int
  "Max. loading constraint for contingencies: Separate max. allowed loading"
  clnedf: float
  "Derating Factor"
  dbg_fullBodeIntegral: int
  "Vector fitting: Full Bode integral"
  disp_col: int
  "Display data for phase matrix index"
  pz2: list
  "Poles,Mode 2"
  dat_src: str
  "Data source"
  conTrain: list
  "Train"
  c_za1: int
  "Results of Line Parameters Calculation: A1, N Zeros"
  cb_expsun: int
  "Environment Conditions: Exposed to direct sunlight"
  cntMaxAllowedLoading: float
  "Max. loading constraint for contingencies: Max. allowed loading in Contingencies"
  NrCust: int
  "Number of connected customers"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  kz0: float
  "Results of Line Parameters Calculation: Surge Impedance, HF, Mode 0."
  ci_model: int
  "Line Model"
  c_pz1: int
  "Results of Line Parameters Calculation: Z1, N Poles/Zeros"
  fline: float
  "Parameters: Derating Factor"
  meth: str
  "Installation Conditions: Reference Method"
  c_pcond: object
  "Conductor Type"
  rSbasepu: float
  "r (Sbase)"
  cCab: int
  "Line is a cable"
  phiz1: float
  "Resulting Values: Pos. Seq. Impedance, Angle"
  G1: float
  "Conductance G1"
  Unom: float
  "Rated Voltage"
  pys: list
  "Surge Admittance"
  ca0dc_rms: float
  "Results of line parameter calculation: Wave propagation, DC, mode 0"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  for_name: str
  "Foreign Key"
  Ta2: float
  "Travel Time, Mode 2"
  internalDataLayout: int
  "Internal data layout"
  cpHeadFold: object
  "Head Folder"
  ka2: float
  "Wave Propagation Constant."
  cpOwner: object
  "Owner"
  dpl4: float
  "dpl4"
  polesVFY: int
  "Vector fitting: Max. number of poles"
  ciEarthed: int
  "Earthed"
  cka2_rms: float
  "Wave propagation constant."
  iopt_grp: int
  "Installation Conditions: Grouping:Single Layer on Wall, Floor or Unperforated Tray:Single Layer Fixed Directly under Wooden or Masonry Ceiling"
  outserv: int
  "Out of Service"
  tolBode: float
  "Line Parameters Calculation: Tolerance for Bode Approximation"
  cSav: float
  "Definition of Line Load: Average Load"
  iopt_tem: int
  "Line Parameters Calculation: Temperature Dependency"
  X1: float
  "Resulting Values: Pos. Seq. Reactance, X1"
  iSchemeStatus: int
  "Scheme Status"
  i_model: int
  "Line Model"
  isMaxLoadSoftNlin: int
  "Penalty costs for soft constraints"
  cTa1_rms: float
  "Results of line parameter calculation: Travel time, mode 1"
  Z1: float
  "Resulting Values: Pos. Seq. Impedance, Z1"
  cntConstrType: int
  "Max. loading constraint for contingencies: Contingency-constraint type:Off:Soft constraint"
  pRating: object
  "Parameters: Thermal Rating"
  appr_status: int
  "Approval Information: Status"
  cNrCust: int
  "Definition of Line Load: Number of Customers"
  pTa: list
  "Travel Time"
  stMarginY: float
  "Vector fitting: Stability margin"
  FOR1: float
  "Failures Sustained Line Failures: Forced Outage Rate"
  cmethChrNfc: str
  "Reference Method"
  c_ptow: object
  "Line Couplings"
  c_rmsErrorA_ULM: float
  "RMS error for A"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  scalingFacSoftConstrOpf: float
  "Max. loading constraint: Weighting factor for soft constraint penalty"
  pTypStoch: object
  "Failures: Type model"
  r0Sbasepu: float
  "r0 (Sbase)"
  meth_nfcmv: str
  "Installation Conditions: Reference Method"
  charact: list
  "Charact."
  tuneDelays: int
  "Vector fitting: Fine-tune delays"
  iopt_engine: int
  "Installation Conditions: Cables for powering mobile gear with drum winding"
  c_Ta1: float
  "Results of Line Parameters Calculation: Travel Time, Mode 1"
  polesY_Im: list
  "Poles of Y (Im)"
  cka0_rms: float
  "Wave propagation constant"
  iterVFY: int
  "Vector fitting: Max. number of iterations"
  Irated: float
  "Type Parameters: Rated Current"
  maxErrVFA: float
  "Vector fitting: RMS error"
  i_const_rms: int
  "Line model: Travelling wave"
  isoMat: int
  "Type Parameters: Insulation Material:PVC:XLPE/EPR:Mineral:Paper"
  soilThermRes: float
  "Environment Conditions: Soil thermal resistivity"
  cfshcloc: float
  "Short-Circuit Location"
  i_ldlv: int
  "Line Load"
  R1_tmax: float
  "Pos. Seq. Resistance at Max. Operating Temperature, R1 at tmax"
  alpha: float
  "Medium diffusivity"
  a1dc: float
  "Results of Line Parameters Calculation: Wave Propagation, DC, Mode 1"
  allowMarginFilt: int
  "Constraint Filtering: Allow filtering by constraint margin"
  scalingFacSoftConstrCost: float
  "Penalty costs for soft constraints: Cost scaling factor"
  cAllowMarginFilt: int
  "Constraint Filtering: Allow filtering by constraint margin"
  sernum: str
  "Serial Number"
  temp_env: float
  "Environment Conditions: Ambient temperature"
  Ta1: float
  "Travel Time, Mode 1"
  cmeth: str
  "Old Reference Method"
  c_paULM: int
  "A, Number of poles:"
  windvelocity: float
  "Wind velocity"
  meth_bs: str
  "Installation Conditions: Reference Method"
  isConstrLoading: int
  "Max. loading constraint for Unit Commitment"
  cdisp_row: list
  "Display data for phase matrix row"
  FOE: float
  "Failures Sustained Line Failures: Forced Outage Expectancy"
  c_pa0: int
  "Results of Line Parameters Calculation: A0, N Poles"
  fd_model: int
  "Line Parameters Calculation: Line Model"
  FOD: float
  "Failures Sustained Line Failures: Forced Outage Duration"
  pz1: list
  "Poles, Mode 1"
  minResTrainDist: float
  "Min. resolution of train distances"
  maxload: float
  "Thermal Loading Limit: Max. loading"
  npara: int
  "Installation Conditions: Grouped Cables"
  lossAssign: int
  "Loss assignment:according to grouping:uniformly distributed:to Terminal i:to Terminal j"
  qurs_A: float
  "Joint cross-section"
  maxResPoleRatioA: float
  "Max. residue-pole ratio"
  cmethChrNfcmv: str
  "Reference Method"
  useDCcorr: int
  "Apply DC correction"
  ka0: float
  "Wave Propagation Constant"
  c_pCompj: object
  "Compensation j"
  c_Ta2: float
  "Results of Line Parameters Calculation: Travel Time, Mode 2"
  dpl2: float
  "dpl2"
  gnrl_modby: str
  "Object modified by"
  C0: float
  "Capacitance C0"
  ciLater: int
  "Lateral Index"
  cIsSepCntMaxAllowedLoading: int
  "Max. loading constraint for contingencies: Separate max. allowed loading"
  typ_res: int
  "Index of cable type stored in results vector"
  pa: list
  "Wave Propagation"
  Ldc: float
  "Resulting Values: Inductance, Ldc"
  tid_: int
  "TimeID"
  dline: float
  "Parameters: Length of Line"
  a0dc: float
  "Results of Line Parameters Calculation: Wave Propagation, DC, Mode 0"
  cnm_elm: float
  "Line"
  R0: float
  "Resulting Values: Zero Seq. Resistance, R0"
  cSmax: float
  "Definition of Line Load: Max. Load"
  iSpecLoc: int
  "Specific Cable Location"
  root_id: object
  "Original Location"
  iOPFCload: int
  "Max. loading constraint"
  pCondCir: object
  "Type of phase conductors"
  c_za2: int
  "Results of Line Parameters Calculation: A2, N Zeros"
  zz0: list
  "Zeros, Zl0"
  c_pcoup: list
  "Coupled Line"
  trans_ff: float
  "Failures Transient Faults: Transient Fault Frequency"
  loc_name: str
  "Name"
  iperfect: int
  "Failures: Ideal component"
  thetaX: float
  "Critical temperature of soil"
  cshcloc: float
  "Short-Circuit Location"
  pa0: list
  "Poles, A0"


  def GetChildren(*args):
    ...

  def GetZ0m(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def CreateFeederWithRoutes(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetIthr(*args):
    ...

  def GetY0m(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsCable(*args):
    ...

  def Delete(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def MeasureLength(*args):
    ...

  def GetInom(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetZmatDist(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetY1m(*args):
    ...

  def SetDetailed(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def AreDistParamsPossible(*args):
    ...

  def HasResults(*args):
    ...

  def IsNetCoupling(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def GetType(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def HasRoutesOrSec(*args):
    ...

  def IsHidden(*args):
    ...

  def FitParams(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def HasRoutes(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetZ1m(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetParent(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmLnesec(Protocol):
  condMat: int
  "Type Parameters: Conductor Material:Aluminium:Copper:Aldrey (AlMgSi):Aluminium-Steel:Aldrey-Steel"
  cmethChr: str
  "Reference Method"
  txt_typ: str
  "Topology: Type of Line"
  Imaxlim: float
  "Max. permissible current"
  X0: float
  "Resulting Values: Zero Seq. Reactance, X0"
  cmethChrBs: str
  "Reference Method"
  loadfactor: float
  "Neher-McGrath: Load factor (lf)"
  solar_rad: float
  "Solar radiation intensity"
  tid_: int
  "TimeID"
  typ_id: object
  "Type"
  if_depth: float
  "Installation Conditions: Depth of Laying"
  cpOperator: object
  "Operator"
  CCEarFr: float
  "Failures Double Earth Fault: Frequency of single earth faults"
  clnedf: float
  "Derating Factor"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  dataExtValue: list
  "Value"
  cb_expsun: int
  "Environment Conditions: Exposed to direct sunlight"
  soilThermResdry: float
  "Dry soil thermal resistivity"
  iopt_turns: int
  "Installation Conditions: Drum winding with multiple turns"
  C1: float
  "Capacitance C1"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  fline: float
  "Topology: Derating Factor"
  Inom_a: float
  "Resulting Values: Nominal Current (act.)"
  Inom: float
  "Resulting Values: Nominal Current"
  meth: str
  "Installation Conditions: Reference Method"
  phiz1: float
  "Resulting Values: Pos. Seq. Impedance, Angle"
  Unom: float
  "Rated Voltage"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  induct: int
  "Cable in Duct"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  Ice: float
  "Resulting Values: Earth-Fault Current, Ice"
  ciEarthed: int
  "Earthed"
  dryingoutavoid: int
  "Soil drying-out avoided"
  iopt_grp: int
  "Installation Conditions: Grouping:Single Layer on Wall, Floor or Unperforated Tray:Single Layer Fixed Directly under Wooden or Masonry Ceiling"
  rellen: float
  "Topology: Start of Section"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  inAir: int
  "Topology: Laying:Ground:Air"
  desc: list
  "Description"
  X1: float
  "Resulting Values: Pos. Seq. Reactance, X1"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  CCEarProb: float
  "Failures Double Earth Fault: Conditional probability of a second earth fault"
  oid_: int
  "ObjectID"
  iComDate: int
  "Commissioning Date"
  Z1: float
  "Resulting Values: Pos. Seq. Impedance, Z1"
  pRating: object
  "Topology: Thermal Rating"
  appr_status: int
  "Approval Information: Status"
  iopt_laid: int
  "Laid on:Perforated trays:Unperforated trays:Ladders, Supports or Cleats"
  gnrl_modif: int
  "Object modified"
  asys: int
  "Installation Conditions: Clearance :Touching:1x Cable Diameter:d <= 0.125 m:0.125 m < d <= 0.25 m:0.25 m < d <= 0.5 m:0.5 m < d <= 1.0 m"
  ciEnergized: int
  "Energized"
  FOR1: float
  "Failures Line Failures: Forced Outage Rate"
  cmethChrNfc: str
  "Reference Method"
  pOwner: object
  "Owner"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  occupCoeff: float
  "Installation Conditions: Occupation coefficient"
  pTypStoch: object
  "Failures: Type model"
  cvaltyp: int
  "According to Standard"
  meth_nfcmv: str
  "Installation Conditions: Reference Method"
  charact: list
  "Charact."
  iopt_engine: int
  "Installation Conditions: Cables for powering mobile gear with drum winding"
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  Irated: float
  "Type Parameters: Rated Current"
  icond: int
  "Bunched in Air, on Surface, Embedded or Enclosed"
  dataExtUnit: list
  "Unit"
  isoMat: int
  "Type Parameters: Insulation Material:PVC:XLPE/EPR:Mineral:Paper"
  soilThermRes: float
  "Environment Conditions: Soil thermal resistivity"
  cpMeteostat: object
  "Meteo Station"
  index: float
  "Index"
  initypset: int
  "Missing Type"
  armTyp: int
  "Type Parameters: Armour Type:AWA:SWA"
  CCEarRepMu: float
  "Failures Double Earth Fault: Repair duration"
  alpha: float
  "Neher-McGrath: Medium diffusivity"
  meth_nfc: str
  "Installation Conditions: Reference Method"
  cpArea: object
  "Area"
  pOperator: object
  "Operator"
  temp_env: float
  "Environment Conditions: Ambient temperature"
  sernum: str
  "Serial Number"
  cmeth: str
  "Old Reference Method"
  windvelocity: float
  "Neher-McGrath: Wind velocity"
  meth_bs: str
  "Installation Conditions: Reference Method"
  FOE: float
  "Failures Line Failures: Forced Outage Expectancy"
  FOD: float
  "Failures Line Failures: Forced Outage Duration"
  constr: int
  "Year of Construction"
  Top: float
  "Operating Temperature"
  cpSupplyTransformer: object
  "Supplying Transformer"
  npara: int
  "Installation Conditions: Grouped Cables"
  doc_id: object
  "Additional Data"
  cmethChrNfcmv: str
  "Reference Method"
  iopt_dir: str
  "Installation Conditions: Arrangement"
  shMat: int
  "Type Parameters: Sheath Insulation:PVC:XLPE/EPR"
  gnrl_modby: str
  "Object modified by"
  mediumTemp: float
  "Neher-McGrath: Medium mean temperature"
  pid_: int
  "ProjectID"
  C0: float
  "Capacitance C0"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  typ_res: int
  "Index of cable type stored in results vector"
  iopt_ord: str
  "Installation Conditions: Cable Formation"
  cpSite: object
  "Site"
  R1: float
  "Resulting Values: Pos. Seq. Resistance, R1"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  pStoch: object
  "Failures: Element model"
  ducts: int
  "Number of Ducts"
  R0: float
  "Resulting Values: Zero Seq. Resistance, R0"
  dline: float
  "Topology: Length"
  soiltyp: int
  "Environment Conditions: Soil Type:Underwater:Very Moist:Moist:Normal:Dry:Very Dry"
  trays: int
  "Installation Conditions: Number of Trays/Ducts"
  iSpecLoc: int
  "Specific Cable Location"
  root_id: object
  "Original Location"
  trans_ff: float
  "Failures Transient Faults: Transient Fault Frequency"
  loc_name: str
  "Name"
  iperfect: int
  "Failures: Ideal component"
  B1: float
  "Susceptance B1"
  thetaX: float
  "Critical temperature of soil"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def IsCable(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmMdl(Protocol):
  carrayDesc: list
  "Description"
  clockRate: float
  "Sampling options: Sampling rate"
  typ_id: object
  "Type"
  cpOperator: object
  "Operator"
  configScript: object
  "Configuration Script"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  fmuType: int
  "FMU Type"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  arrayObject: list
  "Array/Matrix"
  fmuCsSampling: int
  "Sampling options"
  forceSlowFmuPfmu: int
  "Use as standard FMU/PFMU"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  contents: list
  "Events"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  cattrUnit: list
  "Unit"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  subSampleFactor: int
  "Sub sampling factor"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  cattrDesc: list
  "Description"
  carrayUnit: list
  "Unit"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  charact: list
  "Charact."
  fmuCoSimMethod: int
  "FMU Co-Simulation calculation method"
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  clockSampling: int
  "Sampling options"
  cfmuType: int
  "FMU Type"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  clockPeriod: float
  "Sampling options: Sampling period"
  cpArea: object
  "Area"
  cMin: list
  "Min"
  fmuCsRate: float
  "Sampling options: Sampling Rate"
  iAstabint: int
  "A-stable integration algorithm"
  cpSupplyTransformer: object
  "Supplying Transformer"
  fmuCsPeriod: float
  "Sampling options: Sampling period"
  gnrl_modby: str
  "Object modified by"
  parameterNames: list
  "Parameter Names"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  carrayName: list
  "Name"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  cMax: list
  "Max"
  checksum: list
  "Checksum"
  root_id: object
  "Original Location"
  arrayName: list
  "Parameter"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def ExportToClipboard(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def ExportToFile(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmNec(Protocol):
  Tkr: float
  "Rated Short-Circuit Duration"
  Irze: list
  "Rated Current of Grounding"
  X0: float
  "Zero Sequence Reactance"
  iintgnd: int
  "Neutral Conductor: N-Connection:None:At terminal (ABC-N):Separate terminal"
  fcharRe: object
  "Frequency Dependency Re"
  Curn: float
  "Rated Current (Ie=3*I0)"
  cpOperator: object
  "Operator"
  Ithlim: float
  "Rated Short-Time Thermal Current (3*I0)"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  manuf: str
  "Manufacturer"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  Xe: float
  "Internal Grounding Impedance: Reactance, Xe"
  Unom: float
  "Rated Voltage"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  Re: float
  "Internal Grounding Impedance: Resistance, Re"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  fcharL0: object
  "Frequency Dependency L0"
  ciEarthed: int
  "Earthed"
  cgnd: int
  "Internal Grounding Impedance: Star Point:Connected:Not connected"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  oid_: int
  "ObjectID"
  iComDate: int
  "Commissioning Date"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  pOwner: object
  "Owner"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  bus1n: object
  "Neutral Conductor: Neutral"
  cpeter: int
  "Internal Grounding Impedance: Petersen Coil"
  ignd: int
  "Star Point:&0&grounded:&2&isolated"
  cpArea: object
  "Area"
  pOperator: object
  "Operator"
  sernum: str
  "Serial Number"
  fcharR0: object
  "Frequency Dependency R0"
  bus1: object
  "Terminal"
  constr: int
  "Year of Construction"
  cpSupplyTransformer: object
  "Supplying Transformer"
  doc_id: object
  "Additional Data"
  fcharLe: object
  "Frequency Dependency Le"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  R0: float
  "Zero Sequence Resistance"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmNet(Protocol):
  dpl7: float
  "dpl7"
  dpl1: float
  "dpl1"
  isummary: int
  "flag for summary grid"
  cimRdfId: list
  "RDF ID"
  dat_src: str
  "Data source"
  dpl5: float
  "dpl5"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  icolor: int
  "Colour"
  owner: str
  "Owner"
  cpHeadFold: object
  "Head Folder"
  dpl4: float
  "dpl4"
  spinReserve: float
  "Min. spinning reserve constraint: Spinning reserve"
  desc: list
  "Description"
  fictborder: int
  "Fictitious border grid"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  frnom: float
  "Nominal Frequency"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  isConsSpinReserve: int
  "Min. spinning reserve constraint"
  dpl6: float
  "dpl6"
  dpl10: float
  "dpl10"
  dpl9: float
  "dpl9"
  gnrl_modby: str
  "Object modified by"
  dpl2: float
  "dpl2"
  pDiagram: object
  "Diagram"
  pid_: int
  "ProjectID"
  dpl8: float
  "dpl8"
  InterPset: float
  "Consider Interchange Schedule: Scheduled Active Power Interchange"
  tid_: int
  "TimeID"
  iInterChg: int
  "Consider Interchange Schedule"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  dpl3: float
  "dpl3"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def DefineBoundary(*args):
    ...

  def SetAttribute(*args):
    ...

  def CalculateInterchangeTo(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def Activate(*args):
    ...

  def Deactivate(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def CalculateVoltageLevel(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def CalculateVoltInterVolt(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmPvsys(Protocol):
  Pmin_ucPU: float
  "Active Power Operational Limits: Min."
  IkPFmax: float
  "Steady-state short-circuit current contribution: Maximum current"
  Ikss1PF: float
  "Initial symmetrical short-circuit current contribution: Single-phase faults, Ik1PF"
  fcharx1: object
  "Norton Equivalent: Frequency-Dependence, x1h(f)"
  dpl1: float
  "dpl1"
  Pmax_uc: float
  "Active Power Operational Limits: Max."
  pQlimType: object
  "Reactive Power Operational Limits: Capability Curve"
  allowGenMode: int
  "Separate generation mode"
  iInterPol: int
  "Approximation:Spline:Piecewise linear:Polynomial:Hermite"
  cpOperator: object
  "Operator"
  cimRdfId: list
  "RDF ID"
  isRPR: int
  "Optimisation of reactive power reserve"
  costRedispatchP: float
  "Redispatch costs for active power change"
  iOPFCQmin: int
  "Reactive Power Operational Limits: Min."
  cosini: float
  "Power Factor"
  dpl5: float
  "dpl5"
  chr_name: str
  "Characteristic Name"
  Egh_a: float
  "Global Horizontal Irradiance (act.)"
  appr_modby: str
  "Approval Information: Modified by"
  T1_pllu: float
  "Voltage PLL: Low-Pass Filter Time Constant"
  p_under: float
  "cosphi(P)-Characteristic Underexcited: Active Power"
  pf_under: float
  "cosphi(P)-Characteristic Underexcited: Min. Power Factor"
  minUpTime: float
  "Start-up/shut-down time constraints: Minimum up-time"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  ghi_a: float
  "Global Horizontal Irradiance (act.)"
  P_max: float
  "Active Power: Rating: Max."
  mount: int
  "Orientation and Tilt: Mounting System:Fixed/Stationary:Dual Axis Tracking System:Horizontal Single Axis Tracking System:Vertical Single Axis Tracking System"
  Pcu: float
  "Series reactor: Copper losses"
  iNoShcContr: int
  "No Short-Circuit Contribution"
  Inom: float
  "Nominal Current"
  kt: float
  "Irradiance on the Horizontal Plane: Clearness Index"
  isDiscreteCtrlP: int
  "Restriction to discrete active power values"
  pSubModel: object
  "Submodel"
  Qmin_a: float
  "Qmin(act.)"
  shfdir: float
  "Environment Factors: Shading Factor (Direct)"
  allowConsumMode: int
  "Separate consumption mode"
  dhi_a: float
  "Direct Horizontal Irradiance (act.)"
  nneutral: int
  "Neutral Conductor: N-Connection:None:At terminal (ABC-N):Separate terminal"
  consumCosts: float
  "Consumption mode: Consumption costs"
  appr_modif: int
  "Approval Information: Modified"
  R0hmc: float
  "Norton Equivalent: Resistance, R0h"
  ciDist: int
  "Distance from infeed in number of buses"
  r2: float
  "Negative sequence: Resistance r2"
  cpBranch: object
  "Branch"
  pgini_a: float
  "Actual Operating Point: Active Power (act.)"
  isConsShutDownCost: int
  "Shut-down costs"
  x0: float
  "Zero sequence: Reactance, x0"
  cTypHmc: str
  "Harmonic Source: Type of Harmonic Sources"
  discMethCostOp: int
  "Piecewise linearisation for LP"
  c_pmod: object
  "Model"
  pini: float
  "Active Power"
  limRampDownPU: float
  "Ramp rate constraints: Ramp-down limit"
  Qfu_max: float
  "Q(V)-Characteristic: Q max"
  efficiencyLPgen: float
  "Efficiency: Used efficiency (generation)"
  cIsDiscreteCtrlP: int
  "Restriction to discrete active power values"
  scaleQmax: float
  "Reactive Power Operational Limits: Scaling Factor (max.)"
  efficiencyCurveConsum: object
  "Efficiency: Efficiency curve (consumption)"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  fixedCosts: float
  "Fixed costs"
  pfrecap: int
  "Power Factor Ind/Cap"
  pmaxratf: float
  "Active Power: Rating: Rating Factor"
  vecPowerRedispatchDown: list
  "Redispatch"
  desc: list
  "Description"
  Qfu_min: float
  "Q(V)-Characteristic: Q min"
  Tondelay: float
  "Min. operation voltage: Switch-on delay"
  cUserDefIndex: int
  "User defined Index"
  iOPFCPmax: int
  "Active Power Operational Limits: Max."
  sOpComment: list
  "Operator Comment"
  ktc_a: float
  "Calculated Clearness Index"
  Ik: float
  "Fault Contribution: Steady-State Shc. Current"
  oid_: int
  "ObjectID"
  limRampDown: float
  "Ramp rate constraints: Ramp-down limit"
  icurref: int
  "Harmonic Source: Harmonic currents referred to"
  fcharr2: object
  "Norton Equivalent: Frequency-Dependence, r2h(f)"
  iComDate: int
  "Commissioning Date"
  r1hmc: float
  "Norton Equivalent: Resistance, r1h"
  pStorage: object
  "Storage model"
  r0iec: float
  "Zero sequence short-circuit impedance: Resistance, r0"
  QtargetRPR: float
  "Optimisation of reactive power reserve: Q target value"
  c_pCtrlHV: object
  "Controlled HV-busbar"
  umin: float
  "Min. operation voltage: Switch-off threshold"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  rtox: float
  "Max. Fault Contribution: R to X'' ratio"
  isConstrUpDown: int
  "Start-up/shut-down time constraints"
  qini: float
  "Reactive Power"
  costRedispatchDown: float
  "Additional redispatch costs: Downward active power redispatch costs"
  Ki_plli: float
  "Current PLL: Integration Gain"
  dni: float
  "Irradiance on the Horizontal Plane: Direct Normal Irradiance"
  limRampUpPU: float
  "Ramp rate constraints: Ramp-up limit"
  pOwner: object
  "Owner"
  phiini: float
  "Operating Point Reactive Power/Voltage: Angle"
  dhi: float
  "Irradiance on the Horizontal Plane: Direct Horizontal Irradiance"
  Iks: float
  "Fault Contribution: Transient Short-Circuit Current"
  Kq: float
  "Current controller: Kq: q-Axis, proportional gain"
  pginirnd: float
  "Active Power for Probabilistic Analysis"
  Pnom: float
  "Active Power Operational Limits: Pr(rated)"
  cost_up: float
  "Start-up costs: Warm-start costs"
  ghi: float
  "Irradiance on the Horizontal Plane: Global Horizontal Irradiance"
  iestq: int
  "State Estimation: Estimate Reactive Power"
  dataExtDesc: list
  "Description"
  outServPzero: int
  "Out of service when active power is zero"
  Pmax_ucPU: float
  "Active Power Operational Limits: Max."
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  shcDeadband: int
  "Voltage deadband"
  cpFeed: object
  "Feeder"
  npnum: int
  "Number of: Panels per Inverter"
  mode_inp: str
  "Operating Point Reactive Power/Voltage: Input Mode"
  numBreakpointsCostOp: int
  "Piecewise linearisation for LP: Number of breakpoints"
  dataExtUnit: list
  "Unit"
  cVecDiscreteCtrlPvals: list
  "Valid active power values"
  ip_ctrl: int
  "Reference Machine"
  idisp: int
  "Generator Dispatch"
  cosgini_a: float
  "Actual Operating Point: Power Factor (act.)"
  cpMeteostat: object
  "Meteo Station"
  costColdStart: float
  "Start-up costs: Cold-start costs"
  limRampUp: float
  "Ramp rate constraints: Ramp-up limit"
  bus1n: object
  "Neutral Conductor: Neutral"
  pOperator: object
  "Operator"
  Edpv_a: float
  "Diffuse Irradiance, PV Panel (act.)"
  pf_recap: int
  "Operating Point Reactive Power/Voltage: Power Factor:ind.:cap."
  orient: float
  "Orientation and Tilt: Orientation Angle"
  isVRE: int
  "Generator usage: Generator usage:Single thermal generation unit:Variable renewable energy source (VRE):Coupled with storage model:Part of Virtual Power Plant"
  cpArea: object
  "Area"
  IkPFmin: float
  "Steady-state short-circuit current contribution: Minimum current"
  isMustRunUC: int
  "Additional constraints for controls: Must run"
  R0toR1: float
  "Series reactor: R0/R1 ratio"
  pQPcurve: object
  "Q(P)-Characteristic: Q(P)-Curve"
  iAstabint: int
  "A-stable integration algorithm"
  sgini_a: float
  "Actual Operating Point: Apparent Power (act.)"
  iOPFCQmax: int
  "Reactive Power Operational Limits: Max."
  p_over: float
  "cosphi(P)-Characteristic Overexcited: Active Power"
  bus1: object
  "Terminal"
  usp_min: float
  "Voltage Setpoint Limits: Min. Voltage Setpoint"
  x2hmc: float
  "Norton Equivalent: Reactance, x2h"
  constr: int
  "Year of Construction"
  uk: float
  "Series reactor: Short circuit impedance"
  costShutDown: float
  "Shut-down costs"
  cQ_min: float
  "Reactive Power Operational Limits: Minimum"
  cpSupplyTransformer: object
  "Supplying Transformer"
  genShiftKey: float
  "Generation shift key"
  tds: float
  "Time Constants: Td'"
  tilt: float
  "Orientation and Tilt: Tilt Angle"
  doc_id: object
  "Additional Data"
  udeadblow: float
  "Q(V)-Characteristic Voltage Dead Band: Lower Voltage Limit"
  iopt_dir: int
  "Irradiance on the Horizontal Plane: Direct Irradiance Data:Hourly Data, Horizontal (DHI):Hourly Data, Normal (DNI)"
  iestp: int
  "State Estimation: Estimate Active Power"
  uDeadband: float
  "Voltage deadband: Deadband"
  fcharx2: object
  "Norton Equivalent: Frequency-Dependence, x2h(f)"
  scaleQmin: float
  "Reactive Power Operational Limits: Scaling Factor (min.)"
  fcharx0: object
  "Norton Equivalent: Frequency-dependence, x0h(f)"
  vecStartUpCosts: list
  "Start-up costs: Start-up costs"
  pid_: int
  "ProjectID"
  dispatch: int
  "Generator Dispatch"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  penaltyCosts: float
  "Penalty costs"
  usp_max: float
  "Voltage Setpoint Limits: Max. Voltage Setpoint"
  Td: float
  "Current controller: Td: d-Axis, integration time constant"
  isCtrlPplacement: int
  "Optimise active power"
  cpSite: object
  "Site"
  Tamb: float
  "Environment Factors: Ambient Temperature"
  cpSubstat: object
  "Substation"
  pStoch: object
  "Stochastic model"
  cpGrid: object
  "Grid"
  c_psecc: object
  "External Secondary Controller"
  iopt_glo: int
  "Irradiance on the Horizontal Plane: Global Irradiance Data:Adnot-Bourges et.al. Model:Kasten-Czeplak Model:Robledo-Soler Model:Haurwitz Model:Berges-Duffie Model:Hourly Clearness Index:Hourly Data (GHI)"
  scale0: float
  "Operating Point: Scaling Factor"
  bustp: str
  "Corresponding Bus Type:"
  dsecres: float
  "Reserve"
  pf_over: float
  "cosphi(P)-Characteristic Overexcited: Min. Power Factor"
  phmc: object
  "Harmonic Source: Harmonic Currents"
  qdslCtrl: object
  "Quasi-Dynamic Model"
  av_mode: str
  "Local Controller"
  Qmax_a: float
  "Qmax(act.)"
  aCategory: str
  "Plant Category"
  Pngrel: float
  "Stochastic Model for Generation: Based on rated active power (Pr)"
  kt_a: float
  "Clearness Index (act.)"
  cQ_max: float
  "Reactive Power Operational Limits: Maximum"
  polyDegree: int
  "Polynomial degree"
  fold_id: object
  "In Folder"
  dpl3: float
  "dpl3"
  anginc_a: float
  "Angle of Incidence (act.)"
  minDownTime: float
  "Start-up/shut-down time constraints: Minimum down-time"
  Irze: list
  "Rated Current of Grounding"
  x0hmc: float
  "Norton Equivalent: Reactance, x0h"
  iSimModel: int
  "Model:According to connected input signals:Current source:Voltage source:Constant impedance:Constant power"
  Ebpv_a: float
  "Direct Irradiance, PV Panel (act.)"
  shfdir_a: float
  "Shading Factor (Dir.) (act.)"
  Ebh_a: float
  "Direct Horizontal Irradiance (act.)"
  Ikss: float
  "Max. Fault Contribution: Subtransient Short-Circuit Current"
  typ_id: object
  "Type"
  costRedispatchUp: float
  "Additional redispatch costs: Upward active power redispatch costs"
  vecStartUpTimes: list
  "Start-up costs: Down-time"
  iconfed: int
  "Static Converter-Fed Drive"
  dat_src: str
  "Data source"
  Ikss3PF: float
  "Initial symmetrical short-circuit current contribution: Three-phase faults, Ik3PF"
  limRampStartUpPU: float
  "Ramp rate constraints: Start-up ramp limit"
  fcharr0: object
  "Norton Equivalent: Frequency-dependence, r0h(f)"
  shfdiff_a: float
  "Shading Factor (Diff.) (act.)"
  T1_plli: float
  "Current PLL: Low-Pass Filter Time Constant"
  qinput: int
  "Interpretation of input signals: Reactive Power signal:in kvar:in p.u. based on Snom:in p.u. based on Pnom:as cos(phi)"
  pgini: float
  "Operating Point Active Power: Active Power"
  isCtrlFixedToLdfVal: int
  "Additional constraints for controls: Fix controls to Load Flow values"
  Kfactor: float
  "Fault Contribution: K Factor"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  Pmax_a: float
  "Pmax(act.)"
  availFactor: float
  "Availability Factor"
  limRampStartUp: float
  "Ramp rate constraints: Start-up ramp limit"
  Tdelay: float
  "Current source model: Delay time constant"
  isConsCostsRedispatch: int
  "Additional redispatch costs"
  r2shc: float
  "Negative sequence short-circuit impedance: Resistance, r2"
  shfdiff: float
  "Environment Factors: Shading Factor (Diffuse)"
  pFlicker: object
  "Flicker Coefficients"
  PmaxInvPU: float
  "Separate consumption mode: Max."
  xtor: float
  "Max. Fault Contribution: X'' to R ratio"
  cCategory: str
  "Plant Category"
  coldStartTime: float
  "Start-up costs: Cold-start time"
  iopt_rad: int
  "Irradiance on the Horizontal Plane: Specified Components:Global + Direct:Global + Diffuse:Direct + Diffuse"
  cStorage: object
  "Generator usage: Storage model"
  nphase: int
  "No. of Phases"
  R1hmc: float
  "Norton Equivalent: Resistance, R1h"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  costRedispatchQ: float
  "Redispatch costs for reactive power change"
  Erpv_a: float
  "Reflected Irradiance, PV Panel (act.)"
  PminInv: float
  "Separate consumption mode: Min."
  tdss: float
  "Time Constants: Td''"
  for_name: str
  "Foreign Key"
  vecCostRedispatchDown: list
  "Costs"
  Edh_a: float
  "Diffuse Horizontal Irradiance (act.)"
  x2: float
  "Negative sequence: Reactance x2"
  cosgini: float
  "Operating Point Reactive Power/Voltage: Power Factor"
  fcharr1: object
  "Norton Equivalent: Frequency-Dependence, r1h(f)"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  Egpv_a: float
  "Global Irradiance, PV Panel (act.)"
  dpl4: float
  "dpl4"
  timezone: str
  "System Geographical Location: Time Zone (Offset)"
  Skss: float
  "Max. Fault Contribution: Subtransient Short-Circuit Level"
  isConsStartUpCost: int
  "Start-up costs"
  ciEarthed: int
  "Earthed"
  isLimQmax: int
  "Reactive Power Operational Limits: Max."
  pOpCostCurve: object
  "Operating costs: Generator cost curve"
  outserv: int
  "Out of Service"
  pBMU: object
  "Virtual Power Plant"
  r2iec: float
  "Negative sequence short-circuit impedance: Resistance, r2"
  PminInvPU: float
  "Separate consumption mode: Min."
  cfixedCosts: float
  "Consumption mode: Fixed costs"
  Pmin_a: float
  "Pmin(act.)"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  r2hmc: float
  "Norton Equivalent: Resistance, r2h"
  avgCostsUc: float
  "Piecewise linearisation for LP: Average costs"
  iSchemeStatus: int
  "Scheme Status"
  X2hmc: float
  "Norton Equivalent: Reactance, X2h"
  albedo: float
  "Environment Factors: Ground Albedo"
  ddroop: float
  "Voltage Droop: Droop"
  qgini: float
  "Operating Point Reactive Power/Voltage: Reactive Power"
  iUseZsr: int
  "Negative sequence: Use series reactor impedance, if negative sequence voltage signals are connected"
  phtech: int
  "Technology:3PH:3PH-E:1PH PH-E:1PH PH-N:1PH PH-PH"
  isLimPmax: int
  "Active Power Operational Limits: Max."
  c_pstac: object
  "External Station Controller"
  appr_status: int
  "Approval Information: Status"
  Tamb_a: float
  "Amb. Temp. (act.)"
  iOPFCPmin: int
  "Active Power Operational Limits: Min."
  isPcurrAllowed: int
  "Restriction to discrete active power values: Allow current active power value"
  smoothfac: float
  "Smoothing factor"
  iUseNegSeqAngle: int
  "Negative sequence: Current source model: Use negative sequence angle for negative sequence current source"
  ictqg: int
  "Controls: Reactive Power"
  x2shc: float
  "Negative sequence short-circuit impedance: Reactance, x2"
  imax: float
  "Fault Contribution: Max. Current"
  cosn: float
  "Ratings: Rated Power Factor"
  iShcModel: int
  "Short-Circuit Model:&0&Equivalent synchronous machine:&1&Dynamic voltage support:&3&Full size converter"
  pblocktrf: object
  "Externally modelled unit transformer: Unit transformer"
  psutype: str
  "Power station unit type"
  dni_a: float
  "Direct Normal Irradiance (act.)"
  isCtrlQ: int
  "Controls: Reactive power"
  iearthed: int
  "Earthed"
  ddroopue: float
  "Q(V)-Characteristic: Droop (underexcited)"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  Kp_pllu: float
  "Voltage PLL: Proportional Gain"
  cpZone: object
  "Zone"
  EDS: float
  "Stochastic Model for Generation: Expectancy of derated states"
  isLimQmin: int
  "Reactive Power Operational Limits: Min."
  cpower: list
  "Power"
  charact: list
  "Charact."
  efficiencyCurveGen: object
  "Efficiency: Efficiency curve (generation)"
  limRampShutDownPU: float
  "Ramp rate constraints: Shut-down ramp limit"
  ddroopoe: float
  "Q(V)-Characteristic: Droop (overexcited)"
  cGPSlat: float
  "System Geographical Location: Latitude"
  iv_mode: int
  "Local Controller"
  tilt_a: float
  "Tilt Angle (act.)"
  Irated: float
  "Harmonic Source: Rated Current"
  Sk: float
  "Fault Contribution: Steady-State Short-Circuit Level"
  QtargetBase: int
  "Optimisation of reactive power reserve: Base:Reactive power limits:Rated apparent power"
  efficiencyLPconsum: float
  "Efficiency: Used efficiency (consumption)"
  ngnum: int
  "Number of: Parallel Inverters"
  vecDiscreteCtrlPvals: list
  "Restriction to discrete active power values: Valid active power values"
  solalt_a: float
  "Solar Altitude Angle (act.)"
  orient_a: float
  "Orientation Angle (act.)"
  X0toX1: float
  "Series reactor: X0/X1 ratio"
  isLimPmin: int
  "Active Power Operational Limits: Min."
  isConstrRamp: int
  "Ramp rate constraints"
  R2hmc: float
  "Norton Equivalent: Resistance, R2h"
  is4SpinReserve: int
  "Consider for region spinning reserve"
  q_min: float
  "Reactive Power Operational Limits: Min."
  Ki_pllu: float
  "Voltage PLL: Integration Gain"
  inveff: float
  "Inverter: Efficiency Factor"
  scale0_a: float
  "Actual Operating Point: Scaling Factor(act.)"
  pf_recap_a: str
  "Actual Operating Point: Power Factor Ind/Cap (act.)"
  sernum: str
  "Serial Number"
  iopt_tdr: int
  "Q(V)-Characteristic: Different droop values"
  Kpf: float
  "Operating Point Active Power: Prim. Frequency Bias"
  PmaxInv: float
  "Separate consumption mode: Max."
  FOE: float
  "Stochastic Model for Generation: Forced Outage Expectancy"
  Sks: float
  "Fault Contribution: Transient Short-Circuit Level"
  costCurtailment: float
  "Costs for curtailment"
  X0hmc: float
  "Norton Equivalent: Reactance, X0h"
  sgn: float
  "Ratings: Rated Apparent Power"
  Ikss2PF: float
  "Initial symmetrical short-circuit current contribution: Two-phase faults, Ik2PF"
  limRampShutDown: float
  "Ramp rate constraints: Shut-down ramp limit"
  albedo_a: float
  "Albedo (act.)"
  Kd: float
  "Current controller: Kd: d-Axis, proportional gain"
  r0: float
  "Zero sequence: Resistance, r0"
  isConsCostOp: int
  "Operating costs"
  FAY: float
  "Stochastic Model for Generation: Full Availability Expectancy"
  X1hmc: float
  "Norton Equivalent: Reactance, X1h"
  mode_pgi: int
  "Model:Active Power Input:Solar Calculation"
  RelEff_a: float
  "Relative Efficiency (act.)"
  isCtrlP: int
  "Controls: Active power"
  cGPSlon: float
  "System Geographical Location: Longitude"
  fixed: int
  "Must run"
  vecPowerRedispatchUp: list
  "Redispatch"
  gnrl_modby: str
  "Object modified by"
  dpl2: float
  "dpl2"
  iDelay: int
  "Current source model: dq-reference angle delay (if dq-reference signals not connected)"
  q_max: float
  "Reactive Power Operational Limits: Max."
  ciLater: int
  "Lateral Index"
  priority: int
  "Merit Order"
  r0hmc: float
  "Norton Equivalent: Resistance, r0h"
  avgCosts: float
  "Average costs"
  x0iec: float
  "Zero sequence short-circuit impedance: Reactance, x0"
  tid_: int
  "TimeID"
  x2iec: float
  "Negative sequence short-circuit impedance: Reactance, x2"
  cIsMustRunUC: int
  "Additional constraints for controls: Must run"
  ictpg: int
  "Controls: Active Power"
  usetp: float
  "Operating Point Reactive Power/Voltage: Voltage"
  x1hmc: float
  "Norton Equivalent: Reactance, x1h"
  root_id: object
  "Original Location"
  cIsPcurrAllowed: int
  "Allow current active power value"
  udeadbup: float
  "Q(V)-Characteristic Voltage Dead Band: Upper Voltage Limit"
  uonthr: float
  "Min. operation voltage: Switch-on threshold"
  pGRStoch: object
  "Stochastic Model for Generation: Stochastic Model"
  qgini_a: float
  "Actual Operating Point: Reactive Power (act.)"
  Kp_plli: float
  "Current PLL: Proportional Gain"
  iopt_dif: int
  "Irradiance on the Horizontal Plane: Diffuse Irradiance Data:Louche et.al. Model:Spencer Model:Erbs Model:Lam-Li Model:Reindl et.al. Model:Orgill-Holands Model:Liu-Jordan Model:Bougler Model"
  Pmin_uc: float
  "Active Power Operational Limits: Min."
  ccost: list
  "Costs"
  loc_name: str
  "Name"
  pinput: int
  "Interpretation of input signals: Active Power signal:in kW:in p.u. based on Snom:in p.u. based on Pnom"
  searchBlockTrf: int
  "Externally modelled unit transformer"
  vecBreakpointsP: list
  "Piecewise linearisation for LP: Power"
  vecCostRedispatchUp: list
  "Costs"
  Tq: float
  "Current controller: Tq: q-Axis, integration time constant"


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def ResetDerating(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def GetAvailableGenPower(*args):
    ...

  def Delete(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetInom(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def Reconnect(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def Derate(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def Disconnect(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetParent(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def CalcEfficiency(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsConnected(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmRelay(Protocol):
  efaultmaxi: float
  "Fault current limits: Max. earth fault current"
  pdiselm: list
  "Net Elements"
  td_bRC: float
  "Measured Resistance"
  cat_freq: int
  "Frequency"
  td_ftrip: float
  "Tripping Time (Step)"
  typ_id: object
  "Relay Type"
  cvtprim: float
  "Current/Voltage Transformer Settings: VT Primary"
  sw_settingsGroups: list
  "Active settings groups in StationWare"
  cpOperator: object
  "Operator"
  td_blim: int
  "End of Path"
  td_btpbk: float
  "Tripping + Breaker Time (Step)"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  td_bX: float
  "Reactance"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  cat_volt: int
  "Voltage"
  pelm: list
  "Net Elements"
  td_fpos: float
  "Position"
  cbranch: object
  "Location: Branch"
  vtprim: float
  "VT Primary"
  td_bphiC: float
  "Measured Angle"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  ccub: object
  "Cubicle"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  vtsec: float
  "VT Secondary"
  ciDist: int
  "Distance from infeed in number of buses"
  phfaultmini: float
  "Fault current limits: Min. phase fault current"
  cpBranch: object
  "Branch"
  application: int
  "Application:Main Protection:Backup Protection"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  td_ftpbk: float
  "Tripping + Breaker Time (Step)"
  dev_no: int
  "Device Number"
  ccat_diff: int
  "Considered for protection coordination: Differential"
  ciEarthed: int
  "Earthed"
  td_bpos: float
  "Position"
  outserv: int
  "Out of Service"
  cat_diff: int
  "Differential"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  ctsec: float
  "CT Secondary"
  desc: list
  "Description"
  efaultmini: float
  "Fault current limits: Min. earth fault current"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  td_bR: float
  "Resistance"
  td_fobj: object
  "Step"
  cctprim: float
  "Current/Voltage Transformer Settings: CT Primary"
  ccategory: str
  "Main function:"
  cat_curr: int
  "Overcurrent"
  cat_dist: int
  "Distance"
  oid_: int
  "ObjectID"
  td_fphiC: float
  "Measured Angle"
  iComDate: int
  "Commissioning Date"
  appr_status: int
  "Approval Information: Status"
  td_fX: float
  "Reactance"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  actset: int
  "Active Settings Group"
  cpCt: object
  "Current Transformer"
  td_fXC: float
  "Measured Reactance"
  ctprim: float
  "CT Primary"
  td_fRC: float
  "Measured Resistance"
  pOwner: object
  "Owner"
  cat_dir: int
  "Directional"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  cpShc: object
  "Fault current limits: Short-circuit command"
  phfaultmaxi: float
  "Fault current limits: Max. phase fault current"
  charact: list
  "Charact."
  ccat_curr: int
  "Considered for protection coordination: Overcurrent"
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  dataExtUnit: list
  "Unit"
  ccat_volt: int
  "Considered for protection coordination: Voltage"
  ccat_dir: int
  "Considered for protection coordination: Directional"
  ccat_dist: int
  "Considered for protection coordination: Distance"
  cpMeteostat: object
  "Meteo Station"
  cn_bus: object
  "Location: Busbar"
  td_fR: float
  "Resistance"
  pOperator: object
  "Operator"
  cpArea: object
  "Area"
  td_fphi: float
  "Angle"
  cvtsec: float
  "Current/Voltage Transformer Settings: VT Secondary"
  zratio: float
  "Impedance Ratio"
  sernum: str
  "Serial Number"
  td_bZ: float
  "Impedance"
  td_cnt: int
  "Number of tripped Steps"
  constr: int
  "Year of Construction"
  td_flim: int
  "End of Path"
  cpSupplyTransformer: object
  "Supplying Transformer"
  doc_id: object
  "Additional Data"
  td_btrip: float
  "Tripping Time (Step)"
  cpVt: object
  "Voltage Transformer"
  isSubRelay: int
  "Sub-relay"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  ccat_freq: int
  "Considered for protection coordination: Frequency"
  cctsec: float
  "Current/Voltage Transformer Settings: CT Secondary"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  td_bphi: float
  "Angle"
  cbranchid: int
  "Cubicle index of connected branch"
  root_id: object
  "Original Location"
  td_fZ: float
  "Impedance"
  loc_name: str
  "Name"
  td_bXC: float
  "Measured Reactance"
  pReference: object
  "Location: Reference"
  td_bZC: float
  "Measured Impedance"
  td_fZC: float
  "Measured Impedance"
  td_bobj: object
  "Step"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def SetTime(*args):
    ...

  def SlotUpdate(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetMaxFdetectCalcI(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def SetMaxI(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetImpedance(*args):
    ...

  def SetMaxIearth(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def CheckRanges(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsStarted(*args):
    ...

  def SetMinI(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def SetMinIearth(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSlot(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def SetOutOfService(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def CalculateMaxFaultCurrents(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetCalcRX(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetFullName(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def slotupd(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmRes(Protocol):
  host_meth: int
  "Method:&0&DER Capacity:&1&Spare Load Capacity"
  calTpStoLdfMethod: int
  "Load Flow method"
  calTpSub: int
  "Method:&0&AC Load Flow:&1&DC Load Flow"
  cnumEigen: int
  "Info: Number of eigenvalues:"
  monitorStep: float
  "Sample period"
  cAutoBMW: int
  "Automatically created of Boundary"
  calTpSto: int
  "Method:Monte Carlo:Quasi-Monte Carlo"
  pObjs: list
  "Used objects"
  calTpCoord: int
  "Usage:Coordination:Audit:Distance Settings:Topology:Overcurrent Settings:Load Flow:Short-Circuit"
  cnumFrq: int
  "Info: Number of frequencies:"
  calTpStoSimMethod: int
  "Simulation type"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  cnumcont: int
  "Info: Number of contingencies:"
  cFFTstep: str
  "Info: Step size:"
  csteps: str
  "Info: Average step size:"
  pXObjs: list
  "Extra objects"
  cContingency: object
  "Contingency"
  trg_post: float
  "Trigger-Times: Post-"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  cStudyBus: object
  "Study Bus"
  cpHeadFold: object
  "Head Folder"
  cHeaderSize: int
  "Header size"
  monitorFreq: float
  "Frequency"
  cases: list
  "Cases"
  cnumrow: int
  "Info: Number of rows:"
  trg_pre: float
  "Trigger-Times: Pre-"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  pResElm: object
  "Fault location"
  ctimeph: int
  "Info: Number of time phases:"
  oid_: int
  "ObjectID"
  cOpScenNum: int
  "Info: Number of operation scenarios:"
  cnttime: int
  "Info: Study time"
  calTpStoCom: int
  "Command:Load Flow:Optimal Power Flow:Dynamic Simulation"
  gnrl_modif: int
  "Object modified"
  rew: int
  "Rewrite every"
  df_meth: int
  "Method:&0&PTDF (ComPtdf):&1&Sensitivities:&2&LODF:&3&Sensitivities (Cnt.)"
  calTp: int
  "Default for"
  calTpFlowDecomp: int
  "Method:Decomposition:Power exchange analysis"
  calTpSwp: int
  "Method:AC Load Flow, balanced:AC Load Flow, unbalanced:DC Load Flow (linear)"
  f_pcl: str
  "Protocol file Id"
  cab_meth: int
  "Method:&0&International Standard:&1&Cable Reinforcement:&2&Ampacity Calculation"
  charact: list
  "Charact."
  keyDouble1: float
  "Linked double value 1"
  usedfor: str
  "Saving time"
  dataExtDesc: list
  "Description"
  cActivePower: float
  "Active Power"
  cAllRegNum: int
  "Info: Number of transactions:"
  unit: str
  "Info: Unit"
  dataExtUnit: list
  "Unit"
  cnumfiles: int
  "Info: Number of result files"
  cFlowNum: int
  "Info: Number of flowgates:"
  cnumCase: int
  "Info: Number of cases:"
  upd: int
  "Create new file every"
  header: list
  "Headlines"
  cFilename: str
  "File name"
  pResElm2: object
  "Linked element 2"
  ctotrow: int
  "Info: Total number of rows:"
  TpTetris: int
  "Faulted phases:"
  calTpTop: int
  "Usage:&0&Before Optimisation:&1&After Optimisation"
  trg_pmax: float
  "Trigger-Times: Max."
  cnumHmOd: int
  "Info: Number of Harmonic Orders:"
  powpark_sub: int
  "Sub-result:&0&Losses Analysis:&1&Losses Curves:&2&Samples/Time Points:&3&Energy Yield"
  FileType: str
  "File type"
  avgStep: float
  "Info: Average step size:"
  calTpHrmMethod: int
  "Load Flow method"
  calTpStoOpfMethod: int
  "Optimisation method"
  gnrl_modby: str
  "Object modified by"
  cvars: int
  "Info: Number of variables:"
  pid_: int
  "ProjectID"
  fileSize: int
  "File size:"
  powpark_meth: int
  "Method:&0&Basic Analysis:&1&Time-series Analysis:&2&Probabilistic Analysis"
  tid_: int
  "TimeID"
  ctricnt: int
  "Info: Points of time:"
  root_id: object
  "Original Location"
  cOrigCurve: object
  "Analysed curve"
  keyDouble: float
  "Linked double value"
  cnumFFT: int
  "Info: Number of harmonic orders:"
  cPosStep: str
  "Info: Average position step size:"
  loc_name: str
  "Name"
  cFnom: float
  "Nominal Frequency"
  cLdfMethod: str
  "Load Flow method:"
  f_name: str
  "Database Id"
  fold_id: object
  "In Folder"
  keyType: int
  "Type of the key for sub-result file"


  def GetContents(*args):
    ...

  def GetRelCase(*args):
    ...

  def GetChildren(*args):
    ...

  def FindColumn(*args):
    ...

  def Write(*args):
    ...

  def GetFirstValidVariable(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetVariable(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def ExecuteLoadingCommand(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def FindMaxOfVariableInRow(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetSubElmRes(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetObj(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Load(*args):
    ...

  def Clear(*args):
    ...

  def Init(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def Flush(*args):
    ...

  def SortAccordingToColumn(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def FinishWriting(*args):
    ...

  def FindMinOfVariableInRow(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def GetValue(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def FindMaxInColumn(*args):
    ...

  def GetObject(*args):
    ...

  def IsEarthed(*args):
    ...

  def GetNumberOfRows(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def Release(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def GetFirstValidObjectVariable(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetNextValidVariable(*args):
    ...

  def Delete(*args):
    ...

  def SetSubElmResKey(*args):
    ...

  def GetNextValidObjectVariable(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def GetColumnValues(*args):
    ...

  def GetObjectValue(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetFirstValidObject(*args):
    ...

  def FindMinInColumn(*args):
    ...

  def SetAsDefault(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetUnit(*args):
    ...

  def InitialiseWriting(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetDescription(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AddVars(*args):
    ...

  def AttributeType(*args):
    ...

  def GetNumberOfColumns(*args):
    ...

  def GetClassName(*args):
    ...

  def AddVariable(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def WriteDraw(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def Close(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetObj(*args):
    ...

  def GetNextValidObject(*args):
    ...



class ElmShnt(Protocol):
  cPsiresC: float
  "Residual flux: Residual flux, ph. C"
  harmPgeRp: float
  "Frequency Dependence of Parallel Resistance: Parallel Resistance"
  cTapLev: int
  "Tap Position for Load Level"
  iintgnd: int
  "Neutral Conductor: N-Connection:None:At terminal (ABC-N):Separate terminal"
  ushnm: float
  "Rated Voltage"
  iInterPol: int
  "Interpolation:spline:piecewise linear"
  c2: float
  "Layout Parameter (per Step): Capacitance C2"
  ccap: float
  "Layout Parameter (per Step): Capacitance"
  cpOperator: object
  "Operator"
  cimRdfId: list
  "RDF ID"
  i_opt: int
  "Controls: Use Controller for OPF optimisation"
  mTaps: list
  "Tap: Measurement Report"
  chr_name: str
  "Characteristic Name"
  PsiresB: float
  "Residual flux: Residual flux, ph. B"
  appr_modby: str
  "Approval Information: Modified by"
  tandc: float
  "Design Parameter (per Step): Loss Factor, tan(delta)"
  manuf: str
  "Manufacturer"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  Xe: float
  "Internal Grounding Impedance: Reactance, Xe"
  iZeConfig: int
  "Internal Grounding Impedance: Configuration:Per step:Common"
  imldc: str
  "Control Mode"
  pf_recap_mx: int
  "Power Factor:ind.:cap."
  cFrolich: float
  "Frolich equation coefficient c"
  usetp_mx: float
  "Upper Voltage Limit"
  harmPgeR: float
  "Frequency Dependence of R-L Element: Resistance"
  appr_modif: int
  "Approval Information: Modified"
  iIntTapCtrl: int
  "Use Integrated Tap Controller"
  uset_mode: int
  "Setpoint:local:bus target voltage"
  iResFlux: int
  "Residual flux"
  psi0: float
  "Knee Flux"
  ciDist: int
  "Distance from infeed in number of buses"
  cknee: float
  "Knee Current"
  cpBranch: object
  "Branch"
  isCtrlShnt: int
  "Tap Control for Unit Commitment"
  systp: int
  "System Type:AC:DC:AC/BI"
  fcharL0: object
  "Frequency Dependence of R-L Element: L0(f)"
  usetp_mn: float
  "Lower Voltage Limit"
  cgnd: int
  "Internal Grounding Impedance: Star Point:Connected:Not connected"
  harmPgeC2: float
  "Frequency Dependence of Capacitor: Capacitance 2"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  desc: list
  "Description"
  fcharC0: object
  "Frequency Dependence of Capacitor: C0(f)"
  cUserDefIndex: int
  "User defined Index"
  sOpComment: list
  "Operator Comment"
  CCEarProb: float
  "Failures Double Earth Fault: Conditional probability of a second earth fault"
  oid_: int
  "ObjectID"
  pfsetp_mn: float
  "Lower Power Factor Limit"
  iComDate: int
  "Commissioning Date"
  cPhInfo: str
  "Phases:"
  gnrl_modif: int
  "Object modified"
  satcur: list
  "Current (peak)"
  ciEnergized: int
  "Energized"
  pOwner: object
  "Owner"
  fcharL: object
  "Frequency Dependence of R-L Element: L(f)"
  dataExtDesc: list
  "Description"
  fcharC2: object
  "Frequency Dependence of Capacitor: C2(f)"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  rpara: float
  "Layout Parameter (per Step): Parallel Resistance"
  mode_inp: str
  "Input Mode"
  iTaps: int
  "According to Measurement Report"
  c_pctrl: object
  "Shunt Controller"
  dataExtUnit: list
  "Unit"
  PsiresC: float
  "Residual flux: Residual flux, ph. C"
  ctech: int
  "Technology"
  i_cont: int
  "Tap Changer:discrete:continuous"
  cpMeteostat: object
  "Meteo Station"
  bus1n: object
  "Neutral Conductor: Neutral"
  CCEarRepMu: float
  "Failures Double Earth Fault: Repair duration"
  ignd: int
  "Star Point:grounded:compensated:isolated"
  pOperator: object
  "Operator"
  cpArea: object
  "Area"
  R0toR1: float
  "Zero sequence impedance: R0/R1 ratio"
  gparac: float
  "Layout Parameter (per Step): Parallel Conductance"
  bus1: object
  "Terminal"
  constr: int
  "Year of Construction"
  cpSupplyTransformer: object
  "Supplying Transformer"
  cutot: float
  "Design Parameter (per Step): Rated Current, L-C"
  doc_id: object
  "Additional Data"
  fcharC: object
  "Frequency Dependence of Capacitor: C(f)"
  p_cub: object
  "Q Controlled at"
  cpCtrlNode: object
  "Target Node"
  pid_: int
  "ProjectID"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  ncapx: int
  "Controller: Max. No. of Steps"
  penaltyCosts: float
  "Controls: Penalty costs per tap deviation"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  pStoch: object
  "Failures: Element model"
  qtotn: float
  "Design Parameter (per Step): Rated Reactive Power, L-C"
  rrea: float
  "Layout Parameter (per Step): Resistance"
  ksat: int
  "Saturation Exponent"
  qdslCtrl: object
  "Quasi-Dynamic Model"
  grea: float
  "Design Parameter (per Step): Quality Factor (at fn)"
  fres: float
  "Design Parameter (per Step): Resonant Frequency"
  pgrad: float
  "Design Parameter (per Step): Degree"
  qcapn: float
  "Design Parameter (per Step): Rated Reactive Power, C"
  xrea: float
  "Layout Parameter (per Step): Reactance"
  fold_id: object
  "In Folder"
  Irze: list
  "Rated Current of Grounding"
  Kctrl: float
  "Controller Sensitivity dq/dv"
  ncapa: int
  "Controller: Act.No. of Step"
  bFrolich: float
  "Frolich equation coefficient b"
  xmair: float
  "Saturated Reactance"
  i_optCont: int
  "Controls: Control Mode:discrete:continuous"
  CCEarFr: float
  "Failures Double Earth Fault: Frequency of single earth faults"
  Lwidth: float
  "Hysteresis: Loop width"
  fcharRp: object
  "Frequency Dependence of Parallel Resistance: Rp(f)"
  dat_src: str
  "Data source"
  greaf0: float
  "Design Parameter (per Step): Quality Factor (at fr)"
  harmPgeC1: float
  "Frequency Dependence of Capacitor: Capacitance 1"
  ilcph: int
  "Phase:a:b:c:a-b:b-c:c-a:Pos.Seq."
  Qmax: float
  "Controller: Max. Rated Reactive Power"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  itrmt: int
  "Type"
  iQorient: int
  "Orientation:+Q:-Q"
  availFactor: float
  "Availability Factor"
  satcue: list
  "Current (RMS)"
  satvol: list
  "Voltage (RMS)"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  nshph: int
  "Phases:1:2:3"
  for_name: str
  "Foreign Key"
  Re: float
  "Internal Grounding Impedance: Resistance, Re"
  harmPgeC0: float
  "Frequency Dependence of Capacitor: Zero-sequence Cap."
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  mseFrolich: float
  "Frolich equation, mean squared error"
  qsetp_mn: float
  "Lower Reactive Power Limit"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  iSchemeStatus: int
  "Scheme Status"
  phtech: int
  "Technology"
  pfsetp_mx: float
  "Upper Power Factor Limit"
  appr_status: int
  "Approval Information: Status"
  smoothfac: float
  "Smoothing Factor"
  Bg: float
  "Terminal to Ground Capacitance (per Step): Susceptance to Ground"
  isCtrlShntCont: int
  "Tap Control for Unit Commitment: Control Mode:discrete:continuous"
  rlrea: float
  "Layout Parameter (per Step): Inductance"
  Tctrl: float
  "Controller Time Constant"
  FOR1: float
  "Failures: Forced Outage Rate"
  iLimb: int
  "Core:&3&3 Limb:&5&5 Limb"
  acost: float
  "Annual Cost"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  aFrolich: float
  "Frolich equation coefficient a"
  Qact: float
  "Controller: Actual Reactive Power"
  B0toB1: float
  "Zero sequence admittance: B0/B1 ratio"
  G0toG1: float
  "Zero sequence admittance: G0/G1 ratio"
  harmPgeR0: float
  "Frequency Dependence of R-L Element: Zero-sequence Res."
  cConBus: object
  "Connected terminal"
  charact: list
  "Charact."
  fcharR: object
  "Frequency Dependence of R-L Element: Rs(f)"
  cucap: float
  "Design Parameter (per Step): Rated Current, C"
  iFit: int
  "Data fitting:Piecewise linear:Frolich:Modified Frolich"
  curea: float
  "Design Parameter (per Step): Rated Current, L"
  iFinalSlope: int
  "Set final slope (peak values)"
  xsatFrolich: float
  "Frolich equation saturated reactance (p.u.)"
  iswitch: int
  "Switchable"
  X0toX1: float
  "Zero sequence impedance: X0/X1 ratio"
  p_rem: object
  "Controlled Node"
  sernum: str
  "Serial Number"
  fcharR0: object
  "Frequency Dependence of R-L Element: Rs0(f)"
  FOE: float
  "Failures: Forced Outage Expectancy"
  FOD: float
  "Failures: Forced Outage Duration"
  capsa: str
  "Vector Group:Y:D:YN"
  harmPgeL0: float
  "Frequency Dependence of R-L Element: Zero-sequence Ind."
  c1: float
  "Layout Parameter (per Step): Capacitance C1"
  satflux: list
  "Flux (peak)"
  gnrl_modby: str
  "Object modified by"
  bcap: float
  "Layout Parameter (per Step): Susceptance"
  ciLater: int
  "Lateral Index"
  nres: float
  "Design Parameter (per Step): Tuning Order"
  harmPgeL: float
  "Frequency Dependence of R-L Element: Inductance"
  i_rem: int
  "Remote Control"
  PsiresA: float
  "Residual flux: Residual flux, ph. A"
  iHyster: int
  "Hysteresis: Model:None:History Independent"
  tid_: int
  "TimeID"
  xreapu: float
  "Linear Reactance"
  root_id: object
  "Original Location"
  qrean: float
  "Design Parameter (per Step): Rated Reactive Power, L"
  loc_name: str
  "Name"
  iperfect: int
  "Failures: Ideal component"
  qsetp_mx: float
  "Upper Reactive Power Limit"
  cNamLev: str
  "Name of Load Level"
  cNumLev: int
  "Number of Load Levels"
  harmPgeC: float
  "Frequency Dependence of Capacitor: Capacitance"
  shtype: int
  "Shunt Type"
  fcharC1: object
  "Frequency Dependence of Capacitor: C1(f)"
  pf_recap_mn: int
  "Power Factor:ind.:cap."


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def Delete(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetInom(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def Isolate(*args):
    ...

  def SwitchOff(*args):
    ...

  def GetParent(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmStactrl(Protocol):
  Qmin: float
  "Q(V)-Characteristic: Qmin"
  i_uest: int
  "Estimate Voltage Setpoint"
  selBus: int
  "Controlled Node"
  cpOperator: object
  "Operator"
  psym: list
  "Machines"
  qsummin: float
  "Min. Total Reactive Power Limit"
  dat_src: str
  "Data source"
  rembar: object
  "Controlled Node: Controlled Node"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  manuf: str
  "Manufacturer"
  p_under: float
  "cosphi(P)-Characteristic Underexcited: Active Power"
  pf_under: float
  "cosphi(P)-Characteristic Underexcited: Min. Power Factor"
  Qmax: float
  "Q(V)-Characteristic: Qmax"
  cconn: int
  "Connected"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  iOPFCqsummax: int
  "Max. Total Reactive Power Limit"
  iQorient: int
  "Orientation:+Q:-Q"
  tansetp: float
  "tan(phi)"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  cosphi_char: int
  "PF-Control:Const. cosphi:cosphi(P)-Characteristic:cosphi(V)-Characteristic"
  i_ctrl: int
  "Control Mode"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  uset_mode: int
  "Controlled Node: Setpoint:Station Controller:bus target voltage"
  qsummax: float
  "Max. Total Reactive Power Limit"
  ciDist: int
  "Distance from infeed in number of buses"
  cvgen: list
  "Voltage Setpoint"
  cpBranch: object
  "Branch"
  deltaV: float
  "Enable Droop: delta(V)"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  i_uopt: int
  "Optimise Voltage Setpoint"
  deltaVoe: float
  "Q(V)-Characteristic: delta(V) (overexcited)"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  Qdroopue: float
  "Q(V)-Characteristic: Droop (underexcited)"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  consQdisp: int
  "Reactive Power Distribution: Consider reactive power dispatch"
  desc: list
  "Description"
  Srated: float
  "Enable Droop: Rated Reactive Power"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  iTrfCtrl: int
  "Reactive Power Distribution: Step-up Transformer Control:None:HV-Side:LV-Side"
  sOpComment: list
  "Operator Comment"
  ddroop: float
  "Enable Droop: Droop"
  oid_: int
  "ObjectID"
  vqq: list
  "Reactive Power Percentage"
  iComDate: int
  "Commissioning Date"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  Tctrl: float
  "Reactive Power Distribution: Controller Time Constant"
  ciEnergized: int
  "Energized"
  u_over: float
  "cosphi(V)-Characteristic Overexcited: Voltage"
  iOPFCqsummin: int
  "Min. Total Reactive Power Limit"
  ddroopue: float
  "Q(V)-Characteristic: Droop (underexcited)"
  pOwner: object
  "Owner"
  qu_char: int
  "Q-Control:Const. Q:Q(V)-Characteristic:Q(P)-Characteristic"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  Qdroop: float
  "Enable Droop: Droop"
  charact: list
  "Charact."
  ddroopoe: float
  "Q(V)-Characteristic: Droop (overexcited)"
  pQmeas: object
  "Enable Droop: Q measured at"
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  dataExtUnit: list
  "Unit"
  cvqq: list
  "Reactive Power Percentage"
  pfsetp: float
  "Power Factor"
  cpMeteostat: object
  "Meteo Station"
  pOperator: object
  "Operator"
  cpArea: object
  "Area"
  pf_recap: int
  "Power Factor:ind.:cap."
  i_phase: int
  "Phase:Pos.Seq.:Average:a:b:c:a-b:b-c:c-a"
  sernum: str
  "Serial Number"
  iopt_tdr: int
  "Q(V)-Characteristic: Different droop values"
  pQPcurve: object
  "Q(P)-Characteristic: Q(P)-Curve"
  selAutoUn: float
  "Controlled Node: Busbar Search Criteria >="
  p_over: float
  "cosphi(P)-Characteristic Overexcited: Active Power"
  constr: int
  "Year of Construction"
  i_droop: int
  "Enable Droop"
  cpSupplyTransformer: object
  "Supplying Transformer"
  cvgenmax: list
  "Max. Voltage"
  doc_id: object
  "Additional Data"
  udeadblow: float
  "Q(V)-Characteristic Voltage Dead Band: Lower Voltage Limit"
  imode: int
  "Reactive Power Distribution"
  cpCtrlNode: object
  "Controlled Node: Target Node"
  p_cub: object
  "Control Q at"
  gnrl_modby: str
  "Object modified by"
  u_under: float
  "cosphi(V)-Characteristic Underexcited: Voltage"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  deltaVue: float
  "Q(V)-Characteristic: delta(V) (underexcited)"
  tid_: int
  "TimeID"
  usetp: float
  "Controlled Node: Voltage Setpoint"
  root_id: object
  "Original Location"
  pf_over: float
  "cosphi(P)-Characteristic Overexcited: Min. Power Factor"
  udeadbup: float
  "Q(V)-Characteristic Voltage Dead Band: Upper Voltage Limit"
  refbar: object
  "Q(V)-Characteristic: Reference Node"
  loc_name: str
  "Name"
  Qdroopoe: float
  "Q(V)-Characteristic: Droop (overexcited)"
  fold_id: object
  "In Folder"
  dReserve: float
  "Minimum Control Reserve"
  cvgenmin: list
  "Min. Voltage"
  qsetp: float
  "Q Setpoint"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetStepupTransformer(*args):
    ...

  def Info(*args):
    ...

  def GetControlledHVNode(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetControlledLVNode(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmSubstat(Protocol):
  WorkDist: float
  "Working Distance"
  cimRdfId: list
  "RDF ID"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  pSwSc: object
  "Switching Rules: Active Rules"
  Hmax: float
  "Hmax"
  appr_modby: str
  "Approval Information: Modified by"
  DcBoxType: int
  "Enclosure type:Panelboard:LV switchgear:MV switchgear"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  pArea: object
  "Default Area"
  AccessTime: float
  "Access Times of Switches: Access Time"
  BoxDepth: float
  "Dimensions of enclosure: Depth"
  BoxWidth: float
  "Dimensions of enclosure: Width"
  Unom: float
  "Nominal Voltage"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  icolor: int
  "Colour"
  pRA: object
  "Running Arrangement: Running Arrangement"
  cUnom: float
  "Nominal Voltage"
  cpHeadFold: object
  "Head Folder"
  cpSupplySubstation: object
  "Supplying Substation"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  iBoxed: int
  "Enclosure:Open air:Boxed"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  Electrodes: str
  "Electrode configuration"
  gnrl_modif: int
  "Object modified"
  pOwner: object
  "Default Owner"
  Xfactor: float
  "Distance Factor"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  CondGap: float
  "Conductor Gap"
  pOperator: object
  "Default Operator"
  stoLoad: object
  "Load Distribution Curve: Distribution Curve"
  BoxHeight: float
  "Dimensions of enclosure: Height"
  constr: int
  "Year of Construction"
  cpSupplyTransformer: object
  "Supplying Transformer"
  gnrl_modby: str
  "Object modified by"
  pZone: object
  "Default Zone"
  pDiagram: object
  "Diagram"
  pid_: int
  "ProjectID"
  LocAccTime: float
  "Access Times of Switches: Local Access Time"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  isRaActive: int
  "Running arrangement active"
  loc_name: str
  "Name"
  sType: str
  "Type"
  fold_id: object
  "In Folder"
  sShort: str
  "Short Name"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SaveAsRA(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetSuppliedElements(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSplitIndex(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def SaveAsSwSc(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def OverwriteRA(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetSplitCal(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def ApplyAndResetRA(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSplit(*args):
    ...

  def GetInom(*args):
    ...

  def SetRA(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def ResetRA(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmSvs(Protocol):
  copfQmin1: float
  "Reactive power limits: Min. react. power limit at 0.9 p.u."
  copfQmax2: float
  "Reactive power limits: Max. react. power limit at 1 p.u."
  ivcop: int
  "Phase:a-b:b-c:c-a:Average:Pos.seq."
  X0: float
  "Reactance, X0"
  i_sctrl: int
  "Balanced/Unbalanced control"
  cpOperator: object
  "Operator"
  cimRdfId: list
  "RDF ID"
  isRPR: int
  "Optimisation of reactive power reserve"
  iOPFCQmin: int
  "Reactive power limits: Min. react. power limit"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  manuf: str
  "Manufacturer"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  availFactor: float
  "Availability Factor"
  copfQmax3: float
  "Reactive power limits: Max. react. power limit at 1.1 p.u."
  Xe: float
  "Reactance, Xe"
  Inom: float
  "Nominal Current"
  nxcap: int
  "TSC: Max. number of capacitors"
  pSubModel: object
  "Submodel"
  copfQmax1: float
  "Reactive power limits: Max. react. power limit at 0.9 p.u."
  Qmin_a: float
  "Qmin(L)"
  copfVolt2: float
  "Reactive power limits: Voltage: 1 p.u."
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  copfVolt3: float
  "Reactive power limits: Voltage: 1.1 p.u."
  i_ctrl: int
  "Control mode"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  Re: float
  "Resistance, Re"
  uset_mode: int
  "Setpoint:local:bus target voltage"
  ciDist: int
  "Distance from infeed in number of buses"
  pcu: float
  "Maximum copper losses"
  cpBranch: object
  "Branch"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  i_det: int
  "TCR model"
  cTypHmc: str
  "Harmonic Current Injections: Type of Harmonic Sources"
  c_pmod: object
  "Model"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  desc: list
  "Description"
  Srated: float
  "Enable droop: Rated reactive power"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  sOpComment: list
  "Operator comment"
  ddroop: float
  "Enable droop: Droop"
  nfixcap: int
  "MSC: Number of capacitors"
  oid_: int
  "ObjectID"
  c_pstac: object
  "External station controller"
  iComDate: int
  "Commissioning Date"
  icurref: int
  "Harmonic Current Injections: Harmonic currents referred to"
  Qfixcap: float
  "MSC: Q per capacitor (<0)"
  appr_status: int
  "Approval Information: Status"
  QtargetRPR: float
  "Q target value"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  i_int: int
  "Ideal SVS"
  copfQmin3: float
  "Reactive power limits: Min. react. power limit at 1.1 p.u."
  pOwner: object
  "Owner"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  i_udeadb: int
  "Voltage dead band"
  tcrqact: float
  "Actual values: Act. value of TCR"
  Qdroop: float
  "Enable droop: Droop"
  charact: list
  "Charact."
  pQmeas: object
  "Enable droop: Q measured at"
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  Irated: float
  "Harmonic Current Injections: Rated Current"
  dataExtUnit: list
  "Unit"
  QtargetBase: int
  "Base:Reactive power limits:Rated apparent power"
  cpMeteostat: object
  "Meteo Station"
  maxorder: int
  "Maximum harmonic order"
  nncap: int
  "Actual values: Act. number of capacitors"
  pOperator: object
  "Operator"
  cpArea: object
  "Area"
  i_qini: int
  "State Estimation: Estimate reactive power"
  p_rem: object
  "Controlled node"
  sernum: str
  "Serial Number"
  iAstabint: int
  "A-stable integration algorithm"
  ictsv: int
  "Reactive power as control"
  iOPFCQmax: int
  "Reactive power limits: Max. react. power limit"
  bus1: object
  "Terminal"
  constr: int
  "Year of Construction"
  i_droop: int
  "Enable droop"
  cpSupplyTransformer: object
  "Supplying Transformer"
  iconn: int
  "Connection mode of capacitors:Y:D:YN"
  q0: float
  "Reactive power"
  doc_id: object
  "Additional Data"
  udeadblow: float
  "Voltage dead band: Lower voltage limit"
  p_cub: object
  "Control Q at"
  cpCtrlNode: object
  "Target node"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  qmin: float
  "TSC: Q per capacitor (<0)"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  i_rem: int
  "Remote control"
  copfVolt1: float
  "Reactive power limits: Voltage: 0.9 p.u."
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  R0: float
  "Resistance, R0"
  tcrmax: float
  "TCR: Max. limit"
  usetp: float
  "Voltage setpoint"
  root_id: object
  "Original Location"
  udeadbup: float
  "Voltage dead band: Upper voltage limit"
  phmc: object
  "Harmonic Current Injections: Harmonic currents (TCR)"
  qdslCtrl: object
  "Quasi-Dynamic Model"
  qmax: float
  "TCR: Q of reactance (>0)"
  loc_name: str
  "Name"
  Qmax_a: float
  "Qmax(C)"
  copfQmin2: float
  "Reactive power limits: Min. react. power limit at 1 p.u."
  fold_id: object
  "In Folder"
  qsetp: float
  "Q Setpoint"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetStepupTransformer(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmSym(Protocol):
  Pmin_ucPU: float
  "Active Power Operational Limits: Min."
  P_min: float
  "Min."
  iintgnd: int
  "Neutral Conductor: N-Connection:None:At terminal (ABC-N):Separate terminal"
  iHmcType: int
  "Harmonic Load Flow: Harmonic Model:Thevenin Equivalent:Ideal Voltage Source:Impedance"
  drawStall: int
  "Time-overcurrent plot: Draw Thermal Overload"
  dpl1: float
  "dpl1"
  Pmax_uc: float
  "Active Power Operational Limits: Max."
  pQlimType: object
  "Reactive Power Operational Limits: Capability Curve"
  allowGenMode: int
  "Separate generation mode"
  iInterPol: int
  "Approximation:Spline:Piecewise linear:Polynomial:Hermite"
  cpOperator: object
  "Operator"
  cimRdfId: list
  "RDF ID"
  isRPR: int
  "Optimisation of reactive power reserve"
  costRedispatchP: float
  "Redispatch costs for active power change"
  iOPFCQmin: int
  "Reactive Power Operational Limits: Min."
  pPowerCrv: object
  "Wind Power Curve"
  dpl5: float
  "dpl5"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  rf_st: float
  "Use integrated AVR for motor starting: Starting field resistance"
  minUpTime: float
  "Start-up/shut-down time constraints: Minimum up-time"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  P_max: float
  "Active Power: Rating: Max."
  Inom: float
  "Nominal Current"
  isDiscreteCtrlP: int
  "Restriction to discrete active power values"
  Qmin_a: float
  "Qmin(act.)"
  allowConsumMode: int
  "Separate consumption mode"
  consumCosts: float
  "Consumption mode: Consumption costs"
  appr_modif: int
  "Approval Information: Modified"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  pgini_a: float
  "Actual Dispatch: Active Power (act.)"
  isConsShutDownCost: int
  "Shut-down costs"
  cTypHmc: str
  "Harmonic Load Flow: Type of Harmonic Sources"
  discMethCostOp: int
  "Piecewise linearisation for LP"
  c_pmod: object
  "Model"
  xesy: float
  "Internal Grounding Impedance: Reactance, Xe"
  cap_Qmn: list
  "Min."
  ve_rated: float
  "Use integrated AVR for motor starting: Rated field voltage"
  limRampDownPU: float
  "Ramp rate constraints: Ramp-down limit"
  efficiencyLPgen: float
  "Efficiency: Used efficiency (generation)"
  cgnd: int
  "Internal Grounding Impedance: Star Point:Connected:Not connected"
  cIsDiscreteCtrlP: int
  "Restriction to discrete active power values"
  scaleQmax: float
  "Reactive Power Operational Limits: Scaling Factor (max.)"
  efdBaseRatio: float
  "Excitation system: Efd base ratio"
  efficiencyCurveConsum: object
  "Efficiency: Efficiency curve (consumption)"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  fixedCosts: float
  "Fixed costs"
  pmaxratf: float
  "Active Power: Rating: Rating Factor"
  vecPowerRedispatchDown: list
  "Redispatch"
  desc: list
  "Description"
  iOPFCPmax: int
  "Active Power Operational Limits: Max."
  cUserDefIndex: int
  "User defined Index"
  sOpComment: list
  "Operator Comment"
  mdmex: float
  "Mechanical load: Exponent"
  cap_P: list
  "Act.Power"
  oid_: int
  "ObjectID"
  limRampDown: float
  "Ramp rate constraints: Ramp-down limit"
  iComDate: int
  "Commissioning Date"
  p_direc: int
  "Dispatch: Power Direction:P>=0:P<0"
  pStorage: object
  "Storage model"
  cq_max: float
  "Reactive Power Operational Limits: Max."
  cq_min: float
  "Reactive Power Operational Limits: Min."
  QtargetRPR: float
  "Optimisation of reactive power reserve: Q target value"
  c_pCtrlHV: object
  "Controlled HV-busbar"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  ifdBaseType: str
  "Excitation system: Excitation base mode"
  isConstrUpDown: int
  "Start-up/shut-down time constraints"
  costRedispatchDown: float
  "Additional redispatch costs: Downward active power redispatch costs"
  limRampUpPU: float
  "Ramp rate constraints: Ramp-up limit"
  pOwner: object
  "Owner"
  phiini: float
  "Dispatch: Angle"
  i_cap: int
  "User defined Capability Curve"
  Pnom: float
  "Active Power Operational Limits: Pr(rated)"
  cost_up: float
  "Start-up costs: Warm-start costs"
  dphi: float
  "Change of phi effect on stability (RMS - Standard model) (for testing only)"
  cnwsamples: int
  "Wind Model Time Series Characteristics: Annual Samples: Number of Samples"
  iestq: int
  "State Estimation: Estimate Reactive Power"
  cosimModel: int
  "Used for Co-simulation"
  dataExtDesc: list
  "Description"
  Pmax_ucPU: float
  "Active Power Operational Limits: Max."
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  outServPzero: int
  "Out of service when active power is zero"
  cpFeed: object
  "Feeder"
  mode_inp: str
  "Dispatch: Input Mode"
  numBreakpointsCostOp: int
  "Piecewise linearisation for LP: Number of breakpoints"
  dataExtUnit: list
  "Unit"
  mean: float
  "Wind Model Weibull Distribution for Wind Speed: Mean"
  cVecDiscreteCtrlPvals: list
  "Valid active power values"
  drawInrush: int
  "Time-overcurrent plot: Draw Inrush Current"
  ip_ctrl: int
  "Reference Machine"
  cosgini_a: float
  "Actual Dispatch: Power Factor (act.)"
  cpMeteostat: object
  "Meteo Station"
  costColdStart: float
  "Start-up costs: Cold-start costs"
  limRampUp: float
  "Ramp rate constraints: Ramp-up limit"
  bus1n: object
  "Neutral Conductor: Neutral"
  pOperator: object
  "Operator"
  pf_recap: int
  "Dispatch: Power Factor:ind.:cap."
  ignd: int
  "Star Point:&0&grounded:&2&isolated"
  isVRE: int
  "Generator usage: Generator usage:Single thermal generation unit:Variable renewable energy source (VRE):Coupled with storage model:Part of Virtual Power Plant"
  cpArea: object
  "Area"
  isMustRunUC: int
  "Additional constraints for controls: Must run"
  pQPcurve: object
  "Q(P)-Characteristic: Q(P)-Curve"
  iAstabint: int
  "A-stable integration algorithm"
  iWindGen: int
  "Wind Generator"
  sgini_a: float
  "Actual Dispatch: Apparent Power (act.)"
  iOPFCQmax: int
  "Reactive Power Operational Limits: Max."
  bus1: object
  "Terminal"
  usp_min: float
  "Voltage Setpoint Limits: Min. Voltage Setpoint"
  constr: int
  "Year of Construction"
  cQ_min: float
  "Reactive Power Operational Limits: Minimum"
  costShutDown: float
  "Shut-down costs"
  cpSupplyTransformer: object
  "Supplying Transformer"
  iopt_windm: int
  "Wind Model: Wind Model"
  genShiftKey: float
  "Generation shift key"
  iqtype: int
  "Reactive Power Operational Limits: Use limits specified in type"
  windspeed: float
  "Dispatch: Wind speed"
  doc_id: object
  "Additional Data"
  sgini: float
  "Dispatch: Apparent Power"
  iestp: int
  "State Estimation: Estimate Active Power"
  scaleQmin: float
  "Reactive Power Operational Limits: Scaling Factor (min.)"
  vecStartUpCosts: list
  "Start-up costs: Start-up costs"
  pid_: int
  "ProjectID"
  dispatch: int
  "Generator Dispatch"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  penaltyCosts: float
  "Penalty costs"
  pG: float
  "Range of Voltage Regulation (+/-)"
  i_mot: int
  "Generator/Motor"
  usp_max: float
  "Voltage Setpoint Limits: Max. Voltage Setpoint"
  isCtrlPplacement: int
  "Optimise active power"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  pStoch: object
  "Stochastic model"
  cpGrid: object
  "Grid"
  c_psecc: object
  "External Secondary Controller"
  ve_const: float
  "Use integrated AVR for motor starting: Constant field voltage"
  bustp: str
  "Corresponding Bus Type:"
  dsecres: float
  "Reserve"
  Jme: float
  "Mechanical load: Moment of inertia"
  phmc: object
  "Harmonic Load Flow: Harmonic Voltages"
  qdslCtrl: object
  "Quasi-Dynamic Model"
  av_mode: str
  "Local Controller"
  Qmax_a: float
  "Qmax(act.)"
  aCategory: str
  "Plant Category"
  Pngrel: float
  "Stochastic Model for Generation: Based on rated active power (Pr)"
  ctag: float
  "Mechanical load: Acceleration time const. from type"
  cQ_max: float
  "Reactive Power Operational Limits: Maximum"
  polyDegree: int
  "Polynomial degree"
  fold_id: object
  "In Folder"
  dpl3: float
  "dpl3"
  minDownTime: float
  "Start-up/shut-down time constraints: Minimum down-time"
  Irze: list
  "Rated Current of Grounding"
  Tstart: float
  "Time-overcurrent plot: Starting Time"
  typ_id: object
  "Type"
  cap_Qmx: list
  "Max."
  costRedispatchUp: float
  "Additional redispatch costs: Upward active power redispatch costs"
  vecStartUpTimes: list
  "Start-up costs: Down-time"
  dat_src: str
  "Data source"
  limRampStartUpPU: float
  "Ramp rate constraints: Start-up ramp limit"
  i_spin: int
  "Spinning if circuit-breaker is open"
  pgini: float
  "Dispatch: Active Power"
  isCtrlFixedToLdfVal: int
  "Additional constraints for controls: Fix controls to Load Flow values"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  Pmax_a: float
  "Pmax(act.)"
  availFactor: float
  "Availability Factor"
  limRampStartUp: float
  "Ramp rate constraints: Start-up ramp limit"
  isConsCostsRedispatch: int
  "Additional redispatch costs"
  i_avr: int
  "Use integrated AVR for motor starting"
  pFlicker: object
  "Flicker Contribution: Flicker Coefficients"
  PmaxInvPU: float
  "Separate consumption mode: Max."
  cCategory: str
  "Plant Category"
  beta: float
  "Wind Model Weibull Distribution for Wind Speed: Beta"
  coldStartTime: float
  "Start-up costs: Cold-start time"
  cStorage: object
  "Generator usage: Storage model"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  costRedispatchQ: float
  "Redispatch costs for reactive power change"
  PminInv: float
  "Separate consumption mode: Min."
  for_name: str
  "Foreign Key"
  vecCostRedispatchDown: list
  "Costs"
  cosgini: float
  "Dispatch: Power Factor"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  dpl4: float
  "dpl4"
  resy: float
  "Internal Grounding Impedance: Resistance, Re"
  isConsStartUpCost: int
  "Start-up costs"
  ciEarthed: int
  "Earthed"
  isLimQmax: int
  "Reactive Power Operational Limits: Max."
  pOpCostCurve: object
  "Operating costs: Generator cost curve"
  outserv: int
  "Out of Service"
  pBMU: object
  "Virtual Power Plant"
  PminInvPU: float
  "Separate consumption mode: Min."
  cfixedCosts: float
  "Consumption mode: Fixed costs"
  Pmin_a: float
  "Pmin(act.)"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  mdmlp: float
  "Mechanical load: Proportional Factor"
  avgCostsUc: float
  "Piecewise linearisation for LP: Average costs"
  iSchemeStatus: int
  "Scheme Status"
  i_prty: int
  "Active power control: Priority"
  ddroop: float
  "Voltage Droop: Droop"
  qgini: float
  "Dispatch: Reactive Power"
  phtech: int
  "Technology"
  isLimPmax: int
  "Active Power Operational Limits: Max."
  c_pstac: object
  "External Station Controller"
  appr_status: int
  "Approval Information: Status"
  smoothfac: float
  "Smoothing factor"
  iOPFCPmin: int
  "Active Power Operational Limits: Min."
  isPcurrAllowed: int
  "Restriction to discrete active power values: Allow current active power value"
  ictqg: int
  "Controls: Reactive Power"
  isCtrlQ: int
  "Controls: Reactive power"
  Pctrl: int
  "Active power control: Active power steps:fixed:continuous:1:2:3:4:5:6:7:8:9:10"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  EDS: float
  "Stochastic Model for Generation: Expectancy of derated states"
  isLimQmin: int
  "Reactive Power Operational Limits: Min."
  cpower: list
  "Power"
  charact: list
  "Charact."
  ifdBaseValue: float
  "Ifd base current"
  efficiencyCurveGen: object
  "Efficiency: Efficiency curve (generation)"
  limRampShutDownPU: float
  "Ramp rate constraints: Shut-down ramp limit"
  gratio: float
  "Mechanical load: Gear ratio"
  stowind: int
  "Wind Model"
  iv_mode: int
  "Local Controller"
  QtargetBase: int
  "Optimisation of reactive power reserve: Base:Reactive power limits:Rated apparent power"
  efficiencyLPconsum: float
  "Efficiency: Used efficiency (consumption)"
  ngnum: int
  "Number of: parallel Machines"
  vecDiscreteCtrlPvals: list
  "Restriction to discrete active power values: Valid active power values"
  cSubCategory: str
  "Subcategory"
  isLimPmin: int
  "Active Power Operational Limits: Min."
  costp: float
  "Costs per MW"
  isConstrRamp: int
  "Ramp rate constraints"
  is4SpinReserve: int
  "Consider for region spinning reserve"
  q_min: float
  "Reactive Power Operational Limits: Min."
  sernum: str
  "Serial Number"
  pf_recap_a: str
  "Actual Dispatch: Power Factor Ind/Cap (act.)"
  Kpf: float
  "Dispatch: Prim. Frequency Bias"
  PmaxInv: float
  "Separate consumption mode: Max."
  FOE: float
  "Stochastic Model for Generation: Forced Outage Expectancy"
  costCurtailment: float
  "Costs for curtailment"
  limRampShutDown: float
  "Ramp rate constraints: Shut-down ramp limit"
  ctagtot: float
  "Mechanical load: Total acceleration time const."
  isConsCostOp: int
  "Operating costs"
  FAY: float
  "Stochastic Model for Generation: Full Availability Expectancy"
  speedinit: float
  "Initial speed"
  mode_pgi: int
  "Model:Active power input:Wind speed input"
  aSubCategory: str
  "Subcategory"
  c_pmdm: object
  "Mechanical load: Mdm"
  isCtrlP: int
  "Controls: Active power"
  pMeteostat: object
  "Wind Model: Meteo Station (Correlation)"
  fixed: int
  "Must run"
  vecPowerRedispatchUp: list
  "Redispatch"
  gnrl_modby: str
  "Object modified by"
  dpl2: float
  "dpl2"
  variance: float
  "Wind Model Weibull Distribution for Wind Speed: Variance"
  q_max: float
  "Reactive Power Operational Limits: Max."
  ciLater: int
  "Lateral Index"
  priority: int
  "Merit Order"
  avgCosts: float
  "Average costs"
  tid_: int
  "TimeID"
  cIsMustRunUC: int
  "Additional constraints for controls: Must run"
  ictpg: int
  "Controls: Active Power"
  usetp: float
  "Dispatch: Voltage"
  root_id: object
  "Original Location"
  pCharYrMW: list
  "Wind Model Time Series Characteristics: Annual Samples: Time Series Characteristics of Active Power Contribution (MW)"
  cIsPcurrAllowed: int
  "Allow current active power value"
  pGRStoch: object
  "Stochastic Model for Generation: Stochastic Model"
  qgini_a: float
  "Actual Dispatch: Reactive Power (act.)"
  Pmin_uc: float
  "Active Power Operational Limits: Min."
  ccost: list
  "Costs"
  windspeed_a: float
  "Actual Dispatch: Wind speed (act.)"
  loc_name: str
  "Name"
  pCharYrWS: list
  "Wind Model Time Series Characteristics: Annual Samples: Time Series Characteristics for Wind Speed (m/s)"
  speed_th: float
  "Use integrated AVR for motor starting: Trigger excitation at speed"
  vecBreakpointsP: list
  "Piecewise linearisation for LP: Power"
  vecCostRedispatchUp: list
  "Costs"


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def ResetDerating(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetMotorStartingFlag(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def GetAvailableGenPower(*args):
    ...

  def Delete(*args):
    ...

  def GetStepupTransformer(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetInom(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def Reconnect(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def Derate(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def Disconnect(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetParent(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def CalcEfficiency(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsConnected(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmTerm(Protocol):
  vstep_bus: float
  "Voltage Step Change Limits: Busbar Fault"
  dpl1: float
  "dpl1"
  cpOperator: object
  "Operator"
  cDcBoxType: int
  "Enclosure type:Panelboard:LV switchgear:MV switchgear"
  cimRdfId: list
  "RDF ID"
  dpl5: float
  "dpl5"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  unknom: float
  "Nominal Voltage: Line-Ground"
  ivpriority: int
  "Voltage Control: Priority"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  cAccessTime: float
  "Access Times of Switches: Access Time"
  iBayEnd: int
  "Bay end"
  BoxDepth: float
  "Dimensions of enclosure: Depth"
  nneutral: int
  "No of Neutrals:0:1"
  appr_modif: int
  "Approval Information: Modified"
  uknom: float
  "Nominal Voltage: Line-Line"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  cCapShnt: object
  "ComCapo Shunt"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  iTopoPrio: int
  "Tie Open Point Optimisation: Priority"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  iBoxed: int
  "Enclosure:Open air:Boxed"
  CCEarProb: float
  "Failures Double Earth Fault: Conditional probability of a second earth fault"
  idc_t: float
  "D.C. Component of Short-Circuit Current"
  vstep_change: int
  "Voltage Step Change Limits"
  Iac_t: float
  "A.C. Component of Short-Circuit Current"
  oid_: int
  "ObjectID"
  iComDate: int
  "Commissioning Date"
  dvmax: float
  "Voltage Control: Delta V max"
  gnrl_modif: int
  "Object modified"
  iAccessLoc: int
  "Accessible Location"
  ciEnergized: int
  "Energized"
  pOwner: object
  "Owner"
  Xfactor: float
  "Distance factor"
  cIntInStat: int
  "Internal Node in Substation"
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  dataExtUnit: list
  "Unit"
  vstep_n1: float
  "Voltage Step Change Limits: n-1"
  cpMeteostat: object
  "Meteo Station"
  CCEarRepMu: float
  "Failures Double Earth Fault: Repair duration"
  pOperator: object
  "Operator"
  cpArea: object
  "Area"
  cpBay: object
  "Equipment Data: Bay"
  iPriority: int
  "Priority for connectivity tracing"
  BoxHeight: float
  "Dimensions of enclosure: Height"
  constr: int
  "Year of Construction"
  cpSupplyTransformer: object
  "Supplying Transformer"
  iminus: int
  "Nominal Voltage: DC-Polarity:positive (+):negative (-):neutral"
  doc_id: object
  "Additional Data"
  ciBusbarCon: int
  "Connection Status"
  pid_: int
  "ProjectID"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  LocAccTime: float
  "Access Times of Switches: Local Access Time"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  pStoch: object
  "Failures: Element model"
  UcteNodeName: str
  "Ucte Node Name"
  iOPFCvmax: int
  "Voltage limits: Upper Voltage Limit"
  cBoxWidth: float
  "Width"
  systype: int
  "System Type:AC:DC:AC/BI"
  fold_id: object
  "In Folder"
  dpl3: float
  "dpl3"
  tstart: float
  "Start of interruption"
  typ_id: object
  "Type"
  WorkDist: float
  "Working distance"
  dvmin: float
  "Voltage Control: Delta V min"
  i_t: float
  "Short-circuit current (instantaneous)"
  CCEarFr: float
  "Failures Double Earth Fault: Frequency of single earth faults"
  cpBusbar: object
  "Busbar"
  dat_src: str
  "Data source"
  cWorkDist: float
  "Working distance"
  cStatName: str
  "Station/Name"
  DcBoxType: int
  "Enclosure type:Panelboard:LV switchgear:MV switchgear"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  pArea: object
  "Area"
  AccessTime: float
  "Access Times of Switches: Access Time"
  BoxWidth: float
  "Dimensions of enclosure: Width"
  nphase: int
  "No of Phases"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  for_name: str
  "Foreign Key"
  iSubstatDef: int
  "Equipment Data"
  NodeName: str
  "Node Name"
  iEarth: int
  "Earthed"
  vtarget: float
  "Voltage Control: Target Voltage"
  cBoxHeight: float
  "Height"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  dpl4: float
  "dpl4"
  cXfactor: float
  "Distance factor"
  ciEarthed: int
  "Earthed"
  cConsis: float
  "Consistency Status:NOT OK:  OK"
  outserv: int
  "Out of Service"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  tinter: float
  "End of interruption"
  NomOut: float
  "Sum of leaving cables or Biggest leaving cable"
  cCondGap: float
  "Conductor gap"
  iSchemeStatus: int
  "Scheme Status"
  vmax: float
  "Steady State Voltage Limits: Upper Voltage Limit"
  phtech: int
  "Phase Technology:ABC:ABC-N:BI:BI-N:2PH:2PH-N:1PH:1PH-N:N"
  appr_status: int
  "Approval Information: Status"
  Electrodes: str
  "Electrode configuration"
  FOR1: float
  "Failures: Forced Outage Rate"
  cPosLne: float
  "Nominal Voltage: Position on Line"
  isshc: int
  "Short-Circuit Bus"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  isSoftConstr: int
  "Voltage limits: Soft constraint"
  cBoxDepth: float
  "Depth"
  pTypStoch: object
  "Failures: Type model"
  charact: list
  "Charact."
  ikl_t: float
  "Lower Envelope of Short-Circuit Current"
  Vtarget: float
  "Voltage Control: Target Voltage"
  cLocAccTime: float
  "Access Times of Switches: Local Access Time"
  CondGap: float
  "Conductor gap"
  cubics: list
  "Cubicles"
  cElectrodes: list
  "Electrode configuration"
  sernum: str
  "Serial Number"
  FOE: float
  "Failures: Forced Outage Expectancy"
  FOD: float
  "Failures: Forced Outage Duration"
  vstep_n2: float
  "Voltage Step Change Limits: n-2"
  vmin: float
  "Steady State Voltage Limits: Lower Voltage Limit"
  gnrl_modby: str
  "Object modified by"
  dpl2: float
  "dpl2"
  pZone: object
  "Zone"
  ciLater: int
  "Lateral Index"
  cBoxed: int
  "Enclosure:Open air:Boxed"
  tid_: int
  "TimeID"
  u_minph: float
  "Phase Voltage (Min)"
  NomIn: float
  "Sum of feeding cables or Smallest feeding cable"
  iUsage: int
  "Usage:Busbar:Junction Node:Internal Node"
  root_id: object
  "Original Location"
  iSection: int
  "Section"
  loc_name: str
  "Name"
  iperfect: int
  "Failures: Ideal component"
  iOPFCvmin: int
  "Voltage limits: Lower Voltage Limit"
  ik_t: float
  "Upper Envelope of Short-Circuit Current"


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def UpdateSubstationTerminals(*args):
    ...

  def GetEquivalentTerminals(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetConnectedCubicles(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def Delete(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetMinDistance(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def IsInternalNodeInStation(*args):
    ...

  def CopyData(*args):
    ...

  def GetInom(*args):
    ...

  def IsElectrEquivalent(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def GetNextHVBus(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetConnectedMainBuses(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetCalcRelevantCubicles(*args):
    ...

  def GetSepStationAreas(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetBusType(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def GetNodeName(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def IsEquivalent(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def HasCreatedCalBus(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetShortestPath(*args):
    ...

  def GetParent(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetConnectionInfo(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetConnectedBrkCubicles(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmTr2(Protocol):
  i_rem2: int
  "Remote Control"
  iblock: int
  "Unit Transformer"
  cPsiresC: float
  "Residual flux: Phase C"
  optapmin: int
  "Operational limits for tap changer Tap Changer 1: Minimum Position"
  psetp2: float
  "Active Power Setpoint"
  Kpart: float
  "Participation factor"
  iintgnd: int
  "Neutral Connection"
  nntap2: int
  "Tap Changer 2: Tap Position"
  ignd_h: int
  "Star Point:grounded:compensated:isolated"
  dpl1: float
  "dpl1"
  i_uopt2: int
  "Tap Changer 2"
  cpOperator: object
  "Operator"
  cimRdfId: list
  "RDF ID"
  mTaps: list
  "Tap Changer 1, Measurement Table: Measurement Report"
  cgnd_l: int
  "Internal Grounding Impedance, LV Side: Star Point:Connected:Not connected"
  psp_up2: float
  "Upper Active Power Bound"
  optaplimit: int
  "Operational limits for tap changer"
  dpl5: float
  "dpl5"
  Ptolerance2: float
  "Tolerance (+/-)"
  chr_name: str
  "Characteristic Name"
  PsiresB: float
  "Residual flux: Phase B"
  appr_modby: str
  "Approval Information: Modified by"
  i_tapini2: int
  "Estimate Tap 2 Position"
  uset_mode2: int
  "Setpoint:local:bus target voltage"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  pVccurve2: object
  "LDC/Current Compounding Compensation: V-Control-Curve"
  bushvn: object
  "Neutral Conductor: HV-Neutral"
  nntap: int
  "Tap Changer 1: Tap Position"
  qsp_low: float
  "Lower Reactive Power Bound"
  imldc: str
  "Control Mode:V:P:Q"
  ionlyPre: int
  "Controls for Optimal Power Flow: Optimise in DC OPF:Pre- and post-fault position:Only pre-fault position"
  iIntTapCtrl: int
  "Tap Changer 1, Measurement Table: Use Integrated Tap Controller"
  appr_modif: int
  "Approval Information: Modified"
  uset_mode: int
  "Setpoint:local:bus target voltage"
  iResFlux: int
  "Residual flux"
  ciDist: int
  "Distance from infeed in number of buses"
  x0Sbasepu: float
  "x0 (Sbase)"
  cpBranch: object
  "Branch"
  ntrcn: int
  "Automatic Tap Changing"
  i_hvcon: int
  "HV-side, phase 2 connected"
  qsp_up2: float
  "Upper Reactive Power Bound"
  optap2min: int
  "Operational limits for tap changer Tap Changer 2: Minimum Position"
  i_uopt: int
  "Controls for Optimal Power Flow: Tap Changer 1:Off:On:Part of external Tap Controller"
  iPpart2: int
  "Active power participation"
  p_pmeas: object
  "P measured at"
  qsp_low2: float
  "Lower Reactive Power Bound"
  Cc1_hl: float
  "Consider Capacitances: Capacitance HV-LV, 1-Sequence"
  ldcxs: float
  "LDC/Current Compounding Compensation: Xset"
  pMeteo: object
  "Meteo. Station"
  buslv: object
  "LV-Side"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  ldcct: float
  "LDC/Current Compounding Compensation: Current Transformer Rating"
  iAreaBus: int
  "Area"
  fr_coldload: int
  "Time-overcurrent plot: Cold load curve"
  Snom: float
  "Nominal Power"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  sOpComment: list
  "Operator Comment"
  i_uoptCont: int
  "Controls for Optimal Power Flow: Control Mode:discrete:continuous"
  CCEarProb: float
  "Failures Double Earth Fault: Conditional probability of a second earth fault"
  pldc2: object
  "LDC/Current Compounding Compensation: External LDC"
  oid_: int
  "ObjectID"
  iComDate: int
  "Commissioning Date"
  Cc0_hl: float
  "Consider Capacitances: Capacitance HV-LV, 0-Sequence"
  re0tr_l: float
  "Internal Grounding Impedance, LV Side: Resistance, Re"
  gnrl_modif: int
  "Object modified"
  i_lvcon: int
  "LV-side, phase 2 connected"
  ciEnergized: int
  "Energized"
  isConstrLoadingPlacement: int
  "Max. loading constraint for Optimal Equipment Placement"
  iZoneBus: int
  "Zone"
  pOwner: object
  "Owner"
  psp_low: float
  "Lower Active Power Bound"
  xSbasepu: float
  "x (Sbase)"
  cpCtrlNode2: object
  "Target Node"
  cgnd_h: int
  "Internal Grounding Impedance, HV Side: Star Point:Connected:Not connected"
  dataExtDesc: list
  "Description"
  bSbasepu: float
  "b (Sbase)"
  i_auto: int
  "Auto Transformer"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  xe0tr_h: float
  "Internal Grounding Impedance, HV Side: Reactance, Xe"
  psp_low2: float
  "Lower Active Power Bound"
  iTaps: int
  "Tap Changer 1: According to Measurement Report"
  allowCntConstrFilt: int
  "Constraint Filtering: Allow contingency filtering by number of critical constraints"
  dataExtUnit: list
  "Unit"
  iopt_hf: int
  "Consider Capacitances"
  Ib_lv: float
  "Values for LV-Side: Highest Operating Current"
  PsiresC: float
  "Residual flux: Phase C"
  i_cont: int
  "Tap Changer:discrete:continuous"
  cpMeteostat: object
  "Meteo Station"
  isSepCntConstrType: int
  "Max. loading constraint for contingencies: Separate constraint type"
  CCEarRepMu: float
  "Failures Double Earth Fault: Repair duration"
  bushv: object
  "HV-Side"
  Kqctrl2: float
  "Controller Sensitivity dtap/dQ"
  pOperator: object
  "Operator"
  re0tr_h: float
  "Internal Grounding Impedance, HV Side: Resistance, Re"
  cpeter_l: int
  "Internal Grounding Impedance, LV Side: Petersen Coil"
  ifc: int
  "Forced Cooling Enabled"
  cpArea: object
  "Area"
  Tctrl2: float
  "Controller Time Constant"
  isCtrlTapPlacement: int
  "Controls for Optimal Equipment Placement: Position of tap 1"
  pldc: object
  "LDC/Current Compounding Compensation: External LDC"
  Inom_h: float
  "HV-Side, Nominal Current"
  iAstabint: int
  "A-stable integration algorithm"
  ntrcn2: int
  "Automatic Tap Changing"
  Ubqmin_hv: float
  "Values for HV-Side (only for Unit Transformer): Minimum Operating Voltage"
  cIsSepCntConstrType: int
  "Max. loading constraint for contingencies: Separate constraint type"
  constr: int
  "Year of Construction"
  cpSupplyTransformer: object
  "Supplying Transformer"
  Cg_l: float
  "Consider Capacitances: Capacitance LV-Ground"
  isCtrlTap: int
  "Controls for Unit Commitment: Tap Changer 1:Off:On:Part of external Tap Controller"
  strf1: float
  "Load Current"
  doc_id: object
  "Additional Data"
  Snom_a: float
  "Nominal Power (act.)"
  ifrqft: int
  "Time-overcurrent plot: Frequent Fault ( >10(5)/lifetime, Category II(III) )"
  usp_up: float
  "Upper Voltage Bound"
  ldcpt2: float
  "LDC/Current Compounding Compensation: Voltage Transformer Ratio"
  p_cub: object
  "Controlled Branch (Cubicle)"
  cpCtrlNode: object
  "Target Node"
  cAllowCntConstrFilt: int
  "Constraint Filtering: Allow contingency filtering by number of critical constraints"
  i_tapini: int
  "State Estimation: Estimate Tap 1 Position"
  optapmax: int
  "Operational limits for tap changer Tap Changer 1: Maximum Position"
  pid_: int
  "ProjectID"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  penaltyCosts: float
  "Controls for Optimal Power Flow: Penalty costs per Tap deviation"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  pStoch: object
  "Failures: Element model"
  cpGrid: object
  "Grid"
  ldcpt: float
  "LDC/Current Compounding Compensation: Voltage Transformer Ratio"
  optap2max: int
  "Operational limits for tap changer Tap Changer 2: Maximum Position"
  qsetp2: float
  "Reactive Power Setpoint"
  drawInr: int
  "Time-overcurrent plot: Draw Inrush Current"
  qdslCtrl: object
  "Quasi-Dynamic Model"
  Inom_l_a: float
  "LV-Side, Nominal Current"
  i_ealv: int
  "LV-side, phase 2 internally grounded"
  usp_up2: float
  "Upper Voltage Bound"
  fold_id: object
  "In Folder"
  dpl3: float
  "dpl3"
  qsetp: float
  "Reactive Power Setpoint"
  Irze: list
  "Rated Current of Grounding"
  iansish: int
  "Time-overcurrent plot: ANSI Curve Shift"
  Ub_lv: float
  "Values for LV-Side: Highest Operating Voltage"
  typ_id: object
  "Type"
  c_ptapc: object
  "External Tap Controller"
  CCEarFr: float
  "Failures Double Earth Fault: Frequency of single earth faults"
  isSepCntMaxAllowedLoading: int
  "Max. loading constraint for contingencies: Separate max. allowed loading"
  iMeasLoc: int
  "Tap Changer 1, Measurement Table: Measured at"
  dat_src: str
  "Data source"
  coldloadtab2: list
  "Values"
  tapctrl: object
  "Tap Controller"
  cntMaxAllowedLoading: float
  "Max. loading constraint for contingencies: Max. allowed loading in Contingencies"
  ilcph: int
  "Phase:a:b:c:a-b:b-c:c-a:Pos.Seq."
  ratfac: float
  "Rating Factor"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  Vtolerance2: float
  "LDC/Current Compounding Compensation: Tolerance (+/-)"
  availFactor: float
  "Availability Factor"
  xe0tr_l: float
  "Internal Grounding Impedance, LV Side: Reactance, Xe"
  rSbasepu: float
  "r (Sbase)"
  InomPre_l: float
  "LV-Side, Pre-fault Nominal Current"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  isCtrlTapCont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  ignd_l: int
  "Star Point:grounded:compensated:isolated"
  for_name: str
  "Foreign Key"
  cOptOnlyPre: int
  "Controls for Optimal Power Flow: Optimise in DC OPF:Pre- and post-fault position:Only pre-fault position"
  qsp_up: float
  "Upper Reactive Power Bound"
  Kpctrl2: float
  "Controller Sensitivity dtap/dP"
  c_plcc: object
  "External LCC Controller"
  usp_low2: float
  "Lower Voltage Bound"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  dpl4: float
  "dpl4"
  psetp: float
  "Active Power Setpoint"
  imldc2: str
  "Control Mode:V:P:Q"
  ciEarthed: int
  "Earthed"
  ldcrs2: float
  "LDC/Current Compounding Compensation: Rset"
  ldcrs: float
  "LDC/Current Compounding Compensation: Rset"
  outserv: int
  "Out of Service"
  Inom_l: float
  "LV-Side, Nominal Current"
  buslvn: object
  "LV-Neutral"
  ildc: int
  "Compensation:none:internal (LDC) line drop compensation:external (LDC) line drop compensation:current compounding"
  cosphib_lv: float
  "Values for LV-Side: Power factor"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  iSchemeStatus: int
  "Scheme Status"
  isMaxLoadSoftNlin: int
  "Penalty costs for soft constraints"
  c_pstac: object
  "External Station Controller"
  InomPre_h: float
  "HV-Side, Pre-fault Nominal Current"
  t2ldc2: int
  "Controlled Node is at:HV:LV"
  cntConstrType: int
  "Max. loading constraint for contingencies: Contingency-constraint type:Off:Soft constraint"
  pRating: object
  "Thermal Rating"
  appr_status: int
  "Approval Information: Status"
  Kpctrl: float
  "Controller Sensitivity dtap/dP"
  icomp2: int
  "LDC/Current Compounding Compensation: Compounding:apparent current:active current:reactive current:apparent power:active power:reactive power"
  cCtrlTapContOpf: int
  "Controls for Optimal Power Flow: Control Mode:discrete:continuous"
  ilcph2: int
  "Phase:a:b:c:a-b:b-c:c-a:Pos.Seq."
  t2ldc: int
  "Controlled Node is at:HV:LV:EXT"
  ildc2: int
  "Compensation:none:internal (LDC) line drop compensation:external (LDC) line drop compensation:current compounding"
  Tctrl: float
  "Controller Time Constant"
  Kpart2: float
  "Participation factor"
  FOR1: float
  "Failures Transformer Failures: Forced Outage Rate"
  usetp2: float
  "Voltage Setpoint"
  ilt_op: int
  "Long-term operating conditions before short-circuit are known"
  ldcct2: float
  "LDC/Current Compounding Compensation: Current Transformer Rating"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  scalingFacSoftConstrOpf: float
  "Max. loading constraint: Weighting factor for soft constraint penalty"
  pTypStoch: object
  "Failures: Type model"
  r0Sbasepu: float
  "r0 (Sbase)"
  charact: list
  "Charact."
  Ptolerance: float
  "Tolerance (+/-)"
  ldcxs2: float
  "LDC/Current Compounding Compensation: Xset"
  Vtolerance: float
  "LDC/Current Compounding Compensation: Tolerance (+/-)"
  p_rem2: object
  "Controlled Node"
  ntnum: int
  "Number of: parallel Transformers"
  allowMarginFilt: int
  "Constraint Filtering: Allow filtering by constraint margin"
  usp_low: float
  "Lower Voltage Bound"
  scalingFacSoftConstrCost: float
  "Penalty costs for soft constraints: Cost scaling factor"
  p_rem: object
  "Controlled Node"
  cAllowMarginFilt: int
  "Constraint Filtering: Allow filtering by constraint margin"
  sernum: str
  "Serial Number"
  p_pmeas2: object
  "P measured at"
  i_uoptCont2: int
  "Control Mode:discrete:continuous"
  cneutcon: int
  "Neutral Conductor: N-Connection"
  isConstrLoading: int
  "Max. loading constraint for Unit Commitment"
  FOE: float
  "Failures Transformer Failures: Forced Outage Expectancy"
  FOD: float
  "Failures Transformer Failures: Forced Outage Duration"
  pVccurve: object
  "LDC/Current Compounding Compensation: V-Control-Curve"
  nntapabs: int
  "Absolute Tap Position"
  maxload: float
  "Thermal Loading Limit: Max. loading"
  lossAssign: int
  "Loss assignment:according to grouping:uniformly distributed:to HV-Side:to LV-Side"
  Cg_h: float
  "Consider Capacitances: Capacitance HV-Ground"
  iPpart: int
  "Active power participation"
  gnrl_modby: str
  "Object modified by"
  dpl2: float
  "dpl2"
  icomp: int
  "LDC/Current Compounding Compensation: Compounding:apparent current:active current:reactive current:apparent power:active power:reactive power"
  cpeter_h: int
  "Internal Grounding Impedance, HV Side: Petersen Coil"
  ciLater: int
  "Lateral Index"
  cIsSepCntMaxAllowedLoading: int
  "Max. loading constraint for contingencies: Separate max. allowed loading"
  i_rem: int
  "Remote Control"
  psp_up: float
  "Upper Active Power Bound"
  PsiresA: float
  "Residual flux: Phase A"
  Inom_h_a: float
  "HV-Side, Nominal Current (act.)"
  tid_: int
  "TimeID"
  usetp: float
  "Voltage Setpoint"
  root_id: object
  "Original Location"
  iOPFCload: int
  "Max. loading constraint"
  i_eahv: int
  "HV-side, phase 2 internally grounded"
  i_cont2: int
  "Tap Changer:discrete:continuous"
  loc_name: str
  "Name"
  iperfect: int
  "Failures: Ideal component"
  cCtrlTapCont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  p_cub2: object
  "Controlled Branch (Cubicle)"
  Kqctrl: float
  "Controller Sensitivity dtap/dQ"


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def CreateEvent(*args):
    ...

  def Delete(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def PasteCopy(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def GetTapRatio(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetInom(*args):
    ...

  def GetTapPhi(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetSuppliedElements(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def IsQuadBooster(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def GetZ0pu(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def NTap(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetParent(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def GetZpu(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmTr3(Protocol):
  Cc0_hm: float
  "Consider Capacitances Winding to Winding, 0-Sequence: HV-MV"
  i_rem2: int
  "Remote Control"
  iblock: int
  "Unit Transformer"
  cPsiresC: float
  "Residual flux: Phase C"
  r0Sbasepu_m: float
  "r0(MV) (Sbase)"
  isCtrlTapHVPlacement: int
  "Controls for Optimal Equipment Placement: Tap Position HV-Side"
  psetp2: float
  "Active Power Setpoint"
  Kpart: float
  "Participation factor"
  iintgnd: int
  "External Star Point"
  Inom_m_a: float
  "MV-Side, Nominal Current (act.)"
  cCtrlTapHVContOpf: int
  "Controls for Optimal Power Flow: Control Mode:discrete:continuous"
  ignd_h: int
  "Star Point:grounded:compensated:isolated"
  dpl1: float
  "dpl1"
  input_cl: list
  "Values"
  cpOperator: object
  "Operator"
  isCtrlTapLVPlacement: int
  "Controls for Optimal Equipment Placement: Tap Position LV-Side"
  cimRdfId: list
  "RDF ID"
  mTaps: list
  "Tap: Measurement Report"
  cgnd_l: int
  "Internal Grounding Imp., LV Side: Star Point:Connected:Not connected"
  psp_up2: float
  "Upper Active Power Bound"
  optaplimit: int
  "Operational limits for tap changer"
  n3tapabs_h: int
  "Act. Position absolute"
  dpl5: float
  "dpl5"
  Snom_l_a: float
  "Thermal Rating: LV-Side, Nom.Power (act.)"
  Ptolerance2: float
  "Tolerance (+/-)"
  chr_name: str
  "Characteristic Name"
  i_tapopt_m: int
  "Controls for Optimal Power Flow: Tap Position MV-Side:Off:On:Part of external Tap Controller"
  PsiresB: float
  "Residual flux: Phase B"
  appr_modby: str
  "Approval Information: Modified by"
  xSbasepu_h: float
  "x(HV) (Sbase)"
  uset_mode2: int
  "Setpoint:local:bus target voltage"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  pVccurve2: object
  "LDC/Current Compounding Compensation: V-Control-Curve"
  bushvn: object
  "Neutral Conductor: HV-Neutral"
  qsp_low: float
  "Lower Reactive Power Bound"
  ratfac_l: float
  "Thermal Rating: LV-Side"
  t3ldc: int
  "Controlled Node is at:HV:MV:LV:EXT"
  ratfac_h: float
  "Thermal Rating: HV-Side"
  imldc: str
  "Control Mode:V:P:Q"
  ictrlside2: int
  "Controller for tap at:&-1&not defined:&0&HV-Side:&1&MV-Side:&2&LV-Side"
  xSbasepu_m: float
  "x(MV) (Sbase)"
  ionlyPre: int
  "Controls for Optimal Power Flow: Optimise in DC OPF:Pre- and post-fault position:Only pre-fault position"
  iIntTapCtrl: int
  "Tap: Use Integrated Tap Controller"
  appr_modif: int
  "Approval Information: Modified"
  uset_mode: int
  "Setpoint:local:bus target voltage"
  iResFlux: int
  "Residual flux"
  busmv: object
  "MV-Side"
  ciDist: int
  "Distance from infeed in number of buses"
  Inom_m: float
  "MV-Side, Nominal Current"
  cpBranch: object
  "Branch"
  i_mvcon: int
  "MV-side: Phase 2 connected"
  ntrcn: int
  "Automatic Tap Changing"
  i_hvcon: int
  "HV-side: Phase 2 connected"
  qsp_up2: float
  "Upper Reactive Power Bound"
  iPpart2: int
  "Active power participation"
  p_pmeas: object
  "P measured at"
  qsp_low2: float
  "Lower Reactive Power Bound"
  optapmax_l: int
  "Operational limits for tap changer Tap LV-Side: Maximum Position"
  pMeteo: object
  "Thermal Rating: Meteo. Station"
  buslv: object
  "LV-Side"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  optapmax_h: int
  "Operational limits for tap changer Tap HV-Side: Maximum Position"
  iAreaBus: int
  "Area"
  fr_coldload: int
  "Time-overcurrent plot: Cold Load Curve"
  Snom_h_a: float
  "Thermal Rating: HV-Side, Nom.Power (act.)"
  desc: list
  "Description"
  i_tapopt_l: int
  "Controls for Optimal Power Flow: Tap Position LV-Side:Off:On:Part of external Tap Controller"
  cUserDefIndex: int
  "User defined Index"
  sOpComment: list
  "Operator Comment"
  xe0l: float
  "Internal Grounding Imp., LV Side: Reactance, Xe"
  CCEarProb: float
  "Failures Double Earth Fault: Conditional probability of a second earth fault"
  pldc2: object
  "LDC/Current Compounding Compensation: External LDC"
  oid_: int
  "ObjectID"
  iComDate: int
  "Commissioning Date"
  nt3nm: int
  "Number of: parallel Transformers"
  iwinding: int
  "Time-overcurrent plot: Create Curve for:HV-MV:HV-LV:MV-LV"
  Snom_l: float
  "LV-Side, Nominal Power"
  gnrl_modif: int
  "Object modified"
  i_lvcon: int
  "LV-side: Phase 2 connected"
  pRating_m: object
  "Thermal Rating: MV-Side"
  ciEnergized: int
  "Energized"
  isConstrLoadingPlacement: int
  "Max. loading constraint for Optimal Equipment Placement"
  i_tapoptCont_m: int
  "Controls for Optimal Power Flow: Control Mode:discrete:continuous"
  iZoneBus: int
  "Zone"
  i_tapoptCont_l: int
  "Controls for Optimal Power Flow: Control Mode:discrete:continuous"
  i_neutmv: int
  "MV-side: Neutral Connection"
  pOwner: object
  "Owner"
  psp_low: float
  "Lower Active Power Bound"
  cpCtrlNode2: object
  "Target Node"
  busmvn: object
  "Neutral Conductor: MV-Neutral"
  cgnd_h: int
  "Internal Grounding Imp., HV Side: Star Point:Connected:Not connected"
  i_tapini_m: int
  "State Estimation: Estimate Tap Position MV-Side"
  n3tapabs_m: int
  "Act. Position absolute"
  dataExtDesc: list
  "Description"
  bSbasepu: float
  "b (Sbase)"
  x0Sbasepu_ml: float
  "x0(MV-LV) (Sbase)"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  psp_low2: float
  "Lower Active Power Bound"
  i_tapini_l: int
  "State Estimation: Estimate Tap Position LV-Side"
  x0Sbasepu_lh: float
  "x0(LV-HV) (Sbase)"
  iTaps: int
  "Tap: According to Measurement Report"
  allowCntConstrFilt: int
  "Constraint Filtering: Allow contingency filtering by number of critical constraints"
  dataExtUnit: list
  "Unit"
  iopt_hf: int
  "Consider Capacitances"
  i_neutlv: int
  "LV-side: Neutral Connection"
  PsiresC: float
  "Residual flux: Phase C"
  i_cont: int
  "Tap Changer:discrete:continuous"
  i_tapoptCont_h: int
  "Controls for Optimal Power Flow: Control Mode:discrete:continuous"
  Cc1_hm: float
  "Consider Capacitances Winding to Winding, 1-Sequence: HV-MV"
  cpMeteostat: object
  "Meteo Station"
  ictrlside: int
  "Controller for tap at:HV-Side:MV-Side:LV-Side"
  isSepCntConstrType: int
  "Max. loading constraint for contingencies: Separate constraint type"
  CCEarRepMu: float
  "Failures Double Earth Fault: Repair duration"
  bushv: object
  "HV-Side"
  Kqctrl2: float
  "Controller Sensitivity dtap/dQ"
  pOperator: object
  "Operator"
  cpeter_l: int
  "Internal Grounding Imp., LV Side: Petersen Coil"
  cpArea: object
  "Area"
  ifc: int
  "Forced Cooling Enabled"
  Tctrl2: float
  "Controller Time Constant"
  pT_h: str
  "Tap HV-Side: Voltage Range"
  isCtrlTapMVCont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  pldc: object
  "LDC/Current Compounding Compensation: External LDC"
  Inom_h: float
  "HV-Side, Nominal Current"
  Cc1_lh: float
  "Consider Capacitances Winding to Winding, 1-Sequence: LV-HV"
  iAstabint: int
  "A-stable integration algorithm"
  i_eamv: int
  "MV-side: Phase 2 internally grounded"
  ntrcn2: int
  "Automatic Tap Changing"
  cIsSepCntConstrType: int
  "Max. loading constraint for contingencies: Separate constraint type"
  constr: int
  "Year of Construction"
  t3ldc2: int
  "Controlled Node is at:HV:MV:LV"
  xSbasepu_l: float
  "x(LV) (Sbase)"
  cpSupplyTransformer: object
  "Supplying Transformer"
  Cg_l: float
  "Consider Capacitances Winding to Ground: LV-Ground"
  re0h: float
  "Internal Grounding Imp., HV Side: Resistance, Re"
  doc_id: object
  "Additional Data"
  Cc0_lh: float
  "Consider Capacitances Winding to Winding, 0-Sequence: LV-HV"
  ifrqft: int
  "Time-overcurrent plot: Frequent Fault ( >10(5)/lifetime, Category II(III) )"
  usp_up: float
  "Upper Voltage Bound"
  p_cub: object
  "Controlled Branch (Cubicle)"
  cpCtrlNode: object
  "Target Node"
  cAllowCntConstrFilt: int
  "Constraint Filtering: Allow contingency filtering by number of critical constraints"
  x0Sbasepu_m: float
  "x0(MV) (Sbase)"
  cCtrlTapMVContOpf: int
  "Controls for Optimal Power Flow: Control Mode:discrete:continuous"
  pid_: int
  "ProjectID"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  penaltyCosts: float
  "Controls for Optimal Power Flow: Penalty costs per Tap deviation"
  isCtrlTapLVCont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  pStoch: object
  "Failures: Element model"
  cpGrid: object
  "Grid"
  pT_l: str
  "Tap LV-Side: Voltage Range"
  cCtrlTapMVCont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  qsetp2: float
  "Reactive Power Setpoint"
  drawInr: int
  "Time-overcurrent plot: Draw Inrush Current"
  qdslCtrl: object
  "Quasi-Dynamic Model"
  isCtrlTapMVPlacement: int
  "Controls for Optimal Equipment Placement: Tap Position MV-Side"
  Inom_l_a: float
  "LV-Side, Nominal Current (act.)"
  n3tap_h: int
  "Tap HV-Side: Act. Position"
  i_ealv: int
  "LV-side: Phase 2 internally grounded"
  r0Sbasepu_ml: float
  "r0(MV-LV) (Sbase)"
  usp_up2: float
  "Upper Voltage Bound"
  fold_id: object
  "In Folder"
  isCtrlTapLV: int
  "Controls for Unit Commitment: Tap Position LV-Side:Off:On:Part of external Tap Controller"
  qsetp: float
  "Reactive Power Setpoint"
  dpl3: float
  "dpl3"
  Irze: list
  "Rated Current of Grounding"
  Cc0_ml: float
  "Consider Capacitances Winding to Winding, 0-Sequence: MV-LV"
  rSbasepu_hm: float
  "r(HV-MV) (Sbase)"
  iansish: int
  "Time-overcurrent plot: ANSI Curve Shift"
  isCtrlTapHV: int
  "Controls for Unit Commitment: Tap Position HV-Side:Off:On:Part of external Tap Controller"
  typ_id: object
  "Type"
  c_ptapc: object
  "External Tap Controller"
  rSbasepu_h: float
  "r(HV) (Sbase)"
  CCEarFr: float
  "Failures Double Earth Fault: Frequency of single earth faults"
  n3tap_l: int
  "Tap LV-Side: Act. Position"
  isSepCntMaxAllowedLoading: int
  "Max. loading constraint for contingencies: Separate max. allowed loading"
  iMeasLoc: int
  "Tap: Measured at:HV-Side:MV-Side:LV-Side"
  dat_src: str
  "Data source"
  r0Sbasepu_lh: float
  "r0(LV-HV) (Sbase)"
  cCtrlTapLVContOpf: int
  "Controls for Optimal Power Flow: Control Mode:discrete:continuous"
  x0Sbasepu_hm: float
  "x0(HV-MV) (Sbase)"
  xe0h: float
  "Internal Grounding Imp., HV Side: Reactance, Xe"
  tapctrl: object
  "Tap Controller"
  cntMaxAllowedLoading: float
  "Max. loading constraint for contingencies: Max. allowed loading in Contingencies"
  ilcph: int
  "Phase:a:b:c:a-b:b-c:c-a:Pos.Seq."
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  Vtolerance2: float
  "LDC/Current Compounding Compensation: Tolerance (+/-)"
  availFactor: float
  "Availability Factor"
  r0Sbasepu_hm: float
  "r0(HV-MV) (Sbase)"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  ignd_l: int
  "Star Point:grounded:compensated:isolated"
  for_name: str
  "Foreign Key"
  cOptOnlyPre: int
  "Controls for Optimal Power Flow: Optimise in DC OPF:Pre- and post-fault position:Only pre-fault position"
  qsp_up: float
  "Upper Reactive Power Bound"
  Kpctrl2: float
  "Controller Sensitivity dtap/dP"
  c_plcc: object
  "External LCC Controller"
  Snom_m: float
  "MV-Side, Nominal Power"
  cgnd_m: int
  "Internal Grounding Imp., MV Side: Star Point:Connected:Not connected"
  r0Sbasepu_l: float
  "r0(LV) (Sbase)"
  usp_low2: float
  "Lower Voltage Bound"
  x0Sbasepu_l: float
  "x0(LV) (Sbase)"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  psetp: float
  "Active Power Setpoint"
  dpl4: float
  "dpl4"
  imldc2: str
  "Control Mode:V:P:Q"
  rSbasepu_ml: float
  "r(MV-LV) (Sbase)"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  Inom_l: float
  "LV-Side, Nominal Current"
  buslvn: object
  "LV-Neutral"
  ildc: int
  "Compensation:none:external (LDC) line drop compensation:current compounding"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  xSbasepu_lh: float
  "x(LV-HV) (Sbase)"
  iSchemeStatus: int
  "Scheme Status"
  re0l: float
  "Internal Grounding Imp., LV Side: Resistance, Re"
  isCtrlTapHVCont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  isMaxLoadSoftNlin: int
  "Penalty costs for soft constraints"
  n3tap_m: int
  "Tap MV-Side: Act. Position"
  c_pstac: object
  "External Station Controller"
  cntConstrType: int
  "Max. loading constraint for contingencies: Contingency-constraint type:Off:Soft constraint"
  pRating: object
  "Thermal Rating"
  appr_status: int
  "Approval Information: Status"
  Kpctrl: float
  "Controller Sensitivity dtap/dP"
  icomp2: int
  "LDC/Current Compounding Compensation: Compounding:apparent current:active current:reactive current:apparent power:active power:reactive power"
  ilcph2: int
  "Phase:a:b:c:a-b:b-c:c-a:Pos.Seq."
  cpeter_m: int
  "Internal Grounding Imp., MV Side: Petersen Coil"
  ildc2: int
  "Compensation:none:external (LDC) line drop compensation:current compounding"
  Tctrl: float
  "Controller Time Constant"
  x0Sbasepu_h: float
  "x0(HV) (Sbase)"
  Kpart2: float
  "Participation factor"
  FOR1: float
  "Failures Transformer Failures: Forced Outage Rate"
  usetp2: float
  "Voltage Setpoint"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  scalingFacSoftConstrOpf: float
  "Max. loading constraint: Weighting factor for soft constraint penalty"
  pTypStoch: object
  "Failures: Type model"
  iMeasTap: int
  "Tap: for Tap at:HV-Side:MV-Side:LV-Side"
  pRating_l: object
  "Thermal Rating: LV-Side"
  i_tapini_h: int
  "State Estimation: Estimate Tap Position HV-Side"
  charact: list
  "Charact."
  Ptolerance: float
  "Tolerance (+/-)"
  n3tapabs_l: int
  "Act. Position absolute"
  Vtolerance: float
  "LDC/Current Compounding Compensation: Tolerance (+/-)"
  i_neuthv: int
  "HV-side: Neutral Connection"
  p_rem2: object
  "Controlled Node"
  Cg_m: float
  "Consider Capacitances Winding to Ground: MV-Ground"
  i_tapopt_h: int
  "Controls for Optimal Power Flow: Tap Position HV-Side:Off:On:Part of external Tap Controller"
  allowMarginFilt: int
  "Constraint Filtering: Allow filtering by constraint margin"
  usp_low: float
  "Lower Voltage Bound"
  re0m: float
  "Internal Grounding Imp., MV Side: Resistance, Re"
  cCtrlTapLVCont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  scalingFacSoftConstrCost: float
  "Penalty costs for soft constraints: Cost scaling factor"
  p_rem: object
  "Controlled Node"
  cAllowMarginFilt: int
  "Constraint Filtering: Allow filtering by constraint margin"
  sernum: str
  "Serial Number"
  p_pmeas2: object
  "P measured at"
  cneutcon: int
  "Neutral Conductor: N-Connection"
  optapmin_l: int
  "Operational limits for tap changer Tap LV-Side: Minimum Position"
  Cc1_ml: float
  "Consider Capacitances Winding to Winding, 1-Sequence: MV-LV"
  isConstrLoading: int
  "Max. loading constraint for Unit Commitment"
  FOE: float
  "Failures Transformer Failures: Forced Outage Expectancy"
  FOD: float
  "Failures Transformer Failures: Forced Outage Duration"
  pVccurve: object
  "LDC/Current Compounding Compensation: V-Control-Curve"
  maxload: float
  "Thermal Loading Limit: Max. loading"
  lossAssign: int
  "Loss assignment:according to grouping:uniformly distributed:to HV-Side:to MV-Side:to LV-Side"
  rSbasepu_lh: float
  "r(LV-HV) (Sbase)"
  xe0m: float
  "Internal Grounding Imp., MV Side: Reactance, Xe"
  pT_m: str
  "Tap MV-Side: Voltage Range"
  Cg_h: float
  "Consider Capacitances Winding to Ground: HV-Ground"
  iPpart: int
  "Active power participation"
  ignd_m: int
  "Star Point:grounded:compensated:isolated"
  gnrl_modby: str
  "Object modified by"
  dpl2: float
  "dpl2"
  icomp: int
  "LDC/Current Compounding Compensation: Compounding:apparent current:active current:reactive current:apparent power:active power:reactive power"
  cpeter_h: int
  "Internal Grounding Imp., HV Side: Petersen Coil"
  ciLater: int
  "Lateral Index"
  xSbasepu_hm: float
  "x(HV-MV) (Sbase)"
  cIsSepCntMaxAllowedLoading: int
  "Max. loading constraint for contingencies: Separate max. allowed loading"
  i_rem: int
  "Remote Control"
  optapmin_m: int
  "Operational limits for tap changer Tap MV-Side: Minimum Position"
  PsiresA: float
  "Residual flux: Phase A"
  psp_up: float
  "Upper Active Power Bound"
  Inom_h_a: float
  "HV-Side, Nominal Current (act.)"
  rSbasepu_m: float
  "r(MV) (Sbase)"
  cCtrlTapHVCont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  tid_: int
  "TimeID"
  usetp: float
  "Voltage Setpoint"
  pRating_h: object
  "Thermal Rating: HV-Side"
  isCtrlTapMV: int
  "Controls for Unit Commitment: Tap Position MV-Side:Off:On:Part of external Tap Controller"
  root_id: object
  "Original Location"
  iOPFCload: int
  "Max. loading constraint"
  i_eahv: int
  "HV-side: Phase 2 internally grounded"
  i_cont2: int
  "Tap Changer:discrete:continuous"
  xSbasepu_ml: float
  "x(MV-LV) (Sbase)"
  ratfac_m: float
  "Thermal Rating: MV-Side"
  Snom_h: float
  "HV-Side, Nominal Power"
  loc_name: str
  "Name"
  iperfect: int
  "Failures: Ideal component"
  rSbasepu_l: float
  "r(LV) (Sbase)"
  Snom_m_a: float
  "Thermal Rating: MV-Side, Nom.Power (act.)"
  optapmin_h: int
  "Operational limits for tap changer Tap HV-Side: Minimum Position"
  optapmax_m: int
  "Operational limits for tap changer Tap MV-Side: Maximum Position"
  p_cub2: object
  "Controlled Branch (Cubicle)"
  r0Sbasepu_h: float
  "r0(HV) (Sbase)"
  Kqctrl: float
  "Controller Sensitivity dtap/dQ"
  i_auto_hl: int
  "Auto Transformer:none:HV-LV:HV-MV:MV-LV"


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def CreateEvent(*args):
    ...

  def Delete(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetTapRatio(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetInom(*args):
    ...

  def GetTapPhi(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetTapZDependentSide(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetSuppliedElements(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def IsQuadBooster(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def GetZ0pu(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def NTap(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetParent(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def GetZpu(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmTr4(Protocol):
  pT_lv3: str
  "Tap LV3-Side: Voltage Range"
  cPsiresC: float
  "Residual flux: Phase C"
  i_tapini_lv3: int
  "State Estimation: Estimate Tap Position LV2-Side"
  x0Sbasepu_lv1: float
  "x0(LV1) (Sbase)"
  isCtrlTapHVPlacement: int
  "Controls for Optimal Equipment Placement: Tap Position HV-Side"
  Kpart: float
  "Participation factor"
  ntap_h0: int
  "Tap HV-Side: Act. Position"
  cCtrlTapHVContOpf: int
  "Controls for Optimal Power Flow: Control Mode:discrete:continuous"
  dpl1: float
  "dpl1"
  input_cl: list
  "Values"
  cpOperator: object
  "Operator"
  xSbasepu_l1l3: float
  "x(LV1-LV3) (Sbase)"
  cimRdfId: list
  "RDF ID"
  rSbasepu_h0l1: float
  "r(HV-LV1) (Sbase)"
  optaplimit: int
  "Operational limits for tap changer"
  dpl5: float
  "dpl5"
  pRating_lv1: object
  "Thermal Rating: LV1-Side"
  chr_name: str
  "Characteristic Name"
  Inom_l2: float
  "LV2-Side, Nominal Current"
  PsiresB: float
  "Residual flux: Phase B"
  appr_modby: str
  "Approval Information: Modified by"
  r0Sbasepu_lv3: float
  "r0(LV3) (Sbase)"
  Snom_l2: float
  "LV2-Side, Nominal Power"
  x0Sbasepu_lv2: float
  "x0(LV2) (Sbase)"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  qsp_low: float
  "Lower Reactive Power Bound"
  ratfac_l3: float
  "Thermal Rating: LV3-Side"
  imldc: str
  "Control Mode:V:P:Q"
  ratfac_l1: float
  "Thermal Rating: LV1-Side"
  ionlyPre: int
  "Controls for Optimal Power Flow: Optimise in DC OPF:Pre- and post-fault position:Only pre-fault position"
  r0Sbasepu_hv0: float
  "r0(HV) (Sbase)"
  iIntTapCtrl: int
  "Use Integrated Tap Controller"
  appr_modif: int
  "Approval Information: Modified"
  uset_mode: int
  "Setpoint:local:bus target voltage"
  iResFlux: int
  "Residual flux"
  nt4nm: int
  "Number of: parallel Transformers"
  rSbasepu_h0l3: float
  "r(HV-LV3) (Sbase)"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  re0lv1: float
  "Internal Grounding Imp., LV1 Side: Resistance, Re"
  ntrcn: int
  "Automatic Tap Changing"
  p_pmeas: object
  "P measured at"
  cpeter_lv3: int
  "Internal Grounding Imp., LV3 Side: Petersen Coil"
  cpeter_lv1: int
  "Internal Grounding Imp., LV1 Side: Petersen Coil"
  xSbasepu_h0l1: float
  "x(HV-LV1) (Sbase)"
  i_tapoptCont_hv0: int
  "Controls for Optimal Power Flow: Control Mode HV-Side:discrete:continuous"
  pMeteo: object
  "Thermal Rating: Meteo. Station"
  ignd_lv1: int
  "Star Point:grounded:compensated:isolated"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  x0Sbasepu_hv0: float
  "x0(HV) (Sbase)"
  iAreaBus: int
  "Area"
  fr_coldload: int
  "Time-overcurrent plot: Cold Load Curve"
  desc: list
  "Description"
  x0Sbasepu_h0l2: float
  "x0(HV-LV2) (Sbase)"
  cUserDefIndex: int
  "User defined Index"
  r0Sbasepu_l1l3: float
  "r0(LV1-LV3) (Sbase)"
  sOpComment: list
  "Operator Comment"
  CCEarProb: float
  "Failures Double Earth Fault: Conditional probability of a second earth fault"
  isCtrlTapLV2Cont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  oid_: int
  "ObjectID"
  rSbasepu_lv1: float
  "r(LV1) (Sbase)"
  cgnd_lv2: int
  "Internal Grounding Imp., LV2 Side: Star Point:Connected:Not connected"
  iComDate: int
  "Commissioning Date"
  iwinding: int
  "Time-overcurrent plot: Create Curve for:HV-LV1:HV-LV2:HV-LV3:LV1-LV2:LV1-LV3:LV2-LV3"
  gnrl_modif: int
  "Object modified"
  ntap_l3: int
  "Tap LV3-Side: Act. Position"
  ciEnergized: int
  "Energized"
  isConstrLoadingPlacement: int
  "Max. loading constraint for Optimal Equipment Placement"
  rSbasepu_lv3: float
  "r(LV3) (Sbase)"
  x0Sbasepu_l2l3: float
  "x0(LV2-LV3) (Sbase)"
  iZoneBus: int
  "Zone"
  optapmax_l3: int
  "Operational limits for tap changer Tap LV3-Side: Maximum Position"
  pOwner: object
  "Owner"
  Inom_h0: float
  "HV-Side, Nominal Current"
  i_tapopt_hv0: int
  "Controls for Optimal Power Flow: Tap Position HV-Side:Off:On:Part of external Tap Controller"
  Inom_l2_a: float
  "LV2-Side, Nominal Current (act.)"
  busl3: object
  "LV3-Side"
  i_tapoptCont_lv2: int
  "Controls for Optimal Power Flow: Control Mode LV2-Side:discrete:continuous"
  psp_low: float
  "Lower Active Power Bound"
  i_tapopt_lv3: int
  "Controls for Optimal Power Flow: Tap Position LV3-Side:Off:On:Part of external Tap Controller"
  bush0: object
  "HV-Side"
  lodt3: str
  "Type Load"
  optapmin_h0: int
  "Operational limits for tap changer Tap HV-Side: Minimum Position"
  re0lv2: float
  "Internal Grounding Imp., LV2 Side: Resistance, Re"
  bSbasepu: float
  "b (Sbase)"
  dataExtDesc: list
  "Description"
  t4ldc: int
  "Controlled Node is at:HV:LV1:LV2:LV3:EXT"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  optapmax_h0: int
  "Operational limits for tap changer Tap HV-Side: Maximum Position"
  allowCntConstrFilt: int
  "Constraint Filtering: Allow contingency filtering by number of critical constraints"
  ratfac_l2: float
  "Thermal Rating: LV2-Side"
  dataExtUnit: list
  "Unit"
  PsiresC: float
  "Residual flux: Phase C"
  i_cont: int
  "Tap Changer:discrete:continuous"
  cgnd_hv0: int
  "Internal Grounding Imp., HV Side: Star Point:Connected:Not connected"
  isCtrlTapLV3Placement: int
  "Controls for Optimal Equipment Placement: Tap Position LV3-Side"
  cpMeteostat: object
  "Meteo Station"
  ictrlside: int
  "Controller for tap at:HV-Side:LV1-Side:LV2-Side:LV3-Side"
  isSepCntConstrType: int
  "Max. loading constraint for contingencies: Separate constraint type"
  CCEarRepMu: float
  "Failures Double Earth Fault: Repair duration"
  cgnd_lv3: int
  "Internal Grounding Imp., LV3 Side: Star Point:Connected:Not connected"
  pOperator: object
  "Operator"
  xSbasepu_lv1: float
  "x(LV1) (Sbase)"
  cpArea: object
  "Area"
  ifc: int
  "Forced Cooling Enabled"
  i_tapini_hv0: int
  "State Estimation: Estimate Tap Position HV-Side"
  i_tapoptCont_lv3: int
  "Controls for Optimal Power Flow: Control Mode LV3-Side:discrete:continuous"
  ignd_lv2: int
  "Star Point:grounded:compensated:isolated"
  pldc: object
  "LDC/Current Compounding Compensation: External LDC"
  iAstabint: int
  "A-stable integration algorithm"
  isCtrlTapLV3Cont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  cIsSepCntConstrType: int
  "Max. loading constraint for contingencies: Separate constraint type"
  constr: int
  "Year of Construction"
  i_tapini_lv1: int
  "State Estimation: Estimate Tap Position LV1-Side"
  ignd_hv0: int
  "Star Point:grounded:compensated:isolated"
  cpSupplyTransformer: object
  "Supplying Transformer"
  re0lv3: float
  "Internal Grounding Imp., LV3 Side: Resistance, Re"
  ignd_lv3: int
  "Star Point:grounded:compensated:isolated"
  ntapabs_h0: int
  "Act. Position absolute"
  doc_id: object
  "Additional Data"
  ifrqft: int
  "Time-overcurrent plot: Frequent Fault ( >10(5)/lifetime, Category II(III) )"
  usp_up: float
  "Upper Voltage Bound"
  p_cub: object
  "Controlled Branch (Cubicle)"
  cpCtrlNode: object
  "Target Node"
  r0Sbasepu_l1l2: float
  "r0(LV1-LV2) (Sbase)"
  cAllowCntConstrFilt: int
  "Constraint Filtering: Allow contingency filtering by number of critical constraints"
  pid_: int
  "ProjectID"
  isCtrlTapLV1Placement: int
  "Controls for Optimal Equipment Placement: Tap Position LV1-Side"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  penaltyCosts: float
  "Controls for Optimal Power Flow: Penalty costs per Tap deviation"
  cpSite: object
  "Site"
  Inom_l3: float
  "LV3-Side, Nominal Current"
  cpSubstat: object
  "Substation"
  pStoch: object
  "Failures: Element model"
  cpGrid: object
  "Grid"
  Snom_l2_a: float
  "Thermal Rating: LV2-Side, Nom.Power (act.)"
  nt3rl: list
  "Pointer to relays"
  pRating_hv0: object
  "Thermal Rating: HV-Side"
  ntap_l2: int
  "Tap LV2-Side: Act. Position"
  drawInr: int
  "Time-overcurrent plot: Draw Inrush Current"
  qdslCtrl: object
  "Quasi-Dynamic Model"
  re0hv0: float
  "Internal Grounding Imp., HV Side: Resistance, Re"
  xSbasepu_lv2: float
  "x(LV2) (Sbase)"
  xSbasepu_l2l3: float
  "x(LV2-LV3) (Sbase)"
  i_tapopt_lv1: int
  "Controls for Optimal Power Flow: Tap Position LV1-Side:Off:On:Part of external Tap Controller"
  x0Sbasepu_lv3: float
  "x0(LV3) (Sbase)"
  cgnd_lv1: int
  "Internal Grounding Imp., LV1 Side: Star Point:Connected:Not connected"
  busl2: object
  "LV2-Side"
  xe0lv3: float
  "Internal Grounding Imp., LV3 Side: Reactance, Xe"
  fold_id: object
  "In Folder"
  dpl3: float
  "dpl3"
  qsetp: float
  "Reactive Power Setpoint"
  ntapabs_l2: int
  "Act. Position absolute"
  Irze: list
  "Rated Current of Grounding"
  busl1: object
  "LV1-Side"
  rSbasepu_l1l3: float
  "r(LV1-LV3) (Sbase)"
  iansish: int
  "Time-overcurrent plot: ANSI Curve Shift"
  Inom_l3_a: float
  "LV3-Side, Nominal Current (act.)"
  isCtrlTapHV: int
  "Controls for Unit Commitment: Tap Position HV-Side:Off:On:Part of external Tap Controller"
  rSbasepu_hv0: float
  "r(HV) (Sbase)"
  r0Sbasepu_h0l2: float
  "r0(HV-LV2) (Sbase)"
  typ_id: object
  "Type"
  c_ptapc: object
  "External Tap Controller"
  cCtrlTapLV3Cont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  isCtrlTapLV3: int
  "Controls for Unit Commitment: Tap Position LV3-Side:Off:On:Part of external Tap Controller"
  x0Sbasepu_l1l2: float
  "x0(LV1-LV2) (Sbase)"
  CCEarFr: float
  "Failures Double Earth Fault: Frequency of single earth faults"
  isSepCntMaxAllowedLoading: int
  "Max. loading constraint for contingencies: Separate max. allowed loading"
  dat_src: str
  "Data source"
  x0Sbasepu_h0l1: float
  "x0(HV-LV1) (Sbase)"
  tapctrl: object
  "Tap Controller"
  cCtrlTapLV3ContOpf: int
  "Controls for Optimal Power Flow: Control Mode:discrete:continuous"
  cntMaxAllowedLoading: float
  "Max. loading constraint for contingencies: Max. allowed loading in Contingencies"
  xe0hv0: float
  "Internal Grounding Imp., HV Side: Reactance, Xe"
  i_tapopt_lv2: int
  "Controls for Optimal Power Flow: Tap Position LV2-Side:Off:On:Part of external Tap Controller"
  ilcph: int
  "Phase:a:b:c:a-b:b-c:c-a:Pos.Seq."
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  ratfac_h0: float
  "Thermal Rating: HV-Side"
  availFactor: float
  "Availability Factor"
  Snom_h0: float
  "HV-Side, Nominal Power"
  r0Sbasepu_h0l3: float
  "r0(HV-LV3) (Sbase)"
  cCtrlTapLV1ContOpf: int
  "Controls for Optimal Power Flow: Control Mode:discrete:continuous"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  for_name: str
  "Foreign Key"
  cOptOnlyPre: int
  "Controls for Optimal Power Flow: Optimise in DC OPF:Pre- and post-fault position:Only pre-fault position"
  qsp_up: float
  "Upper Reactive Power Bound"
  Snom_l1: float
  "LV1-Side, Nominal Power"
  c_plcc: object
  "External LCC Controller"
  cCtrlTapLV2Cont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  dpl4: float
  "dpl4"
  psetp: float
  "Active Power Setpoint"
  Snom_l3: float
  "LV3-Side, Nominal Power"
  ntapabs_l1: int
  "Act. Position absolute"
  ciEarthed: int
  "Earthed"
  Inom_l1_a: float
  "LV1-Side, Nominal Current (act.)"
  xe0lv2: float
  "Internal Grounding Imp., LV2 Side: Reactance, Xe"
  outserv: int
  "Out of Service"
  optapmin_l3: int
  "Operational limits for tap changer Tap LV3-Side: Minimum Position"
  ntap_l1: int
  "Tap LV1-Side: Act. Position"
  isCtrlTapLV1: int
  "Controls for Unit Commitment: Tap Position LV1-Side:Off:On:Part of external Tap Controller"
  ildc: int
  "Compensation:none:external (LDC) line drop compensation:current compounding"
  xSbasepu_lv3: float
  "x(LV3) (Sbase)"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  iSchemeStatus: int
  "Scheme Status"
  x0Sbasepu_h0l3: float
  "x0(HV-LV3) (Sbase)"
  isCtrlTapHVCont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  isMaxLoadSoftNlin: int
  "Penalty costs for soft constraints"
  xSbasepu_h0l3: float
  "x(HV-LV3) (Sbase)"
  c_pstac: object
  "External Station Controller"
  rSbasepu_l1l2: float
  "r(LV1-LV2) (Sbase)"
  cntConstrType: int
  "Max. loading constraint for contingencies: Contingency-constraint type:Off:Soft constraint"
  appr_status: int
  "Approval Information: Status"
  cpeter_lv2: int
  "Internal Grounding Imp., LV2 Side: Petersen Coil"
  Kpctrl: float
  "Controller Sensitivity dtap/dP"
  Tctrl: float
  "Controller Time Constant"
  FOR1: float
  "Failures Transformer Failures: Forced Outage Rate"
  xSbasepu_hv0: float
  "x(HV) (Sbase)"
  pT_lv2: str
  "Tap LV2-Side: Voltage Range"
  pRating_lv3: object
  "Thermal Rating: LV3-Side"
  i_tapini_lv2: int
  "State Estimation: Estimate Tap Position LV2-Side"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  Snom_l3_a: float
  "Thermal Rating: LV3-Side, Nom.Power (act.)"
  cpZone: object
  "Zone"
  r0Sbasepu_lv2: float
  "r0(LV2) (Sbase)"
  scalingFacSoftConstrOpf: float
  "Max. loading constraint: Weighting factor for soft constraint penalty"
  pTypStoch: object
  "Failures: Type model"
  Inom_h0_a: float
  "HV-Side, Nominal Current (act.)"
  charact: list
  "Charact."
  xe0lv1: float
  "Internal Grounding Imp., LV1 Side: Reactance, Xe"
  cCtrlTapLV2ContOpf: int
  "Controls for Optimal Power Flow: Control Mode:discrete:continuous"
  Ptolerance: float
  "Tolerance (+/-)"
  Inom_l1: float
  "LV1-Side, Nominal Current"
  optapmin_l2: int
  "Operational limits for tap changer Tap LV2-Side: Minimum Position"
  Vtolerance: float
  "LDC/Current Compounding Compensation: Tolerance (+/-)"
  optapmax_l2: int
  "Operational limits for tap changer Tap LV2-Side: Maximum Position"
  rSbasepu_h0l2: float
  "r(HV-LV2) (Sbase)"
  pRating_lv2: object
  "Thermal Rating: LV2-Side"
  pT_hv0: str
  "Tap HV-Side: Voltage Range"
  allowMarginFilt: int
  "Constraint Filtering: Allow filtering by constraint margin"
  pT_lv1: str
  "Tap LV1-Side: Voltage Range"
  usp_low: float
  "Lower Voltage Bound"
  optapmax_l1: int
  "Operational limits for tap changer Tap LV1-Side: Maximum Position"
  scalingFacSoftConstrCost: float
  "Penalty costs for soft constraints: Cost scaling factor"
  xSbasepu_h0l2: float
  "x(HV-LV2) (Sbase)"
  isCtrlTapLV1Cont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  p_rem: object
  "Controlled Node"
  cAllowMarginFilt: int
  "Constraint Filtering: Allow filtering by constraint margin"
  sernum: str
  "Serial Number"
  isConstrLoading: int
  "Max. loading constraint for Unit Commitment"
  cCtrlTapLV1Cont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  FOE: float
  "Failures Transformer Failures: Forced Outage Expectancy"
  FOD: float
  "Failures Transformer Failures: Forced Outage Duration"
  pVccurve: object
  "LDC/Current Compounding Compensation: V-Control-Curve"
  x0Sbasepu_l1l3: float
  "x0(LV1-LV3) (Sbase)"
  i_tapoptCont_lv1: int
  "Controls for Optimal Power Flow: Control Mode LV1-Side:discrete:continuous"
  maxload: float
  "Thermal Loading Limit: Max. loading"
  lossAssign: int
  "Loss assignment:according to grouping:uniformly distributed:to HV-Side:to LV1-Side:to LV2-Side:to LV3-Side"
  rSbasepu_l2l3: float
  "r(LV2-LV3) (Sbase)"
  iPpart: int
  "Active power participation"
  optapmin_l1: int
  "Operational limits for tap changer Tap LV1-Side: Minimum Position"
  r0Sbasepu_h0l1: float
  "r0(HV-LV1) (Sbase)"
  isCtrlTapLV2: int
  "Controls for Unit Commitment: Tap Position LV2-Side:Off:On:Part of external Tap Controller"
  Snom_h0_a: float
  "Thermal Rating: HV-Side, Nom.Power (act.)"
  dpl2: float
  "dpl2"
  rSbasepu_lv2: float
  "r(LV2) (Sbase)"
  gnrl_modby: str
  "Object modified by"
  icomp: int
  "LDC/Current Compounding Compensation: Compounding:apparent current:active current:reactive current:apparent power:active power:reactive power"
  ciLater: int
  "Lateral Index"
  Snom_l1_a: float
  "Thermal Rating: LV1-Side, Nom.Power (act.)"
  cIsSepCntMaxAllowedLoading: int
  "Max. loading constraint for contingencies: Separate max. allowed loading"
  i_rem: int
  "Remote Control"
  psp_up: float
  "Upper Active Power Bound"
  PsiresA: float
  "Residual flux: Phase A"
  cCtrlTapHVCont: int
  "Controls for Unit Commitment: Control Mode:discrete:continuous"
  isCtrlTapLV2Placement: int
  "Controls for Optimal Equipment Placement: Tap Position LV2-Side"
  tid_: int
  "TimeID"
  usetp: float
  "Voltage Setpoint"
  root_id: object
  "Original Location"
  iOPFCload: int
  "Max. loading constraint"
  r0Sbasepu_l2l3: float
  "r0(LV2-LV3) (Sbase)"
  xSbasepu_l1l2: float
  "x(LV1-LV2) (Sbase)"
  ntapabs_l3: int
  "Act. Position absolute"
  cpeter_hv0: int
  "Internal Grounding Imp., HV Side: Petersen Coil"
  loc_name: str
  "Name"
  iperfect: int
  "Failures: Ideal component"
  Kqctrl: float
  "Controller Sensitivity dtap/dQ"
  r0Sbasepu_lv1: float
  "r0(LV1) (Sbase)"


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def CreateEvent(*args):
    ...

  def Delete(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def PasteCopy(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def GetTapRatio(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetInom(*args):
    ...

  def GetTapPhi(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetTapZDependentSide(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetSuppliedElements(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def IsQuadBooster(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def GetZ0pu(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def NTap(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetParent(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def GetZpu(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmTrain(Protocol):
  typ_id: object
  "Type"
  qini_a: float
  "Q(act.)"
  cpOperator: object
  "Operator"
  cimRdfId: list
  "RDF ID"
  cosini: float
  "Traction/Recuperation: Power Factor"
  dat_src: str
  "Data source"
  speed: float
  "Traction/Recuperation: Speed"
  chr_name: str
  "Characteristic Name"
  speed_a: float
  "Speed(act.)"
  appr_modby: str
  "Approval Information: Modified by"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  pf_coninj: int
  "Traction/Recuperation: Power Factor:Q consumption:Q injection"
  cosini_a: float
  "cos(phi)(act.)"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  pini: float
  "Traction/Recuperation: Active Power"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  paux: float
  "Auxiliary Power: Auxiliary Active Power"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  position: float
  "Location for train simulation: Position"
  oid_: int
  "ObjectID"
  phtech: str
  "Technology"
  iComDate: int
  "Commissioning Date"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  qini: float
  "Traction/Recuperation: Reactive Power"
  pOwner: object
  "Owner"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  mode_inp: str
  "Traction/Recuperation: Input Mode"
  dataExtUnit: list
  "Unit"
  cosaux: float
  "Auxiliary Power: Auxiliary Power Factor"
  cpMeteostat: object
  "Meteo Station"
  pOperator: object
  "Operator"
  cpArea: object
  "Area"
  sernum: str
  "Serial Number"
  bus1: object
  "Terminal"
  constr: int
  "Year of Construction"
  cpSupplyTransformer: object
  "Supplying Transformer"
  doc_id: object
  "Additional Data"
  pini_a: float
  "P(act.)"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  location: object
  "Location for train simulation: Location"
  paux_a: float
  "Paux(act.)"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def SetPosition(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmTrb(Protocol):
  Irze: float
  "Rated Current of Grounding"
  nphases: int
  "No. of Phases:1:3"
  iintgnd: int
  "Neutral Connection"
  typ_id: object
  "Type"
  cpOperator: object
  "Operator"
  cgnd_l: int
  "Grounding Impedance, LV Side: Star Point:Connected:Not connected"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  ratfac: float
  "Rating Factor"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  xe0tr_l: float
  "Grounding Impedance, LV Side: Xe"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  appr_modif: int
  "Approval Information: Modified"
  ignd_l: int
  "Star Point:grounded:compensated:isolated"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  pMeteo: object
  "Meteo. Station"
  buslv: object
  "Terminal LV"
  Inom_l: float
  "LV-Side, Nominal Current"
  outserv: int
  "Out of Service"
  buslvn: object
  "Neutral Conductor: LV-Neutral"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  iAreaBus: int
  "Area"
  Snom: float
  "Nominal Power"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  oid_: int
  "ObjectID"
  iComDate: int
  "Commissioning Date"
  pRating: object
  "Thermal Rating"
  re0tr_l: float
  "Grounding Impedance, LV Side: Re"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  iZoneBus: int
  "Zone"
  pOwner: object
  "Owner"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  bushv1: object
  "Terminal HVi"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  cpeter_l: int
  "Grounding Impedance, LV Side: Petersen Coil"
  ntnum: int
  "Number of: parallel Transformers"
  cpArea: object
  "Area"
  pOperator: object
  "Operator"
  buslv2: object
  "Terminal LVj"
  sernum: str
  "Serial Number"
  Inom_h: float
  "HV-Side, Nominal Current"
  cneutcon: int
  "Neutral Conductor: N-Connection"
  constr: int
  "Year of Construction"
  cpSupplyTransformer: object
  "Supplying Transformer"
  maxload: float
  "Thermal Loading Limit: Max. Loading"
  doc_id: object
  "Additional Data"
  Snom_a: float
  "Nominal Power (act.)"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  Inom_h_a: float
  "HV-Side, Nominal Current (act.)"
  bushv2: object
  "Terminal HVj"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  Inom_l_a: float
  "LV-Side, Nominal Current"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmTrfstat(Protocol):
  WorkDist: float
  "Working Distance"
  cimRdfId: list
  "RDF ID"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  pSwSc: object
  "Switching Rules: Active Rules"
  appr_modby: str
  "Approval Information: Modified by"
  DcBoxType: int
  "Enclosure type:Panelboard:LV switchgear:MV switchgear"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  pArea: object
  "Default Area"
  AccessTime: float
  "Access Times of Switches: Access Time"
  BoxDepth: float
  "Dimensions of enclosure: Depth"
  pBusbar: object
  "Busbar"
  BoxWidth: float
  "Dimensions of enclosure: Width"
  Unom: float
  "Nominal Voltage"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  icolor: int
  "Colour"
  cUnom: float
  "Nominal Voltage"
  cpHeadFold: object
  "Head Folder"
  cpSupplySubstation: object
  "Supplying Substation"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  iBoxed: int
  "Enclosure:Open air:Boxed"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  Electrodes: str
  "Electrode configuration"
  gnrl_modif: int
  "Object modified"
  pOwner: object
  "Default Owner"
  Xfactor: float
  "Distance Factor"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  CondGap: float
  "Conductor Gap"
  pOperator: object
  "Default Operator"
  BoxHeight: float
  "Dimensions of enclosure: Height"
  constr: int
  "Year of Construction"
  cpSupplyTransformer: object
  "Supplying Transformer"
  gnrl_modby: str
  "Object modified by"
  pZone: object
  "Default Zone"
  pDiagram: object
  "Diagram"
  pid_: int
  "ProjectID"
  LocAccTime: float
  "Access Times of Switches: Local Access Time"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  sType: str
  "Type"
  fold_id: object
  "In Folder"
  sShort: str
  "Short Name"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetSuppliedElements(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSplitIndex(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def SaveAsSwSc(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetSplitCal(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSplit(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmVac(Protocol):
  Irze: list
  "Rated Current of Grounding"
  X0: float
  "Zero Sequence: Reactance, X0"
  iHmcType: int
  "Type of Harmonic Voltages"
  Qzload: float
  "Load, Z = const.: Reactive Power"
  cpOperator: object
  "Operator"
  cimRdfId: list
  "RDF ID"
  fchardu: object
  "Frequency Sweep Calculation only: Frequency Dependency"
  dat_src: str
  "Data source"
  umag_iec2: list
  "U_h"
  chr_name: str
  "Characteristic Name"
  Pload: float
  "Load, P,Q = const.: Active Power"
  ifreqs_iec2: list
  "Harm. Order"
  fcharR1: object
  "Frequency Dependencies: R1(f)"
  appr_modby: str
  "Approval Information: Modified by"
  Pgen: float
  "Generated Power: Active Power"
  fchardphi: object
  "Frequency Sweep Calculation only: Frequency Dependency"
  manuf: str
  "Manufacturer"
  Unnom: float
  "Nominal Voltage: Line-Ground"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  dphidf: float
  "Frequency Sweep Calculation only: Spectral Density of Voltage Angle"
  L0: float
  "Frequency Dependencies: Inductance, L0"
  Unom: float
  "Nominal Voltage: Line-Line"
  nphase: int
  "No. of Phases:1:2:3"
  usetp0: float
  "Zero Sequence: Voltage, Magnitude"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  Qload: float
  "Load, P,Q = const.: Reactive Power"
  leadUinput: int
  "Parameter event can be applied to: Voltage input"
  appr_modif: int
  "Approval Information: Modified"
  tdss: float
  "Time Constants: Td''"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  R1s: float
  "Positive Sequence Transient: Resistance, R1s"
  cpBranch: object
  "Branch"
  iztreqz: int
  "Positive Sequence: Transient = Subtransient Impedance"
  itype: int
  "Type:Voltage Source:Ideal RC-Source:Ward Equivalent:Extended Ward Equivalent"
  dudf: float
  "Frequency Sweep Calculation only: Spectral Density of Voltage Magnitude"
  fcharL1: object
  "Frequency Dependencies: L1(f)"
  L1: float
  "Frequency Dependencies: Inductance, L1"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  fcharR2: object
  "Frequency Dependencies: R2(f)"
  c_pmod: object
  "Model"
  fcharL0: object
  "Frequency Dependencies: L0(f)"
  ciEarthed: int
  "Earthed"
  phisetp2: float
  "Negative Sequence: Voltage, Angle"
  Ikd: float
  "Steady-State Shc. Current: Ikd"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  desc: list
  "Description"
  X1: float
  "Positive Sequence: Reactance, X1"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  ifreq: float
  "Frequency/Nominal Frequency"
  L2: float
  "Frequency Dependencies: Inductance, L2"
  oid_: int
  "ObjectID"
  iComDate: int
  "Commissioning Date"
  curpreld: float
  "Preload Conditions: Current"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  u0_phase: list
  "u0, Ang."
  usetp2: float
  "Negative Sequence: Voltage, Magnitude"
  Pzload: float
  "Load, Z = const.: Active Power"
  pOwner: object
  "Owner"
  Qgen: float
  "Generated Power: Reactive Power"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  phiSlackRef: float
  "Used for Co-simulation: Initial rotor angle"
  u0_mag: list
  "u0, Mag."
  matZ: list
  "Frequency related impedances (Positive, Negative and Zero sequence)"
  phisetp: float
  "Positive Sequence: Voltage, Angle"
  charact: list
  "Charact."
  p_uctrl: object
  "Positive Sequence External Controller for: Voltage Control"
  cosimModel: int
  "Used for Co-simulation"
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  iPossibleSlack: int
  "Can be considered as a potential slack"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  usetp: float
  "Positive Sequence: Voltage, Magnitude"
  X2: float
  "Negative Sequence: Reactance, X2"
  pOperator: object
  "Operator"
  cpArea: object
  "Area"
  freq: float
  "Frequency"
  fcharR0: object
  "Frequency Dependencies: R0(f)"
  sernum: str
  "Serial Number"
  phiiniRef: float
  "Used for Co-simulation: Initial angle of bus voltage"
  X1s: float
  "Positive Sequence Transient: Reactance, X1s"
  Kpf: float
  "Prim. Frequency Bias"
  fcharL2: object
  "Frequency Dependencies: L2(f)"
  iAstabint: int
  "A-stable integration algorithm"
  Rext: float
  "Extended Ward: Resistance"
  bus1: object
  "Terminal"
  constr: int
  "Year of Construction"
  cpSupplyTransformer: object
  "Supplying Transformer"
  cfreqs: list
  "Frequency"
  tds: float
  "Time Constants: Td'"
  cosimCtrlType: int
  "Control type for co-simulation model."
  doc_id: object
  "Additional Data"
  u2_mag: list
  "u2, Mag."
  ifreqs: list
  "Harm. Order"
  u2_phase: list
  "u2, Ang."
  cospreld: float
  "Preload Conditions: Power Factor"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  leadFinput: int
  "Parameter event can be applied to: Frequency input:F0Hz (in Hz):f0 (in p.u.)"
  phisetp0: float
  "Zero Sequence: Voltage, Angle"
  cpSite: object
  "Site"
  R1: float
  "Positive Sequence: Resistance, R1"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  R0: float
  "Zero Sequence: Resistance, R0"
  Xext: float
  "Extended Ward: Reactance"
  R2: float
  "Negative Sequence: Resistance, R2"
  c_psecc: object
  "Ext. Secondary Controller"
  p_phictrl: object
  "Positive Sequence External Controller for: Angle Control"
  root_id: object
  "Original Location"
  u1_phase: list
  "u1, Ang."
  qdslCtrl: object
  "Quasi-Dynamic Model"
  iFreZ: int
  "Use Frequency Related Impedance for X/R Ratio Calculation"
  loc_name: str
  "Name"
  umag_iec1: list
  "U_h"
  Ksf: float
  "Sec. Frequency Bias"
  u1_mag: list
  "u1, Mag."
  fold_id: object
  "In Folder"
  contbar: object
  "Positive Sequence: Controlled Node"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmVoltreg(Protocol):
  Irze: list
  "Rated current of grounding"
  iintgnd: int
  "Neutral connection"
  nntap2: int
  "Tap changer: Tap 2 position"
  pcReglim: int
  "Tap changer: Limit (in % of max. range):100%:87.5%:75%:62.5%:50%"
  pcReglimMin: int
  "Tap changer: Limit (in % of max. range):100%:87.5%:75%:62.5%:50%"
  bussl: object
  "Neutral conductor: SL-Neutral"
  typ_id: object
  "Type"
  cpOperator: object
  "Operator"
  cimRdfId: list
  "RDF ID"
  CCEarFr: float
  "Failures Double Earth Fault: Frequency of single earth faults"
  buss: object
  "S-Side"
  isSepCntMaxAllowedLoading: int
  "Max. loading constraint for contingencies: Separate max. allowed loading"
  dat_src: str
  "Data source"
  xe0: float
  "Internal grounding impedance: Reactance, Xe"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  ldc_lmlow: float
  "Controller, tap changer: Lower"
  cntMaxAllowedLoading: float
  "Max. loading constraint for contingencies: Max. allowed loading in Contingencies"
  ilcph: int
  "Controller, tap changer: Phase:a:b:c:a-b:b-c:c-a:Pos.Seq."
  InomPre: float
  "Pre-fault nominal current"
  ratfac: float
  "Rating factor"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  ildcRev: int
  "Reverse power operation: Line drop compensation (LDC):none:internal"
  availFactor: float
  "Availability Factor"
  Inom_a: float
  "Nominal current (act.)"
  busl: object
  "L-Side"
  Inom: float
  "Nominal current"
  ldcrxcomp: int
  "Controller, tap changer: Internally adjust Rset, Xset for closed- and open-delta configurations"
  ionlyPre: int
  "Controls for Optimal Power Flow: Optimise in DC OPF:Pre- and post-fault position:Only pre-fault position"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  isCtrlTapCont: int
  "Tap Changer: Control Mode:discrete:continuous"
  appr_modif: int
  "Approval Information: Modified"
  iIntTapCtrl: int
  "Tap changer: Use integrated tap controller"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  ntrcn: int
  "Controller, tap changer: Automatic tap changing"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  usetpRev: float
  "Reverse power operation: Voltage setpoint"
  i_uopt: int
  "Controls for Optimal Power Flow: Tap Changer"
  igang: int
  "Tap changer: Gang operated taps"
  ldcxs: float
  "Controller, tap changer: Xset"
  ciEarthed: int
  "Earthed"
  pMeteo: object
  "Meteo. Station"
  cgnd: int
  "Internal grounding impedance: Star point:Connected:Not connected"
  ldcrs: float
  "Controller, tap changer: Rset"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  iAreaBus: int
  "Area"
  dutap: float
  "Tap changer: Additional voltage per tap"
  Snom: float
  "Nominal Power"
  ildc: int
  "Controller, tap changer: Line drop compensation (LDC):none:internal"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  sOpComment: list
  "Operator comment"
  i_uoptCont: int
  "Controls for Optimal Power Flow: Control mode:discrete:continuous"
  ldc_deadband: float
  "Controller, tap changer: Deadband"
  CCEarProb: float
  "Failures Double Earth Fault: Conditional probability of a second earth fault"
  isMaxLoadSoftNlin: int
  "Penalty costs for soft constraints"
  oid_: int
  "ObjectID"
  iComDate: int
  "Commissioning Date"
  cntConstrType: int
  "Max. loading constraint for contingencies: Contingency-constraint type:Off:Soft constraint"
  installCost: float
  "Costs: Installation costs"
  appr_status: int
  "Approval Information: Status"
  pRating: object
  "Thermal rating"
  gnrl_modif: int
  "Object modified"
  Tctrl: float
  "Controller, tap changer: Controller time constant"
  ciEnergized: int
  "Energized"
  isConstrLoadingPlacement: int
  "Max. loading constraint for Optimal Equipment Placement"
  FOR1: float
  "Failures Transformer failures: Forced Outage Rate"
  iZoneBus: int
  "Zone"
  lifeSpan: float
  "Expected life span"
  pOwner: object
  "Owner"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  ldcxsRev: float
  "Reverse power operation: Xset"
  ictrlModRev: int
  "Reverse power operation: Control mode:Locked forward:Bidirectional:Co-generation:Q-bidirectional"
  scalingFacSoftConstrOpf: float
  "Max. loading constraint: Weighting factor for soft constraint penalty"
  pTypStoch: object
  "Failures: Type model"
  charact: list
  "Charact."
  re0: float
  "Internal grounding impedance: Resistance, Re"
  dataExtDesc: list
  "Description"
  i_pcReglim: int
  "Tap changer: Limited voltage control range"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  iRevPQ: int
  "Reverse power operation"
  cpFeed: object
  "Feeder"
  allowCntConstrFilt: int
  "Constraint Filtering: Allow contingency filtering by number of critical constraints"
  dataExtUnit: list
  "Unit"
  i_cont: int
  "Controller, tap changer: Tap changer:discrete:continuous"
  cpMeteostat: object
  "Meteo Station"
  isSepCntConstrType: int
  "Max. loading constraint for contingencies: Separate constraint type"
  CCEarRepMu: float
  "Failures Double Earth Fault: Repair duration"
  scrapValue: float
  "Scrap value"
  ignd: int
  "Star point:grounded:isolated"
  cpArea: object
  "Area"
  allowMarginFilt: int
  "Constraint Filtering: Allow filtering by constraint margin"
  ldcct: float
  "Controller, tap changer: Current transformer rating"
  pOperator: object
  "Operator"
  usp_low: float
  "Controller, tap changer: Lower voltage bound"
  scalingFacSoftConstrCost: float
  "Penalty costs for soft constraints: Cost scaling factor"
  maintenCost: float
  "Costs: Maintenance costs"
  cAllowMarginFilt: int
  "Constraint Filtering: Allow filtering by constraint margin"
  ldcrsRev: float
  "Reverse power operation: Rset"
  sernum: str
  "Serial Number"
  isCtrlTapPlacement: int
  "Controls for Optimal Equipment Placement: Position of tap 1"
  cneutcon: int
  "Neutral conductor: N-Connection"
  isConstrLoading: int
  "Max. loading constraint for Unit Commitment"
  FOE: float
  "Failures Transformer failures: Forced Outage Expectancy"
  FOD: float
  "Failures Transformer failures: Forced Outage Duration"
  cIsSepCntConstrType: int
  "Max. loading constraint for contingencies: Separate constraint type"
  constr: int
  "Year of Construction"
  nntap1: int
  "Tap changer: Tap 1 position"
  cpSupplyTransformer: object
  "Supplying Transformer"
  originalValue: float
  "Original value"
  maxload: float
  "Thermal loading limit: Max. loading"
  lossAssign: int
  "Loss assignment:according to grouping:uniformly distributed:to S-Side:to L-Side"
  isCtrlTap: int
  "Tap Changer"
  doc_id: object
  "Additional Data"
  Snom_a: float
  "Nominal Power (act.)"
  usp_up: float
  "Controller, tap changer: Upper voltage bound"
  cAllowCntConstrFilt: int
  "Constraint Filtering: Allow contingency filtering by number of critical constraints"
  i_tapini: int
  "State Estimation: Estimate tap position"
  RevThresh: float
  "Reverse power operation: Current deadband (+/-)"
  gnrl_modby: str
  "Object modified by"
  usp_upRev: float
  "Reverse power operation: Upper voltage bound"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  ildc_lm: int
  "Controller, tap changer: Voltage limit"
  cIsSepCntMaxAllowedLoading: int
  "Max. loading constraint for contingencies: Separate max. allowed loading"
  penaltyCosts: float
  "Controls for Optimal Power Flow: Penalty costs per Tap deviation"
  cpSite: object
  "Site"
  cInom: float
  "Tap changer: Continuous current rating at selected voltage control range"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  pStoch: object
  "Failures: Element model"
  tid_: int
  "TimeID"
  ldcpt: float
  "Controller, tap changer: Voltage transformer ratio"
  usetp: float
  "Controller, tap changer: Voltage setpoint"
  root_id: object
  "Original Location"
  usp_lowRev: float
  "Reverse power operation: Lower voltage bound"
  iOPFCload: int
  "Max. loading constraint"
  loc_name: str
  "Name"
  iperfect: int
  "Failures: Ideal component"
  ldc_lmup: float
  "Controller, tap changer: Upper"
  fold_id: object
  "In Folder"
  nntap3: int
  "Tap changer: Tap 3 position"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def NTap(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def CreateEvent(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetZpu(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmXnet(Protocol):
  Pmin_ucPU: float
  "Active Power Operational Limits: Min."
  iintgnd: int
  "Neutral Conductor: N-Connection:None:At terminal (ABC-N):Separate terminal"
  iHmcType: int
  "Type of Harmonic Voltages"
  xntrnmin: float
  "Min. Values: X/R Ratio (min.)"
  dpl1: float
  "dpl1"
  pQlimType: object
  "Reactive Power Operational Limits: Capability Curve"
  allowGenMode: int
  "Separate generation mode"
  iInterPol: int
  "Approximation:Piecewise linear:Hermite"
  cpOperator: object
  "Operator"
  cimRdfId: list
  "RDF ID"
  isRPR: int
  "Optimisation of reactive power reserve"
  costRedispatchP: float
  "Redispatch costs for active power change"
  iOPFCQmin: int
  "Reactive Power Operational Limits: Min."
  dpl5: float
  "dpl5"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  z2tz1kV: float
  "Short-Circuit Power at Normal Operation: Z2/Z1"
  manuf: str
  "Manufacturer"
  minUpTime: float
  "Start-up/shut-down time constraints: Minimum up-time"
  GPSlon: float
  "Geographical Position: Longitude / Easting"
  Xe: float
  "Internal Grounding Impedance: Reactance, Xe"
  L0: float
  "Frequency Dependencies: Inductance, L0"
  isDiscreteCtrlP: int
  "Restriction to discrete active power values"
  allowConsumMode: int
  "Separate consumption mode"
  r0tx0: float
  "R0/X0 max."
  consumCosts: float
  "Consumption mode: Consumption costs"
  appr_modif: int
  "Approval Information: Modified"
  uset_mode: int
  "Setpoint:local:bus target voltage"
  ciDist: int
  "Distance from infeed in number of buses"
  ikssmin: float
  "Min. Values: Short-Circuit Current Ik''min"
  cpBranch: object
  "Branch"
  isConsShutDownCost: int
  "Shut-down costs"
  fcharL1: object
  "Frequency Dependencies: L1(f)"
  L1: float
  "Frequency Dependencies: Inductance, L1"
  discMethCostOp: int
  "Piecewise linearisation for LP"
  fcharL0: object
  "Frequency Dependencies: L0(f)"
  tqss: float
  "Subtransient Time Constants: Tq''"
  limRampDownPU: float
  "Ramp rate constraints: Ramp-down limit"
  efficiencyLPgen: float
  "Efficiency: Used efficiency (generation)"
  cgnd: int
  "Internal Grounding Impedance: Star Point:Connected:Not connected"
  cIsDiscreteCtrlP: int
  "Restriction to discrete active power values"
  scaleQmax: float
  "Reactive Power Operational Limits: Scaling Factor (max.)"
  efficiencyCurveConsum: object
  "Efficiency: Efficiency curve (consumption)"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  cmin: float
  "Min. Values: c-Factor (min.)"
  fixedCosts: float
  "Generation costs: Fixed costs"
  vecPowerRedispatchDown: list
  "Redispatch"
  desc: list
  "Description"
  iOPFCPmax: int
  "Active Power Operational Limits: Max."
  cUserDefIndex: int
  "User defined Index"
  sOpComment: list
  "Operator Comment"
  oid_: int
  "ObjectID"
  limRampDown: float
  "Ramp rate constraints: Ramp-down limit"
  cused: int
  "Use for calculation"
  p_direc: int
  "Operation Point: Power Direction:P>=0:P<0"
  curpreld: float
  "Max. Values Preload Conditions: Current"
  r0tx0kV: float
  "Short-Circuit Power at Normal Operation: R0/X0"
  iComDate: int
  "Commissioning Date"
  pStorage: object
  "Storage model"
  QtargetRPR: float
  "Optimisation of reactive power reserve: Q target value"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  isConstrUpDown: int
  "Start-up/shut-down time constraints"
  u0_phase: list
  "u0, Ang."
  snss: float
  "Max. Values: Short-Circuit Power Sk''max"
  costRedispatchDown: float
  "Additional redispatch costs: Downward active power redispatch costs"
  z2tz1min: float
  "Min. Values Impedance Ratio: Z2/Z1 min."
  limRampUpPU: float
  "Ramp rate constraints: Ramp-up limit"
  pOwner: object
  "Owner"
  phiini: float
  "Operation Point: Angle"
  u0_mag: list
  "u0, Mag."
  Pnom: float
  "Active Power Operational Limits: Pn"
  cost_up: float
  "Start-up costs: Warm-start costs"
  snssmin: float
  "Min. Values: Short-Circuit Power Sk''min"
  dataExtDesc: list
  "Description"
  Pmax_ucPU: float
  "Active Power Operational Limits: Max."
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  outServPzero: int
  "Out of service when active power is zero"
  cpFeed: object
  "Feeder"
  mode_inp: str
  "Operation Point: Input Mode"
  numBreakpointsCostOp: int
  "Piecewise linearisation for LP: Number of breakpoints"
  dataExtUnit: list
  "Unit"
  cVecDiscreteCtrlPvals: list
  "Valid active power values"
  ip_ctrl: int
  "Secondary Controller (Slack)"
  cpMeteostat: object
  "Meteo Station"
  costColdStart: float
  "Start-up costs: Cold-start costs"
  limRampUp: float
  "Ramp rate constraints: Ramp-up limit"
  bus1n: object
  "Neutral Conductor: Neutral"
  cpeter: int
  "Internal Grounding Impedance: Petersen Coil"
  pOperator: object
  "Operator"
  pf_recap: int
  "Operation Point: Power Factor:ind.:cap."
  xds: float
  "Transient Reactances: xd'"
  ignd: int
  "Star Point:grounded:compensated:isolated"
  isVRE: int
  "Generator usage: Generator usage:Single thermal generation unit:Variable renewable energy source (VRE):Coupled with storage model:Part of Virtual Power Plant"
  cpArea: object
  "Area"
  isMustRunUC: int
  "Additional constraints for controls: Must run"
  fcharL2: object
  "Frequency Dependencies: L2(f)"
  iAstabint: int
  "A-stable integration algorithm"
  iOPFCQmax: int
  "Reactive Power Operational Limits: Max."
  bus1: object
  "Terminal"
  constr: int
  "Year of Construction"
  cQ_min: float
  "Reactive Power Operational Limits: Min."
  costShutDown: float
  "Shut-down costs"
  cpSupplyTransformer: object
  "Supplying Transformer"
  genShiftKey: float
  "Generation shift key"
  cfreqs: float
  "Frequency"
  tds: float
  "Transient Time Constants: Td'"
  doc_id: object
  "Additional Data"
  sgini: float
  "Operation Point: Apparent Power"
  u2_mag: list
  "u2, Mag."
  cpCtrlNode: object
  "Operation Point: Target Node"
  ifreqs: list
  "Harm. Order"
  scaleQmin: float
  "Reactive Power Operational Limits: Scaling Factor (min.)"
  cospreld: float
  "Max. Values Preload Conditions: Power Factor"
  vecStartUpCosts: list
  "Start-up costs: Start-up costs"
  pid_: int
  "ProjectID"
  dispatch: int
  "Generator Dispatch"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  penaltyCosts: float
  "Penalty costs"
  isCtrlPplacement: int
  "Optimise active power"
  cpSite: object
  "Site"
  R1: float
  "Frequency Dependencies: Resistance, R1"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  c_psecc: object
  "External Secondary Controller"
  R2: float
  "Frequency Dependencies: Resistance, R2"
  SkV: float
  "Short-Circuit Power at Normal Operation: Short-Circuit Power, Sk"
  u1_phase: list
  "u1, Ang."
  bustp: str
  "Bus Type:PQ:PV:SL"
  xntrn: float
  "Max. Values: X/R Ratio (max.)"
  qdslCtrl: object
  "Quasi-Dynamic Model"
  umag_iec1: list
  "U_h"
  aCategory: str
  "Plant Category"
  x0tx1min: float
  "Min. Values Impedance Ratio: X0/X1 min."
  cQ_max: float
  "Reactive Power Operational Limits: Max."
  fold_id: object
  "In Folder"
  psikV: float
  "Short-Circuit Power at Normal Operation: Impedance Angle, psik"
  dpl3: float
  "dpl3"
  minDownTime: float
  "Start-up/shut-down time constraints: Minimum down-time"
  Irze: list
  "Rated Current of Grounding"
  MaxS: float
  "Active Power Operational Limits: Max."
  cmonth: float
  "No load costs (monthly)"
  tqs: float
  "Transient Time Constants: Tq'"
  costRedispatchUp: float
  "Additional redispatch costs: Upward active power redispatch costs"
  vecStartUpTimes: list
  "Start-up costs: Down-time"
  dat_src: str
  "Data source"
  umag_iec2: list
  "U_h"
  ifreqs_iec2: list
  "Harm. Order"
  limRampStartUpPU: float
  "Ramp rate constraints: Start-up ramp limit"
  fcharR1: object
  "Frequency Dependencies: R1(f)"
  K: float
  "Operation Point: Secondary Frequency Bias"
  pgini: float
  "Operation Point: Active Power"
  isCtrlFixedToLdfVal: int
  "Additional constraints for controls: Fix controls to Load Flow values"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  limRampStartUp: float
  "Ramp rate constraints: Start-up ramp limit"
  isConsCostsRedispatch: int
  "Additional redispatch costs"
  PmaxInvPU: float
  "Separate consumption mode: Max."
  xqs: float
  "Transient Reactances: xq'"
  cCategory: str
  "Plant Category"
  coldStartTime: float
  "Start-up costs: Cold-start time"
  cStorage: object
  "Generator usage: Storage model"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  costRedispatchQ: float
  "Redispatch costs for reactive power change"
  PminInv: float
  "Separate consumption mode: Min."
  tdss: float
  "Subtransient Time Constants: Td''"
  for_name: str
  "Foreign Key"
  Re: float
  "Internal Grounding Impedance: Resistance, Re"
  vecCostRedispatchDown: list
  "Costs"
  cosgini: float
  "Operation Point: Power Factor"
  cospreldmin: float
  "Min. Values Preload Conditions: Power Factor"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  dpl4: float
  "dpl4"
  fcharR2: object
  "Frequency Dependencies: R2(f)"
  isConsStartUpCost: int
  "Start-up costs"
  ciEarthed: int
  "Earthed"
  ecost: float
  "Energy Cost"
  isLimQmax: int
  "Reactive Power Operational Limits: Max."
  cusedhrm: int
  "Use for calculation"
  pOpCostCurve: object
  "Operating costs: Generator cost curve"
  outserv: int
  "Out of Service"
  pBMU: object
  "Virtual Power Plant"
  PminInvPU: float
  "Separate consumption mode: Min."
  cmax: float
  "Max. Values: c-Factor (max.)"
  cfixedCosts: float
  "Operating costs: Fixed costs"
  GPSlat: float
  "Geographical Position: Latitude / Northing"
  avgCostsUc: float
  "Piecewise linearisation for LP: Average costs"
  iSchemeStatus: int
  "Scheme Status"
  i_prty: int
  "Active power control: Priority"
  L2: float
  "Frequency Dependencies: Inductance, L2"
  qgini: float
  "Operation Point: Reactive Power"
  isLimPmax: int
  "Active Power Operational Limits: Max."
  c_pstac: object
  "External Station Controller"
  appr_status: int
  "Approval Information: Status"
  iOPFCPmin: int
  "Active Power Operational Limits: Min."
  isPcurrAllowed: int
  "Restriction to discrete active power values: Allow current active power value"
  ictqg: int
  "Controls: Reactive Power"
  cosn: float
  "Power Factor"
  ikss: float
  "Max. Values: Short-Circuit Current Ik''max"
  snom: float
  "Nominal Apparent Power"
  isCtrlQ: int
  "Controls: Reactive power"
  round: float
  "Smoothing factor"
  Pctrl: int
  "Active power control: Active power steps:fixed:continuous:1:2:3:4:5:6:7:8:9:10"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  isLimQmin: int
  "Reactive Power Operational Limits: Min."
  cpower: list
  "From"
  charact: list
  "Charact."
  efficiencyCurveGen: object
  "Efficiency: Efficiency curve (generation)"
  p_uctrl: object
  "Operation Point: Reference Busbar"
  limRampShutDownPU: float
  "Ramp rate constraints: Shut-down ramp limit"
  xd: float
  "Synchronous Reactances: xd"
  r0tx0min: float
  "R0/X0 min."
  iv_mode: int
  "Voltage Controller Mode"
  rntxnmin: float
  "Min. Values: R/X Ratio (min.)"
  QtargetBase: int
  "Optimisation of reactive power reserve: Base:Reactive power limits:Rated apparent power"
  curpreldmin: float
  "Min. Values Preload Conditions: Current"
  efficiencyLPconsum: float
  "Efficiency: Used efficiency (consumption)"
  vecDiscreteCtrlPvals: list
  "Restriction to discrete active power values: Valid active power values"
  isLimPmin: int
  "Active Power Operational Limits: Min."
  isConstrRamp: int
  "Ramp rate constraints"
  is4SpinReserve: int
  "Consider for region spinning reserve"
  q_min: float
  "Min."
  x0tx1: float
  "Max. Values Impedance Ratio: X0/X1 max."
  sernum: str
  "Serial Number"
  fcharR0: object
  "Frequency Dependencies: R0(f)"
  Kpf: float
  "Operation Point: Primary Frequency Bias"
  PmaxInv: float
  "Separate consumption mode: Max."
  z2tz1: float
  "Max. Values Impedance Ratio: Z2/Z1 max."
  costCurtailment: float
  "Costs for curtailment"
  tag: float
  "Acceleration Time Constant"
  limRampShutDown: float
  "Ramp rate constraints: Shut-down ramp limit"
  isConsCostOp: int
  "Operating costs"
  isCtrlP: int
  "Controls: Active power"
  u2_phase: list
  "u2, Ang."
  fixed: int
  "Must run"
  vecPowerRedispatchUp: list
  "Redispatch"
  gnrl_modby: str
  "Object modified by"
  dpl2: float
  "dpl2"
  q_max: float
  "Max."
  ciLater: int
  "Lateral Index"
  priority: int
  "Merit Order"
  avgCosts: float
  "Average Costs"
  xq: float
  "Synchronous Reactances: xq"
  tid_: int
  "TimeID"
  cIsMustRunUC: int
  "Additional constraints for controls: Must run"
  x0tx1kV: float
  "Short-Circuit Power at Normal Operation: X0/X1"
  R0: float
  "Frequency Dependencies: Resistance, R0"
  ictpg: int
  "Controls: Active Power"
  usetp: float
  "Operation Point: Voltage Setpoint"
  root_id: object
  "Original Location"
  cIsPcurrAllowed: int
  "Allow current active power value"
  Pmin_uc: float
  "Active Power Operational Limits: Min."
  ccost: list
  "Costs"
  loc_name: str
  "Name"
  u1_mag: list
  "u1, Mag."
  vecBreakpointsP: list
  "Piecewise linearisation for LP: Power"
  vecCostRedispatchUp: list
  "Costs"
  rntxn: float
  "Max. Values: R/X Ratio (max.)"


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def Delete(*args):
    ...

  def GetStepupTransformer(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetInom(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def Reconnect(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def Disconnect(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetParent(*args):
    ...

  def GetGroundingImpedance(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def CalcEfficiency(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetImpedance(*args):
    ...



class ElmZone(Protocol):
  cimRdfId: list
  "RDF ID"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  icolor: int
  "Colour"
  cpHeadFold: object
  "Head Folder"
  spinReserve: float
  "Min. spinning reserve constraint: Spinning reserve"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  isConsSpinReserve: int
  "Min. spinning reserve constraint"
  curscale: float
  "Load Scaling Factor"
  windscale: float
  "Wind Generation Scaling Factor"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  InterPset: float
  "Consider Interchange Schedule: Scheduled Active Power Interchange"
  tid_: int
  "TimeID"
  iInterChg: int
  "Consider Interchange Schedule"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetBuses(*args):
    ...

  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def DefineBoundary(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetBranches(*args):
    ...

  def CalculateInterchangeTo(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def SetLoadScaleAbsolute(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def GetObjs(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetAll(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def CalculateVoltageLevel(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def CalculateVoltInterVolt(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaCt(Protocol):
  typ_id: object
  "Type"
  cpOperator: object
  "Operator"
  it2p1: int
  "Configuration: Phase 1"
  dat_src: str
  "Data source"
  stapset: float
  "Tap selection: Secondary"
  chr_name: str
  "Characteristic Name"
  Zburd: float
  "Detailed Model Actual Burden: Impedance"
  appr_modby: str
  "Approval Information: Modified by"
  it2p2: int
  "Configuration: Phase 2:a:b:c"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  itrmt: int
  "Detailed Model: Saturation Model"
  cbranch: object
  "Location: Branch"
  Vs: float
  "Detailed Model Saturation Parameter: Saturation Voltage"
  cDisplayName: str
  "Display Name"
  commissionDate: str
  "Commissioning Date"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  iorient: int
  "Orientation:--> Branch:--> Busbar"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  Rs: float
  "Detailed Model: Sec. Winding Resistance"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  oid_: int
  "ObjectID"
  iComDate: int
  "Commissioning Date"
  appr_status: int
  "Approval Information: Status"
  vec_core: list
  "Additional Cores"
  ccratio: str
  "Additional Cores: Complete Ratio"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  pOwner: object
  "Owner"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  ciorient: int
  "Configuration: Orientation:--> Branch:--> Busbar"
  cpZone: object
  "Zone"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  rphase: int
  "Configuration: Phase rotation:a-b-c:b-c-a:c-a-b:b-a-c:c-b-a:a-c-b"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  dataExtUnit: list
  "Unit"
  cratio: str
  "Additional Cores: Ratio"
  pbranch: object
  "Location: Reference"
  cpMeteostat: object
  "Meteo Station"
  cn_bus: object
  "Location: Busbar"
  pOperator: object
  "Operator"
  cpArea: object
  "Area"
  curmg: float
  "Detailed Model Saturation Parameter: (Exc. current)/(Rated current)"
  sernum: str
  "Serial Number"
  constr: int
  "Year of Construction"
  cpSupplyTransformer: object
  "Supplying Transformer"
  seccts: list
  "Additional Cores"
  doc_id: object
  "Additional Data"
  Sburd: float
  "Detailed Model Actual Burden: Apparent Power"
  nameplate: str
  "Nameplate"
  gnrl_modby: str
  "Object modified by"
  cratio_ct: str
  "Additional Cores: Complete ratio, CT"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  ptapset: float
  "Tap selection: Primary"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  iphase: int
  "Configuration: No. Phases:1:2:3"
  root_id: object
  "Original Location"
  ksat: float
  "Detailed Model Saturation Parameter: Exponent"
  iconsat: int
  "Detailed Model"
  bmsat: float
  "Detailed Model Saturation Parameter: Saturated Admittance"
  stapcon: str
  "Configuration: Connection:Y:D"
  loc_name: str
  "Name"
  cosburd: float
  "Detailed Model Actual Burden: Power Factor"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def SetPrimaryTap(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaCubic(Protocol):
  cpCB: object
  "Circuit-Breaker"
  elm_brc: object
  "Connected with element or branch"
  it2p3: int
  "Phase 3"
  cpCts: object
  "Current Transformer"
  cPmea: object
  cimRdfId: list
  "RDF ID"
  cpOperator: object
  "Operator"
  it2p1: int
  "Phase 1"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  it2p2: int
  "Phase 2"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  cMajorNodes: list
  "Connected Major Nodes"
  nphase: int
  "No of Phases:"
  cDisplayName: str
  "Display Name"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  obj_id: object
  "Connected with"
  pNodeStat: object
  "Station or terminal"
  actPhase: str
  "Actual phase(s)"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  cterm: object
  "Terminal"
  pIntObjs: list
  "Internal Elements"
  ciEarthed: int
  "Earthed"
  cImea: object
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  cpRelays: object
  "Relays"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  position: int
  "Position"
  oid_: int
  "ObjectID"
  cPhInfo: str
  "Phases:"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  obj_bus: int
  "Bus Index"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  iNode: int
  "node number for internal station topology"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  dataExtUnit: list
  "Unit"
  obj_out: object
  "Connected with"
  cpMeteostat: object
  "Meteo Station"
  cpArea: object
  "Area"
  cBusBar: object
  "Connected Node"
  cpSupplyTransformer: object
  "Supplying Transformer"
  cQmea: object
  cTapmea: object
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  iType: int
  "internal used for position"
  cpGrid: object
  "Grid"
  cBrkmea: object
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  iStopFeed: int
  "Terminate feeder at this point"
  loc_name: str
  "Name"
  cVmea: object
  fold_id: object
  "In Folder"


  def GetNearestBusbars(*args):
    ...

  def GetContents(*args):
    ...

  def GetConnections(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetBranch(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsClosed(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetPathToNearestBusbar(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetAll(*args):
    ...

  def GetInom(*args):
    ...

  def GetConnectedMajorNodes(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def IsConnected(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaExtbrkmea(Protocol):
  variabName: str
  "Variable Name"
  cpOperator: object
  "Operator"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  delSet: float
  "Deviation from Measurement"
  appr_modby: str
  "Approval Information: Modified by"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  varName: str
  "Variable Name"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  pswitch: object
  "Remote Measurement Point"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  pObject: object
  "Controlled Object"
  cswitch: object
  "Effective Meas. Element"
  oid_: int
  "ObjectID"
  iStatus: int
  "Status"
  Ext: list
  "Measurement: External"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  sTagID: str
  "TagID"
  dataExtUnit: list
  "Unit"
  i_use: int
  "Measurement: Use"
  cpMeteostat: object
  "Meteo Station"
  cpArea: object
  "Area"
  Swtmea: int
  "Measurement: Position"
  cpSupplyTransformer: object
  "Supplying Transformer"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  pCtrl: object
  "Controller"
  loc_name: str
  "Name"
  Int: list
  "Measurement: Internal"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def UpdateControl(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetStatusBit(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetStatusTmp(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def ResetStatusBit(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetStatusBitTmp(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def InitTmp(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def UpdateCtrl(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def IsStatusBitSetTmp(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def IsStatusBitSet(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetMeaValue(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetMeaValue(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def CopyExtMeaStatusToStatusTmp(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def ResetStatusBitTmp(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetStatus(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetStatusTmp(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetStatus(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaExtcmdmea(Protocol):
  variabName: str
  "Variable Name"
  cpOperator: object
  "Operator"
  pCalObj: object
  "Get calculated value from: Object"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  varCal: str
  "Get calculated value from: Variable Name"
  Cal: float
  "Measurement: Calc."
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  pCalObjSim: object
  "Get calculated value from: Sim Object"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  varName: str
  "Variable Name"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  pcubic: object
  "Remote Measurement Point"
  varCalSim: str
  "Get calculated value from: Variable Name"
  pObject: object
  "Controlled Object"
  oid_: int
  "ObjectID"
  iStatus: int
  "Status"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  Mea: str
  "Measurement: Command"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  sTagID: str
  "TagID"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  cpArea: object
  "Area"
  cpSupplyTransformer: object
  "Supplying Transformer"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  ccubic: object
  "Effective Meas. Element"
  root_id: object
  "Original Location"
  pCtrl: object
  "Controller"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def UpdateControl(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetStatusBit(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetStatusTmp(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def ResetStatusBit(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetStatusBitTmp(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def InitTmp(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def UpdateCtrl(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def IsStatusBitSetTmp(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def IsStatusBitSet(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetMeaValue(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def CreateEvent(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def Isolate(*args):
    ...

  def SwitchOff(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetMeaValue(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def CopyExtMeaStatusToStatusTmp(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def ResetStatusBitTmp(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetStatus(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetStatusTmp(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetStatus(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaExtdatmea(Protocol):
  i_dat: int
  "Measurement: DAT type"
  tid_: int
  "TimeID"
  variabName: str
  "Variable Name"
  cpOperator: object
  "Operator"
  pCalObj: object
  "Get calculated value from: Object"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  delSet: float
  "Deviation from Measurement"
  appr_modby: str
  "Approval Information: Modified by"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  varCal: str
  "Get calculated value from: Variable Name"
  Cal: float
  "Measurement: Calc."
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  pCalObjSim: object
  "Get calculated value from: Sim Object"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  varName: str
  "Variable Name"
  iopt_execCom: int
  "Get calculated value from: Execute Command"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  iopt_execComSim: int
  "Get calculated value from: Execute Command"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  pcubic: object
  "Remote Measurement Point"
  varCalSim: str
  "Get calculated value from: Variable Name"
  pObject: object
  "Controlled Object"
  oid_: int
  "ObjectID"
  iStatus: int
  "Status"
  Ext: list
  "Measurement: External"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  cMeaVal: float
  "Measurement: Measurement Value"
  Multip: float
  "Measurement: Multiplicator"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  Mea: float
  "Measurement: Raw Value"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  i_mode: int
  "Measurement: Mode"
  sTagID: str
  "TagID"
  dataExtUnit: list
  "Unit"
  i_use: int
  "Measurement: Use"
  cpMeteostat: object
  "Meteo Station"
  CalValExt: float
  "Calculated Value, external"
  Dif: float
  "Measurement: Deviation"
  cpArea: object
  "Area"
  cpSupplyTransformer: object
  "Supplying Transformer"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  CalVal: float
  "Calculated Value, internal"
  ccubic: object
  "Effective Meas. Element"
  root_id: object
  "Original Location"
  deadband: float
  "Measurement: OPC deadband"
  pCtrl: object
  "Controller"
  loc_name: str
  "Name"
  Int: list
  "Measurement: Internal"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def UpdateControl(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetStatusBit(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetStatusTmp(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def ResetStatusBit(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetStatusBitTmp(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def InitTmp(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def UpdateCtrl(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def IsStatusBitSetTmp(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def IsStatusBitSet(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetMeaValue(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def CreateEvent(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def Isolate(*args):
    ...

  def SwitchOff(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetMeaValue(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def CopyExtMeaStatusToStatusTmp(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def ResetStatusBitTmp(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetStatus(*args):
    ...

  def GetStatusTmp(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetStatus(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaExtfmea(Protocol):
  errOutOfService: int
  "Detailed Error Description: Measurement out of service"
  variabName: str
  "Variable Name"
  cpOperator: object
  "Operator"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  delSet: float
  "Deviation from Measurement"
  appr_modby: str
  "Approval Information: Modified by"
  errBadData: int
  "Detailed Error Description: Bad measurement"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  fdif: float
  "Measurement: Frequency Deviation"
  errRedundant: int
  "Detailed Error Description: Redundant measurement for observability"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  varName: str
  "Variable Name"
  fmea: float
  "Measurement: Frequency"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  pObject: object
  "Controlled Object"
  oid_: int
  "ObjectID"
  iStatus: int
  "Status"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  cMeaVal: float
  "Measurement: Measurement Value"
  cbusbar: object
  "Effective Meas. Element"
  fcal: float
  "Measurement: Calc. Frequency"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  error: int
  "Error description Code"
  errStatus: int
  "Detailed Error Description: Input status of measurement disallows calculation"
  dataExtUnit: list
  "Unit"
  sTagID: str
  "TagID"
  cpMeteostat: object
  "Meteo Station"
  pbusbar: object
  "Remote Measurement Point"
  cpArea: object
  "Area"
  cpSupplyTransformer: object
  "Supplying Transformer"
  errUnneededPseudo: int
  "Detailed Error Description: Unneeded pseudo-measurement"
  gnrl_modby: str
  "Object modified by"
  errConsDir: int
  "Detailed Error Description: Consistent active power flow direction at each side of branch"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  deadband: float
  "Measurement: OPC deadband"
  pCtrl: object
  "Controller"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def UpdateControl(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetStatusBit(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetStatusTmp(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def ResetStatusBit(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetStatusBitTmp(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def InitTmp(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def UpdateCtrl(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def IsStatusBitSetTmp(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def IsStatusBitSet(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetMeaValue(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetMeaValue(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def CopyExtMeaStatusToStatusTmp(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def ResetStatusBitTmp(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetStatus(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetStatusTmp(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetStatus(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaExtfuelmea(Protocol):
  variabName: str
  "Variable Name"
  cpOperator: object
  "Operator"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  delSet: float
  "Deviation from Measurement"
  appr_modby: str
  "Approval Information: Modified by"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  Fueldif: float
  "Measurement: Fuel Deviation"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  varName: str
  "Variable Name"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  pcubic: object
  "Remote Measurement Point"
  pObject: object
  "Controlled Object"
  oid_: int
  "ObjectID"
  iStatus: int
  "Status"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  cMeaVal: float
  "Measurement: Measurement Value"
  Multip: float
  "Measurement: Multiplicator"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  sTagID: str
  "TagID"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  cpArea: object
  "Area"
  Fuelcal: float
  "Measurement: Calc. Fuel"
  cpSupplyTransformer: object
  "Supplying Transformer"
  Fuelmea: float
  "Measurement: Fuel"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  ccubic: object
  "Effective Meas. Element"
  root_id: object
  "Original Location"
  pCtrl: object
  "Controller"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def UpdateControl(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetStatusBit(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetStatusTmp(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def ResetStatusBit(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetStatusBitTmp(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def InitTmp(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def UpdateCtrl(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def IsStatusBitSetTmp(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def IsStatusBitSet(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetMeaValue(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetMeaValue(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def CopyExtMeaStatusToStatusTmp(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def ResetStatusBitTmp(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetStatus(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetStatusTmp(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetStatus(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaExtimea(Protocol):
  errOutOfService: int
  "Detailed Error Description: Measurement out of service"
  SnomAct: float
  "Ratings Active Current: Rated Current"
  cMeaValReact: float
  "Mea. React. Curr."
  tid_: int
  "TimeID"
  cMeaValAct: float
  "Mea. Act. Curr."
  variabName: str
  "Variable Name"
  cosphical: float
  "Calc. Power Factor"
  cpOperator: object
  "Operator"
  RedundanceLevelReact: int
  "Detailed Error Description: Level of redundancy (reactive current measure)"
  errNdSumP: int
  "Detailed Error Description: Node sum checks for P"
  dat_src: str
  "Data source"
  errExcNomLoading: int
  "Detailed Error Description: Branch loadings exceed nominal values"
  chr_name: str
  "Characteristic Name"
  delSet: float
  "Deviation from Measurement"
  appr_modby: str
  "Approval Information: Modified by"
  errBadData: int
  "Detailed Error Description: Bad measurement"
  IMagndif_mea: float
  "Curr. Magn. Dev. (meas.)"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  IReactdif_mea: float
  "React. Curr. Dev. (meas.)"
  SnomReact: float
  "Ratings Reactive Current: Rated Current"
  errRedundant: int
  "Detailed Error Description: Redundant measurement for observability"
  cDisplayName: str
  "Display Name"
  cosphidif: float
  "Power Factor Deviation"
  appr_modif: int
  "Approval Information: Modified"
  errExcNomLoss: int
  "Detailed Error Description: Large branch losses"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  iUseReact: int
  "Usage: Measure Reactive Current"
  cpBranch: object
  "Branch"
  varName: str
  "Variable Name"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  i_gen: int
  "Measurement: Orientation"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  errNdSumQ: int
  "Detailed Error Description: Node sum checks for Q"
  Snom: float
  "Rated Current"
  RedundanceLevelMagn: int
  "Detailed Error Description: Level of redundancy (magnitude measure)"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  IReactdif_abs: float
  "React. Curr. Dev. (abs)"
  pcubic: object
  "Remote Measurement Point"
  RedundanceLevelAct: int
  "Detailed Error Description: Level of redundancy (active current measure)"
  pObject: object
  "Controlled Object"
  oid_: int
  "ObjectID"
  IMagndif: float
  "Curr. Magn. Dev. (rated)"
  errRedundantAct: int
  "Detailed Error Description: Redundant active current measure"
  iStatus: int
  "Status"
  appr_status: int
  "Approval Information: Status"
  RedundanceGrpAct: int
  "Detailed Error Description: Equivalence class (active current measure)"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  accuracyAct: float
  "Ratings Active Current: Accuracy Class"
  Multip: float
  "Measurement: Multiplicator"
  IReactcal: float
  "Calc. React. Curr."
  iUseAct: int
  "Usage: Measure Active Current"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  IMagndif_abs: float
  "Curr. Magn. Dev. (abs)"
  errBadDataReact: int
  "Detailed Error Description: Bad reactive current measure"
  RedundanceGrpMagn: int
  "Detailed Error Description: Redundancy equivalence class (magnitude measure)"
  errRedundantReact: int
  "Detailed Error Description: Redundant reactive current measure"
  Imea: float
  "Measurement: Current"
  IReactdif: float
  "React. Curr. Dev. (rated)"
  errNegLoss: int
  "Detailed Error Description: Negative losses on passive branches"
  charact: list
  "Charact."
  IMagncal: float
  "Calc. Curr. Magn."
  accuracy: float
  "Accuracy Class"
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  cIsValid: int
  "Is Valid"
  SnomMagn: float
  "Ratings Current, Magnitude: Rated Current"
  error: int
  "Error description Code"
  IActdif_abs: float
  "Act. Curr. Dev. (abs)"
  dataExtUnit: list
  "Unit"
  cObjFunAct: float
  "Obj. func. act"
  errBadDataMagn: int
  "Detailed Error Description: Bad magnitude measure"
  errBadDataAct: int
  "Detailed Error Description: Bad active current measure"
  errFlwIfOpn: int
  "Detailed Error Description: Large branch flows on open ended branches"
  errStatus: int
  "Detailed Error Description: Input status of measurement disallows calculation"
  cObjFunMagn: float
  "Obj. func. magn."
  cpMeteostat: object
  "Meteo Station"
  RedundanceGrpReact: int
  "Detailed Error Description: Equivalence class (reactive current measure)"
  accuracyReact: float
  "Ratings Reactive Current: Accuracy Class"
  cpArea: object
  "Area"
  iUseMagn: int
  "Usage: Measure Current Magnitude"
  cpSupplyTransformer: object
  "Supplying Transformer"
  cObjFunReact: float
  "Obj. func. react"
  errUnneededPseudo: int
  "Detailed Error Description: Unneeded pseudo-measurement"
  cosphi: float
  "Measurement: Power Factor"
  gnrl_modby: str
  "Object modified by"
  errConsDir: int
  "Detailed Error Description: Consistent active power flow direction at each side of branch"
  errRedundantMagn: int
  "Detailed Error Description: Redundant magnitude measure"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  accuracyMagn: float
  "Ratings Current, Magnitude: Accuracy Class"
  cpSite: object
  "Site"
  IActdif: float
  "Act. Curr. Dev. (rated)"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  IActcal: float
  "Calc. Act. Curr."
  ccubic: object
  "Effective Meas. Element"
  root_id: object
  "Original Location"
  deadband: float
  "Measurement: OPC deadband"
  pCtrl: object
  "Controller"
  IActdif_mea: float
  "Act. Curr. Dev. (meas.)"
  loc_name: str
  "Name"
  cObjFun: float
  "Objective function"
  sTagID: str
  "TagID"
  cMeaValMagn: float
  "Mea. Curr. Magn."
  pf_recapr: int
  "Measurement: Power Factor:ind.:cap."
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def UpdateControl(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetStatusBit(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetStatusTmp(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def ResetStatusBit(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetStatusBitTmp(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def InitTmp(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def UpdateCtrl(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def IsStatusBitSetTmp(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def IsStatusBitSet(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetMeaValue(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetMeaValue(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def CopyExtMeaStatusToStatusTmp(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def ResetStatusBitTmp(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetStatus(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetStatusTmp(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetStatus(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaExtpfmea(Protocol):
  variabName: str
  "Variable Name"
  cpOperator: object
  "Operator"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  delSet: float
  "Deviation from Measurement"
  appr_modby: str
  "Approval Information: Modified by"
  iopt_mea: int
  "Measurement Of"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  varName: str
  "Variable Name"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  i_gen: int
  "Measurement: Orientation"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  pcubic: object
  "Remote Measurement Point"
  pObject: object
  "Controlled Object"
  oid_: int
  "ObjectID"
  iStatus: int
  "Status"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  cMeaVal: float
  "Measurement: Measurement Value"
  Multip: float
  "Measurement: Multiplicator"
  Pfdif: float
  "Measurement: Pow. Factor Deviat."
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  sTagID: str
  "TagID"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  cpArea: object
  "Area"
  cpSupplyTransformer: object
  "Supplying Transformer"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  Pfcal: float
  "Measurement: Calc. Power Factor"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  ccubic: object
  "Effective Meas. Element"
  root_id: object
  "Original Location"
  pCtrl: object
  "Controller"
  loc_name: str
  "Name"
  Pfmea: float
  "Measurement: Power Factor"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def UpdateControl(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetStatusBit(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetStatusTmp(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def ResetStatusBit(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetStatusBitTmp(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def InitTmp(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def UpdateCtrl(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def IsStatusBitSetTmp(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def IsStatusBitSet(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetMeaValue(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetMeaValue(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def CopyExtMeaStatusToStatusTmp(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def ResetStatusBitTmp(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetStatus(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetStatusTmp(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetStatus(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaExtpmea(Protocol):
  errOutOfService: int
  "Detailed Error Description: Measurement out of service"
  pseudo: int
  "Used as Pseudo-Measurement"
  variabName: str
  "Variable Name"
  cpOperator: object
  "Operator"
  errNdSumP: int
  "Detailed Error Description: Node sum checks for P"
  dat_src: str
  "Data source"
  errExcNomLoading: int
  "Detailed Error Description: Branch loadings exceed nominal values"
  chr_name: str
  "Characteristic Name"
  delSet: float
  "Deviation from Measurement"
  appr_modby: str
  "Approval Information: Modified by"
  errBadData: int
  "Detailed Error Description: Bad measurement"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  errRedundant: int
  "Detailed Error Description: Redundant measurement for observability"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  errExcNomLoss: int
  "Detailed Error Description: Large branch losses"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  varName: str
  "Variable Name"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  i_gen: int
  "Measurement: Orientation"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  errNdSumQ: int
  "Detailed Error Description: Node sum checks for Q"
  Snom: float
  "Ratings: Power Rating"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  pcubic: object
  "Remote Measurement Point"
  pObject: object
  "Controlled Object"
  Pdif_abs: float
  "Measurement: Power Deviation (abs)"
  oid_: int
  "ObjectID"
  iStatus: int
  "Status"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  Pdif: float
  "Measurement: Power Deviation (rated)"
  ciEnergized: int
  "Energized"
  cMeaVal: float
  "Measurement: Measurement Value"
  Multip: float
  "Measurement: Multiplicator"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  errNegLoss: int
  "Detailed Error Description: Negative losses on passive branches"
  charact: list
  "Charact."
  accuracy: float
  "Ratings: Accuracy Class"
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  cIsValid: int
  "Is Valid"
  error: int
  "Error description Code"
  Pdif_mea: float
  "Measurement: Power Deviation (meas.)"
  dataExtUnit: list
  "Unit"
  errStatus: int
  "Detailed Error Description: Input status of measurement disallows calculation"
  sTagID: str
  "TagID"
  errFlwIfOpn: int
  "Detailed Error Description: Large branch flows on open ended branches"
  cpMeteostat: object
  "Meteo Station"
  cpArea: object
  "Area"
  Pmea: float
  "Measurement: Active Power"
  RedundanceGrp: int
  "Detailed Error Description: Equivalence class (of redundant measure)"
  cpSupplyTransformer: object
  "Supplying Transformer"
  errUnneededPseudo: int
  "Detailed Error Description: Unneeded pseudo-measurement"
  gnrl_modby: str
  "Object modified by"
  errConsDir: int
  "Detailed Error Description: Consistent active power flow direction at each side of branch"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  Pcal: float
  "Measurement: Calc. Active Power"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  ccubic: object
  "Effective Meas. Element"
  root_id: object
  "Original Location"
  deadband: float
  "Measurement: OPC deadband"
  pCtrl: object
  "Controller"
  loc_name: str
  "Name"
  RedundanceLevel: int
  "Detailed Error Description: Level of redundancy"
  cObjFun: float
  "Measurement: Objective function"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def UpdateControl(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetStatusBit(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetStatusTmp(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def ResetStatusBit(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetStatusBitTmp(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def InitTmp(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def UpdateCtrl(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def IsStatusBitSetTmp(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def IsStatusBitSet(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetMeaValue(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetMeaValue(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def CopyExtMeaStatusToStatusTmp(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def ResetStatusBitTmp(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetStatus(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetStatusTmp(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetStatus(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaExtqmea(Protocol):
  errOutOfService: int
  "Detailed Error Description: Measurement out of service"
  pseudo: int
  "Used as Pseudo-Measurement"
  variabName: str
  "Variable Name"
  cpOperator: object
  "Operator"
  errNdSumP: int
  "Detailed Error Description: Node sum checks for P"
  Qcal: float
  "Measurement: Calc. React. Power"
  dat_src: str
  "Data source"
  errExcNomLoading: int
  "Detailed Error Description: Branch loadings exceed nominal values"
  chr_name: str
  "Characteristic Name"
  delSet: float
  "Deviation from Measurement"
  appr_modby: str
  "Approval Information: Modified by"
  errBadData: int
  "Detailed Error Description: Bad measurement"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  errRedundant: int
  "Detailed Error Description: Redundant measurement for observability"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  errExcNomLoss: int
  "Detailed Error Description: Large branch losses"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  Qdif_abs: float
  "Measurement: Power Deviation (abs)"
  Qdif_mea: float
  "Measurement: Power Deviation (meas.)"
  varName: str
  "Variable Name"
  Qdif: float
  "Measurement: Power Deviation (rated)"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  i_gen: int
  "Measurement: Orientation"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  errNdSumQ: int
  "Detailed Error Description: Node sum checks for Q"
  Snom: float
  "Ratings: Power Rating"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  pcubic: object
  "Remote Measurement Point"
  pObject: object
  "Controlled Object"
  oid_: int
  "ObjectID"
  iStatus: int
  "Status"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  cMeaVal: float
  "Measurement: Measurement Value"
  Multip: float
  "Measurement: Multiplicator"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  errNegLoss: int
  "Detailed Error Description: Negative losses on passive branches"
  charact: list
  "Charact."
  accuracy: float
  "Ratings: Accuracy Class"
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  cIsValid: int
  "Is Valid"
  error: int
  "Error description Code"
  errStatus: int
  "Detailed Error Description: Input status of measurement disallows calculation"
  dataExtUnit: list
  "Unit"
  sTagID: str
  "TagID"
  errFlwIfOpn: int
  "Detailed Error Description: Large branch flows on open ended branches"
  cpMeteostat: object
  "Meteo Station"
  cpArea: object
  "Area"
  RedundanceGrp: int
  "Detailed Error Description: Equivalence class (of redundant measure)"
  cpSupplyTransformer: object
  "Supplying Transformer"
  errUnneededPseudo: int
  "Detailed Error Description: Unneeded pseudo-measurement"
  gnrl_modby: str
  "Object modified by"
  errConsDir: int
  "Detailed Error Description: Consistent active power flow direction at each side of branch"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  ccubic: object
  "Effective Meas. Element"
  root_id: object
  "Original Location"
  deadband: float
  "Measurement: OPC deadband"
  pCtrl: object
  "Controller"
  Qmea: float
  "Measurement: Reactive Power"
  loc_name: str
  "Name"
  RedundanceLevel: int
  "Detailed Error Description: Level of redundancy"
  cObjFun: float
  "Measurement: Objective function"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def UpdateControl(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetStatusBit(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetStatusTmp(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def ResetStatusBit(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetStatusBitTmp(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def InitTmp(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def UpdateCtrl(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def IsStatusBitSetTmp(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def IsStatusBitSet(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetMeaValue(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetMeaValue(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def CopyExtMeaStatusToStatusTmp(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def ResetStatusBitTmp(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetStatus(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetStatusTmp(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetStatus(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaExtsmea(Protocol):
  Sldf: float
  "Last Calculated"
  cpOperator: object
  "Operator"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  Smea: float
  "Apparent Power"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  pcubic: object
  "Remote Measurement Point"
  oid_: int
  "ObjectID"
  iStatus: int
  "Status"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  cpArea: object
  "Area"
  cpSupplyTransformer: object
  "Supplying Transformer"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  ccubic: object
  "Effective Meas. Element"
  root_id: object
  "Original Location"
  Serr: float
  "Error"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def UpdateControl(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetStatusBit(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetStatusTmp(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def ResetStatusBit(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetStatusBitTmp(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def InitTmp(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def UpdateCtrl(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def IsStatusBitSetTmp(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def IsStatusBitSet(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetMeaValue(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetMeaValue(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def CopyExtMeaStatusToStatusTmp(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def ResetStatusBitTmp(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetStatus(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetStatusTmp(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetStatus(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaExttapmea(Protocol):
  Tapcal: float
  "Measurement: Calc. Tap"
  variabName: str
  "Variable Name"
  cpOperator: object
  "Operator"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  delSet: float
  "Deviation from Measurement"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  pobject: object
  "Remote Measurement Point"
  cDisplayName: str
  "Display Name"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  varName: str
  "Variable Name"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  i_tapOpCh: int
  "Tap Operation Mode"
  pObject: object
  "Controlled Object"
  oid_: int
  "ObjectID"
  i_tapCmd: int
  "Tap Changer Command"
  iStatus: int
  "Status"
  i_tapOpCmd: int
  "Tap Operation Mode Cmd."
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  Exttap: list
  "Ext. Tap"
  obj_bus: int
  "Bus Index"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  Tapmea: int
  "Measurement: Tap position"
  cpFeed: object
  "Feeder"
  sTagID: str
  "TagID"
  dataExtUnit: list
  "Unit"
  i_tap: int
  "Operation Mode"
  cpMeteostat: object
  "Meteo Station"
  cpArea: object
  "Area"
  cobject: object
  "Effective Meas. Element"
  cpSupplyTransformer: object
  "Supplying Transformer"
  Tap: list
  "Measurement: PF Tap"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  pCtrl: object
  "Controller"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def UpdateControl(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetStatusBit(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetStatusTmp(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def ResetStatusBit(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetStatusBitTmp(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def InitTmp(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def UpdateCtrl(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def IsStatusBitSetTmp(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def IsStatusBitSet(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetMeaValue(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def CreateEvent(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetMeaValue(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def CopyExtMeaStatusToStatusTmp(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def ResetStatusBitTmp(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetStatus(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetStatusTmp(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetStatus(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaExtv3mea(Protocol):
  Udif3: str
  "Measurement 3 (L3-L1): Voltage Deviation"
  tid_: int
  "TimeID"
  variabName: str
  "Variable Name"
  cpOperator: object
  "Operator"
  dat_src: str
  "Data source"
  Multip2: float
  "Measurement 2 (L2-L3): Multiplicator"
  chr_name: str
  "Characteristic Name"
  Udif1: str
  "Measurement 1 (L1-L2): Voltage Deviation"
  delSet: float
  "Deviation from Measurement"
  appr_modby: str
  "Approval Information: Modified by"
  Umea3: float
  "Measurement 3 (L3-L1): Measured Voltage"
  iUse2: int
  "Use"
  UmeaTag2: str
  "Measurement 2 (L2-L3): TagName 2"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  iUse1: int
  "Use"
  iUse3: int
  "Use"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  varName: str
  "Variable Name"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  UmeaTag1: str
  "Measurement 1 (L1-L2): TagName 1"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  Ucal2: float
  "Measurement 2 (L2-L3): Calc. Voltage"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  Ucal1: float
  "Measurement 1 (L1-L2): Calc. Voltage"
  pObject: object
  "Controlled Object"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  cbusbar: object
  "Effective Meas. Element"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  UmeaTag3: str
  "Measurement 3 (L3-L1): TagName 3"
  charact: list
  "Charact."
  iStatus2: int
  "Status: Status"
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  sTagID: str
  "TagID"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  pbusbar: object
  "Remote Measurement Point"
  Multip3: float
  "Measurement 3 (L3-L1): Multiplicator"
  Umea2: float
  "Measurement 2 (L2-L3): Measured Voltage"
  cpArea: object
  "Area"
  Umea1: float
  "Measurement 1 (L1-L2): Measured Voltage"
  cpSupplyTransformer: object
  "Supplying Transformer"
  Ucal3: float
  "Measurement 3 (L3-L1): Calc. Voltage"
  cMeaVal3: float
  "Measurement 3 (L3-L1): Measurement Value"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  iStatus3: int
  "Status: Status"
  root_id: object
  "Original Location"
  pCtrl: object
  "Controller"
  Multip1: float
  "Measurement 1 (L1-L2): Multiplicator"
  loc_name: str
  "Name"
  cMeaVal2: float
  "Measurement 2 (L2-L3): Measurement Value"
  Udif2: str
  "Measurement 2 (L2-L3): Voltage Deviation"
  fold_id: object
  "In Folder"
  cMeaVal1: float
  "Measurement 1 (L1-L2): Measurement Value"
  iStatus1: int
  "Status: Status"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def UpdateControl(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetStatusBit(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetStatusTmp(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def ResetStatusBit(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetStatusBitTmp(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def InitTmp(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def UpdateCtrl(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def IsStatusBitSetTmp(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def IsStatusBitSet(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetMeaValue(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetMeaValue(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def CopyExtMeaStatusToStatusTmp(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def ResetStatusBitTmp(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetStatus(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetStatusTmp(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetStatus(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaExtvmea(Protocol):
  errOutOfService: int
  "Detailed Error Description: Measurement out of service"
  variabName: str
  "Variable Name"
  cpOperator: object
  "Operator"
  errNdSumP: int
  "Detailed Error Description: Node sum checks for P"
  dat_src: str
  "Data source"
  errExcNomLoading: int
  "Detailed Error Description: Branch loadings exceed nominal values"
  chr_name: str
  "Characteristic Name"
  delSet: float
  "Deviation from Measurement"
  appr_modby: str
  "Approval Information: Modified by"
  errBadData: int
  "Detailed Error Description: Bad measurement"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  Umea: float
  "Measurement: Measured Voltage"
  errRedundant: int
  "Detailed Error Description: Redundant measurement for observability"
  cDisplayName: str
  "Display Name"
  appr_modif: int
  "Approval Information: Modified"
  errExcNomLoss: int
  "Detailed Error Description: Large branch losses"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpBranch: object
  "Branch"
  varName: str
  "Variable Name"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  errNdSumQ: int
  "Detailed Error Description: Node sum checks for Q"
  desc: list
  "Description"
  cUserDefIndex: int
  "User defined Index"
  iSchemeStatus: int
  "Scheme Status"
  pObject: object
  "Controlled Object"
  oid_: int
  "ObjectID"
  iStatus: int
  "Status"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  cMeaVal: float
  "Measurement: Measurement Value"
  Multip: float
  "Measurement: Multiplicator"
  cbusbar: object
  "Effective Meas. Element"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  errNegLoss: int
  "Detailed Error Description: Negative losses on passive branches"
  charact: list
  "Charact."
  accuracy: float
  "Ratings: Accuracy Class"
  dataExtDesc: list
  "Description"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  cIsValid: int
  "Is Valid"
  error: int
  "Error description Code"
  errStatus: int
  "Detailed Error Description: Input status of measurement disallows calculation"
  dataExtUnit: list
  "Unit"
  sTagID: str
  "TagID"
  errFlwIfOpn: int
  "Detailed Error Description: Large branch flows on open ended branches"
  cpMeteostat: object
  "Meteo Station"
  pbusbar: object
  "Remote Measurement Point"
  cpArea: object
  "Area"
  Udif: float
  "Measurement: Voltage Deviation"
  RedundanceGrp: int
  "Detailed Error Description: Equivalence class (of redundant measure)"
  cpSupplyTransformer: object
  "Supplying Transformer"
  errUnneededPseudo: int
  "Detailed Error Description: Unneeded pseudo-measurement"
  gnrl_modby: str
  "Object modified by"
  errConsDir: int
  "Detailed Error Description: Consistent active power flow direction at each side of branch"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  deadband: float
  "Measurement: OPC deadband"
  pCtrl: object
  "Controller"
  loc_name: str
  "Name"
  RedundanceLevel: int
  "Detailed Error Description: Level of redundancy"
  cObjFun: float
  "Measurement: Objective function"
  fold_id: object
  "In Folder"
  Ucal: float
  "Measurement: Calc. Voltage"
  cValueTmp: float
  "Tmp Value"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def UpdateControl(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetStatusBit(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetStatusTmp(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def ResetStatusBit(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetStatusBitTmp(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def InitTmp(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def UpdateCtrl(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def IsStatusBitSetTmp(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def IsStatusBitSet(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetMeaValue(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetMeaValue(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def CopyExtMeaStatusToStatusTmp(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def ResetStatusBitTmp(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetStatus(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetStatusTmp(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetStatus(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StaSwitch(Protocol):
  iExclRA: int
  "Excluded from Running Arrangement"
  typ_id: object
  "Type"
  Con1: int
  "internal node number for Connection 1"
  cpCts: object
  "Current Transformer"
  cpOperator: object
  "Operator"
  Tprot: float
  "Protection Tripping Time"
  deltaFlow: float
  "Max. active power change"
  shownValues: int
  "Value representation"
  Con2: int
  "internal node number for Connection 2"
  idetail: int
  "Detailed for calculation"
  Brkload: float
  "Loading"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  iRestore: int
  "Use as power restoration switch"
  t_del_b: float
  "Scatter: Phase b"
  ctrl_type: int
  "Power Restoration: Sectionalising:Remote Controlled (Stage 1):Indicator of Short Circuit (Stage 2):Manual (Stage 3)"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  cConBus2: object
  "Element j"
  t_del_a: float
  "Scatter: Phase a"
  t_del_n: float
  "Scatter: Neutral"
  iSep: int
  "Power Restoration: Switch can be opened during restoration"
  cDisplayName: str
  "Display Name"
  for_name: str
  "Foreign Key"
  revFlowChk: int
  "Consider in the reversed power flow analysis"
  ciDist: int
  "Distance from infeed in number of buses"
  iEarth: int
  "Earthed"
  cpBranch: object
  "Branch"
  iNeutInter: int
  "Switch interrupts neutral wire"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  rel_hasProt: int
  "Fault clearance: Consider as switch with protection device"
  ciEarthed: int
  "Earthed"
  reclAttempts: int
  "Fault clearance: Maximum number of reclosing attempts"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  isclosed: int
  "Actual State:open:closed"
  cpRelays: object
  "Relays"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  iNormOpenSwt: int
  "Normally open switch"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  BrkmaxIp: float
  "Max. Peak Short-Circuit Current"
  cpZone: object
  "Zone"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ciScenarioType: int
  "Scenario Type"
  Tclear: float
  "Fault Clearing Time"
  BrkmaxIb: float
  "Max. Breaking Current"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  logEnvCurve: int
  "Log TRV envelope:No:For first opening event only:For all opening events"
  dataExtUnit: list
  "Unit"
  limitRevFlow: int
  "Limit reversed flow"
  prot_fail: float
  "Failure Data for Protection: Circuit breaker fails to open"
  cpMeteostat: object
  "Meteo Station"
  Tswitch: float
  "Power Restoration: Time to actuate switch"
  spon_prot_t: float
  "Independent unnecessary open: Time to close"
  aUsage: str
  "Switch Type"
  cpArea: object
  "Area"
  cTswitch: float
  "Power Restoration: Time to open remote controlled switch"
  deltaFlowrel: float
  "Max. active power change"
  iResDir: int
  "Power Restoration: Power Restoration:Independent of Direction:Branch to Node:Node to Branch:Do not use for power restoration"
  dep_protOver: float
  "Failure Data for Protection: Unnecessary backup protection maloperation"
  cpSupplyTransformer: object
  "Supplying Transformer"
  rel_hasRecl: int
  "Fault clearance: Consider as switch with automatic reclosing device"
  t_del_c: float
  "Scatter: Phase c"
  spon_prot_f: float
  "Failure Data for Protection: Frequency of spurious protection operation"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  BrkIpload: float
  "Loading (Peak)"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  BrkIbload: float
  "Loading (Interrupting)"
  cpGrid: object
  "Grid"
  iNoOpt: int
  "Exclude from optimisation"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  cConBus1: object
  "Element i"
  loc_name: str
  "Name"
  on_off: int
  "Closed"
  iUse: int
  "Type of Usage"
  fold_id: object
  "in Cubicle"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsOpen(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsClosed(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def Open(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def Close(*args):
    ...

  def GetImpedance(*args):
    ...



class ComAddlabel(Protocol):
  stepSizeVals: float
  "Search window: Width"
  ciLevel: float
  "Confidence Interval: Level"
  iopt_filt: int
  "Search window"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  colour: int
  "Colour"
  order: float
  "Order"
  addoptions: str
  "Additional Parameters"
  iopt_var: str
  "Label"
  for_name: str
  "Foreign Key"
  legend: str
  "Legend"
  iopt_ex: int
  "Remove existing labels"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  stepSizeDots: int
  "Search window: Points"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class ComAddon(Protocol):
  script: object
  "Script"
  name: str
  "Module Name"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  key: str
  "Module Key"
  IntExpr: list
  "Value"
  order: float
  "Order"
  IntType: list
  "Type"
  for_name: str
  "Foreign Key"
  contents: list
  "Variable Definitions and Script"
  cpHeadFold: object
  "Head Folder"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  IntDesc: list
  "Description"
  IntName: list
  "Name"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  IntUnit: list
  "Unit"
  dataExtUnit: list
  "Unit"
  addoptions: str
  "Additional Parameters"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def DefineDoublePerConnection(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def DefineString(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def FinaliseModule(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetActiveModule(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def DefineDoubleVectorPerConnection(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def DefineIntegerVector(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def SetActiveModule(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def DefineDouble(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def DeleteModule(*args):
    ...

  def DefineInteger(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def DefineIntegerVectorPerConnection(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def ModuleExists(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def DefineStringPerConnection(*args):
    ...

  def DefineObjectVectorPerConnection(*args):
    ...

  def DefineIntegerPerConnection(*args):
    ...

  def GetUnom(*args):
    ...

  def DefineObjectVector(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def DefineObject(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def DefineDoubleMatrix(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def DefineDoubleVector(*args):
    ...

  def DefineObjectPerConnection(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def CreateModule(*args):
    ...

  def GetImpedance(*args):
    ...



class ComAmpacity(Protocol):
  iopt_sel: int
  "Selection"
  iopt_rep: int
  "Print report after calculation"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  iopt_method: int
  "Method"
  order: float
  "Order"
  iopt_chng: int
  "Modifications"
  frmShc: int
  "Short-circuit duration"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  p_selection: object
  "Selection: Cables"
  pRes: object
  "Results"
  iSchemeStatus: int
  "Scheme Status"
  iopt_cmd: int
  "Modify derating factor of lines"
  oid_: int
  "ObjectID"
  cout: object
  "Print report after calculation: Report"
  gnrl_modif: int
  "Object modified"
  iopt_geoG: int
  "Geometric factor analytically determined"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dbgOn: int
  "Detailed (full output of analysed command)"
  dataExtUnit: list
  "Unit"
  addoptions: str
  "Additional Parameters"
  iadiabshc: int
  "Calculate adiabatic short-circuit rating"
  p_selectlay: object
  "Selection: Cable layout"
  gnrl_modby: str
  "Object modified by"
  fr_initIc: int
  "Initial current rating calculation"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  tshc: float
  "Short-circuit duration: Duration"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def ExecuteAmpacityCalc(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComAuditlog(Protocol):
  filename: str
  "File name"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  order: float
  "Order"
  addoptions: str
  "Additional Parameters"
  for_name: str
  "Foreign Key"
  iopt_command: str
  "Command"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  filterStartTime: int
  "Time filter for Report and Export: Start time"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  filterEndTime: int
  "Time filter for Report and Export: End time"
  filter: int
  "Time filter for Report and Export"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def Check(*args):
    ...

  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class ComBoundary(Protocol):
  pRegions: object
  "Boundary composition: Selection"
  pFiBorder: object
  "Use fictitious border network: Border network"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  order: float
  "Order"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  frm_select: int
  "Boundary composition"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  iopt_select: int
  "Boundary definition"
  gnrl_modif: int
  "Object modified"
  iLineDist: int
  "Choice of the border inside a branch (*.ElmBranch): Prefer the longest line modelled as distributed parameters"
  charact: list
  "Charact."
  bndfoldname: object
  "Target folder"
  dataExtDesc: list
  "Description"
  pBranches: object
  "Boundary composition: Selection"
  dataExtUnit: list
  "Unit"
  addoptions: str
  "Additional Parameters"
  iFiNet: int
  "Use fictitious border network"
  iopt_inter: int
  "Assign selected branch elements to interior region"
  copt_select: int
  "Boundary definition"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  iopt_split: int
  "Define only splitting boundaries"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCreatedBoundaries(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComCapo(Protocol):
  min_prob: float
  "Ignore load states with a small probability: Minimum Probability"
  iopt_lims: int
  "Limit number of load states"
  cCostAftV: float
  "Voltage Violations"
  iopt_meth: int
  "Method"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  iopt_app: int
  "Optimisation Approach"
  cCapAdd: float
  "After Optimisation"
  caccStates: float
  "Accuracy"
  feeder: object
  "Feeder"
  iopt_out: int
  "Print report after optimisation"
  num_states: int
  "Limit number of load states: Maximum number"
  order: float
  "Order"
  vminLim: float
  "Voltage Tolerance: Lower Limit"
  vmaxLim: float
  "Voltage Tolerance: Higher Limit"
  iopt_lev: int
  "Method"
  iopt_prob: int
  "Ignore load states with a small probability"
  shntcost: list
  "Cost"
  for_name: str
  "Foreign Key"
  contents: list
  "Available Capacitors"
  cCapAll: float
  "New Capacitors"
  cpHeadFold: object
  "Head Folder"
  cCostAftT: float
  "Total"
  maxmvar: float
  "Constraints: Maximum"
  shntqstep: list
  "Q per Step"
  ecost: float
  "Energy Costs: Energy Cost"
  iopt_fixn: int
  "Available Capacitors"
  iSchemeStatus: int
  "Scheme Status"
  vmax: float
  "Constraints: Upper Voltage Limit"
  oid_: int
  "ObjectID"
  maxiter: int
  "Iteration Control: Maximum Number of Iterations"
  cCostBefV: float
  "Voltage Violations"
  shntmxsteps: list
  "Max. No. of Steps"
  cCostAftP: float
  "Power Losses"
  starttime: int
  "Start Time"
  iopt_clim: int
  "Constraints: Total Reactive Power of all Capacitors"
  gnrl_modif: int
  "Object modified"
  iopt_bus: int
  "Candidate Buses"
  iopt_draw: int
  "Draw the installed capacitors"
  cCostSavT: float
  "Total"
  endtime: int
  "End Time"
  charact: list
  "Charact."
  iopt_cost: int
  "Energy Costs: Take from External Grid"
  dataExtDesc: list
  "Description"
  shntswitch: list
  "Switchable"
  dataExtUnit: list
  "Unit"
  shnttech: list
  "Technology"
  cCostNwSh: float
  "Costs of new capacitors"
  cstarttime: int
  "Start Time"
  cCostSavV: float
  "Voltage Violations"
  tridisc: object
  "Discrete Scale and Trigger"
  iopt_newchar: int
  "Load States"
  cshntmxsteps: int
  "Max.Step"
  addoptions: str
  "Additional Parameters"
  cecost: float
  "Energy Costs: Energy Cost"
  iopt_anl: int
  "Sensitivity Analysis"
  iopt_trea3ph: int
  "Treatment of 3-phase capacitors"
  vmin: float
  "Constraints: Lower Voltage Limit"
  shntignored: list
  "Ignored"
  cCostBefP: float
  "Power Losses"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  cCapBef: float
  "Before Optimisation"
  tid_: int
  "TimeID"
  iopt_char: int
  "Consider Load Characteristics"
  iopt_con: int
  "Optimisation"
  root_id: object
  "Original Location"
  weight2: float
  "Penalty Factors for Voltage Deviation: Additional Factor outside range [vmin,vmax]"
  maxtime: float
  "Iteration Control: Maximum Execution Time"
  cCostBefT: float
  "Total"
  weight: float
  "Penalty Factors for Voltage Deviation: Factor for Deviation from 1 p.u."
  loc_name: str
  "Name"
  cCostSavP: float
  "Power Losses"
  accStates: float
  "Accuracy"
  percent: float
  "Candidate Buses: Candidate Buses"
  vectime: object
  "Time Vector"
  iopt_ldf: int
  "Network Representation"
  fold_id: object
  "In Folder"
  cendtime: int
  "End Time"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def TotalLossCost(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def ConnectShuntToBus(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def LossCostAtBusTech(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComCimdbexp(Protocol):
  selectedModels: list
  "Selected"
  escapeSequences: list
  "Sequence"
  archiveName: list
  "Export as: Archive name"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  order: float
  "Order"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  cSequence: list
  "Escape sequence"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  cFormat: list
  "Format"
  cValue: list
  "Value"
  targetFolder: list
  "Target folder"
  addoptions: str
  "Additional Parameters"
  selectedFormats: list
  "Selected"
  fileName: str
  "File name"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  zipModels: int
  "Export as"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  sourcePath: object
  "Source data"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComCimdbimp(Protocol):
  iopt_target: int
  "Import into"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  order: float
  "Order"
  targetName: str
  "Import into: Name"
  addoptions: str
  "Additional Parameters"
  for_name: str
  "Foreign Key"
  targetPath: object
  "Import into: Path"
  cpHeadFold: object
  "Head Folder"
  fileName: str
  "File name"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def ImportAndConvert(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class ComCimvalidate(Protocol):
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  order: float
  "Order"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  addoptions: str
  "Additional Parameters"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  sourcePath: object
  "CIM Archives or Models"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetModel(*args):
    ...

  def GetInputObject(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetClassType(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def GetModelId(*args):
    ...

  def GetType(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def GetNumberOfValidationMessages(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetObject(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetObjectId(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def GetDescriptionText(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def GetProfile(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetSeverity(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComConreq(Protocol):
  cLimits: list
  "Limit/value"
  iopt_Loading_bdew: int
  "Calculations: Loading of network components"
  errVChg: int
  "Error"
  iopt_lims: int
  "Resonances (HV networks only): Calculation of emission limits:Simplified:General"
  cfrmCndTemp: int
  "User-defined conductor temperature (short-circuit)"
  iopt_VChg_vde: int
  "Calculations: Permissible voltage changes"
  iopt_Loading_vde4110: int
  "Calculations: Loading of network components"
  Uc_dachcz: float
  "Declared supply voltage, Uc"
  cfrmSkvCalc: int
  "Network short-circuit power and impedance angle calculation"
  opScenTyp: object
  "Resonances (HV networks only): Operation Scenario for calculation of SkV_akt"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  iopt_mde: int
  "Method:According to D-A-CH-CZ:According to BDEW, 4th Supplement:According to VDE-AR-N 4100/4105:According to VDE-AR-N 4110"
  iopt_CommNotch_vde4110: int
  "Calculations: Commutation notches"
  pubEdition: int
  "Edition:&0&3:&1&2"
  iopt_VRise: int
  "Calculations: Slow voltage change (generating stations only)"
  iopt_grid: int
  "Resonances (HV networks only): Grid contains mostly:Cables:Overhead lines"
  iopt_MinSkV_vde4105: int
  "Calculations: Minimum short-circuit power at junction point"
  iopt_Interhrm: int
  "Calculations: Interharmonic voltages"
  iopt_MinSkV_vde4110: int
  "Calculations: Minimum short-circuit power at junction point"
  detailedOutput: int
  "Detailed output"
  order: float
  "Order"
  iopt_MaxShc_bdew: int
  "Calculations: Maximum short-circuit current"
  iopt_hvres: int
  "Resonances (HV networks only): Consideration of resonances:None:Approximate"
  iopt_simplifiedHrm_vde4105: int
  "Simplified calculation of harmonic current limits"
  iopt_VUnbal: int
  "Calculations: Voltage unbalance"
  for_name: str
  "Foreign Key"
  iopt_Q_vde4110: int
  "Reactive power"
  cpHeadFold: object
  "Head Folder"
  year_pub4110: int
  "Published:2018"
  iopt_VChgFlk: int
  "Calculations: Voltage changes and flicker"
  iopt_Report: int
  "Report"
  frmSkvCalc: int
  "Network short-circuit power and impedance angle calculation"
  iopt_HrmAll_bdew: int
  "Calculations: Harmonics, interharmonics and audio-frequency ripple control"
  iopt_HrmAll_vde4105: int
  "Calculations: Harmonics, interharmonics and supraharmonics"
  advLimits: int
  "Definition of limits"
  iopt_VChg_bdew: int
  "Calculations: Admissible voltage changes"
  iSchemeStatus: int
  "Scheme Status"
  condTempLv: float
  "User-defined conductor temperature (short-circuit): Temperature"
  errSVChg: int
  "Error"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  iopt_SVChg_vde4105: int
  "Calculations: Rapid voltage changes"
  year_pub4105: int
  "Published:2018:2011"
  charact: list
  "Charact."
  ioptSigVolt: int
  "Calculations: Signal voltages"
  dataExtDesc: list
  "Description"
  iopt_HrmAll_vde: int
  "Calculations: Harmonics, interharmonics and audio-frequency ripple control"
  cUnits: list
  "Unit"
  dataExtUnit: list
  "Unit"
  iopt_Hrm: int
  "Calculations: Harmonics"
  iopt_Loading_vde: int
  "Calculations: Loading of network components"
  iopt_Unbal_vde4110: int
  "Unbalance"
  calcMaxShc: int
  "Max. Short-Circuit Current"
  iopt_MaxShc_vde: int
  "Calculations: Maximum short-circuit current"
  calcLoading: int
  "Loading of Network Components"
  selFeeders: object
  "Considered feeder(s)"
  iopt_Flk_vde4110: int
  "Calculations: Flicker"
  addoptions: str
  "Additional Parameters"
  calcHrmRes: int
  "Resonances: Consideration of resonances:None:Approximate:Generalised"
  calcSVChg: int
  "Sudden Voltage Changes"
  frmCndTemp: int
  "User-defined conductor temperature (short-circuit)"
  supIntNodes: int
  "Suppress output for internal nodes"
  iopt_CommNotch: int
  "Calculations: Commutation notches"
  flickerCalc: int
  "Flicker strength of voltage changes"
  iopt_VUnbal_vde: int
  "Calculations: Voltage unbalance"
  iopt_vde4105MV: int
  "Assessment of plants in MV networks"
  iopt_CommNotch_bdew: int
  "Calculations: Commutation notches"
  iopt_VChg_vde4110: int
  "Calculations: Admissible voltage change"
  iopt_hrmLims: int
  "Detailed output"
  Uc_bdew: float
  "Agreed service voltage, Uc"
  iopt_VChgFlk_bdew: int
  "Calculations: Sudden voltage changes and flicker"
  gnrl_modby: str
  "Object modified by"
  errLoading: int
  "Error"
  pid_: int
  "ProjectID"
  calcVChg: int
  "Admissible Voltage Changes"
  iopt_Flk_bdew: int
  "Flicker"
  tid_: int
  "TimeID"
  iopt_MaxShc_vde4110: int
  "Calculations: Maximum short-circuit current"
  iopt_VChgFlk_vde: int
  "Calculations: Rapid voltage changes and flicker"
  iopt_SVChg_vde4110: int
  "Calculations: Sudden voltage changes"
  root_id: object
  "Original Location"
  iopt_simplifiedHrm_vde4110: int
  "Simplified calculation of harmonic current limits"
  condTempHv: float
  "User-defined conductor temperature (short-circuit): Temperature"
  loc_name: str
  "Name"
  ioptHrm3: int
  "Calculations: Harmonics, interharmonics and supraharmonics"
  Uc_vde4110: float
  "Agreed service voltage, Uc"
  iopt_Flk_vde: int
  "Calculations: Flicker"
  iopt_CommNotch_vde: int
  "Calculations: Commutation notches"
  iopt_HrmAll_vde4110: int
  "Calculations: Harmonics, interharmonics and supraharmonics"
  fold_id: object
  "In Folder"
  errMaxShc: int
  "Error"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComContingency(Protocol):
  restore: str
  "Switch/Load Events: System Restoration"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  cn_k: list
  "Contingency Order"
  order: float
  "Order"
  IntState: list
  "State"
  for_name: str
  "Foreign Key"
  contents: list
  "Events"
  cpHeadFold: object
  "Head Folder"
  n_k: int
  "Contingency Order"
  outserv: int
  "Not analysed"
  iSchemeStatus: int
  "Scheme Status"
  cluster: int
  "Load States: Cluster"
  oid_: int
  "ObjectID"
  maintProb: float
  "Additional probability for dealing with maintenance"
  gnrl_modif: int
  "Object modified"
  prob_maint: float
  "Probability that this is in maintenance"
  year: int
  "Load States: Year"
  pCase: object
  "Fault Case"
  iopt_evts: str
  "Events used for this Contingency"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  cStepByStep: int
  "Step by step execution in trace (one step -> one event)"
  dType: list
  "Failure Type"
  dataExtUnit: list
  "Unit"
  addoptions: str
  "Additional Parameters"
  failType: list
  "Failure Type"
  gnrl_modby: str
  "Object modified by"
  BBFault: int
  "Busbar Fault"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  Elms: list
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetNumberOfTimeSteps(*args):
    ...

  def CreateRecoveryInformation(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def StopTrace(*args):
    ...

  def GetNumberOfLoadEventsForTimeStep(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def JumpToLastStep(*args):
    ...

  def GetInterruptedPowerAndCustomersForTimeStep(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def GetTotalInterruptedPower(*args):
    ...

  def GetGeneratorEvent(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetInterruptedPowerAndCustomersForStage(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetSwitchEvent(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetTimeOfStepInSeconds(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def GetNumberOfGeneratorEventsForTimeStep(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def ContinueTrace(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def StartTrace(*args):
    ...

  def GetNumberOfSwitchEventsForTimeStep(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def RemoveEvents(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetLoadEvent(*args):
    ...

  def GetObj(*args):
    ...



class ComCoordreport(Protocol):
  p_pathDist: object
  "Distance protection settings: Path selection"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  iopt_repDist: int
  "Distance protection settings: Create report"
  order: float
  "Order"
  for_name: str
  "Foreign Key"
  iopt_diaCurr: int
  "Overcurrent protection settings: Create Time-Overcurrent Plot"
  cpHeadFold: object
  "Head Folder"
  reportDist: int
  "Distance protection settings"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  p_res: object
  "Result selection: Result file"
  dataExtDesc: list
  "Description"
  p_pathCurr: object
  "Overcurrent protection settings: Path selection"
  dataExtUnit: list
  "Unit"
  addoptions: str
  "Additional Parameters"
  iopt_repCurr: int
  "Overcurrent protection settings: Create report"
  iopt_diaDist: int
  "Distance protection settings: Create Time-Distance Plot"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  reportCurr: int
  "Overcurrent protection settings"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def ResultForFuseVariable(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def ResultForNonDirectionalBackupVariable(*args):
    ...

  def HasResultsForDirectionalBackup(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def HasResultsForZone(*args):
    ...

  def SearchObject(*args):
    ...

  def TransferNonDirectionalBackupResultsTo(*args):
    ...

  def TransferResultsTo(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def ResultForInstantaneousVariable(*args):
    ...

  def TopologyForOverreachVariable(*args):
    ...

  def SetAttribute(*args):
    ...

  def ResultForShortCircuitVariable(*args):
    ...

  def MaxZoneNumberFor(*args):
    ...

  def HasResults(*args):
    ...

  def TopologyForDirectionalBackupVariable(*args):
    ...

  def ResultForMaxCurrent(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def TopologyForZoneVariable(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def TopologyForNonDirectionalBackupVariable(*args):
    ...

  def HasResultsForNonDirectionalBackup(*args):
    ...

  def ResultForOverloadVariable(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def ResultForZoneVariable(*args):
    ...

  def ResultForDirectionalBackupVariable(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def DevicesToReport(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def TopologyForFuseVariable(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def TransferDirectionalBackupResultsTo(*args):
    ...

  def TopologyForMaxCurrent(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasResultsForInstantaneous(*args):
    ...

  def GetUnom(*args):
    ...

  def TransferOverreachResultsTo(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def HasResultsForOverload(*args):
    ...

  def CopyData(*args):
    ...

  def TopologyForInstantaneousVariable(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def TransferZoneResultsTo(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def TopologyForOverloadVariable(*args):
    ...

  def HasResultsForShortCircuit(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def HasResultsForOverreach(*args):
    ...

  def HasResultsForFuse(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def TopologyForShortCircuitVariable(*args):
    ...

  def GetImpedance(*args):
    ...

  def ResultForOverreachVariable(*args):
    ...



class ComDllmanager(Protocol):
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  order: float
  "Order"
  addoptions: str
  "Additional Parameters"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  file: str
  "File Name"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  iopt_type: str
  "DLL Type"
  gnrl_modif: int
  "Object modified"
  iopt_action: str
  "Action"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def Report(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class ComDpl(Protocol):
  typemetadata_key: list
  "Type Key"
  IntResName: list
  "Name"
  modifytime: int
  "Last Modified"
  version: str
  "Version"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  IntExpr: list
  "Value"
  order: float
  "Order"
  xDesc: list
  "Long Description"
  displayModule: list
  "Third Party Licence (will only be applied after encryption!): Module"
  IntType: list
  "Type"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  obj_id: list
  "object"
  obj_name: list
  "Name"
  IntResType: list
  "Type"
  cpHeadFold: object
  "Head Folder"
  isRemoteScriptSet: int
  "A remote script is set."
  ResultStr: list
  "Result String"
  displayCompanyCode: list
  "Third Party Licence (will only be applied after encryption!): Company Code"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  sel_id: object
  "General Selection"
  gnrl_modif: int
  "Object modified"
  IntDesc: list
  "Description"
  IntName: list
  "Name"
  display3rdParty: list
  "Third Party Licence"
  script_id: object
  "Remote script"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  IntUnit: list
  "Unit"
  dataExtUnit: list
  "Unit"
  obj_desc: list
  "Description"
  typemetadata_version: list
  "Version"
  typemetadata_changeLog: list
  "Change Log"
  IntResExpr: list
  "Value"
  obj: object
  "object"
  xNotes: list
  "Release Notes"
  addoptions: str
  "Additional Parameters"
  shortDesc: str
  "Short Description"
  ciLicenceReq: int
  "Licence required (DIG only)"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  author: str
  "Author"
  company: str
  "Company"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  IntResUnit: list
  "Unit"
  loc_name: str
  "Name"
  IntResDesc: list
  "Description"
  xScript: list
  "Code"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def CheckSyntax(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetInputParameterString(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetInputParameterInt(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def SetInputParameterDouble(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetThirdPartyModule(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def IsEncrypted(*args):
    ...

  def GetExternalObject(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def SetExternalObject(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def SetInputParameterString(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetInputParameterDouble(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def Encrypt(*args):
    ...

  def SetInputParameterInt(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...

  def ResetThirdPartyModule(*args):
    ...



class ComFlickermeter(Protocol):
  iopt_imp: int
  "File Input: Import data from:COMTRADE:Comma Separated Values (*.csv):PowerFactory Measurement File:User Defined Text File:Result File"
  iopt_csep: int
  "File Input: Separator for columns"
  offset: float
  "Parameter Definitions: Filter Offset"
  tstart: float
  "Signal Settings: Start Time"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  iColName: list
  "Variable Name"
  cvariable: list
  "Variable"
  order: float
  "Order"
  iopt_tstart: int
  "Signal Settings: Specify Start Time"
  iopt_plt: int
  "Calculation Settings: Calculate Plt"
  iColNum: list
  "Column Number"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  fcalib: float
  "Parameter Definitions: Scaling Factor"
  iopt_Report: int
  "Report"
  tshort: float
  "Calculation Settings: Observation Period:1:5:10:15"
  sampRateTol: float
  "Constant Sampling Rate: Tolerance"
  element: list
  "Element"
  iSchemeStatus: int
  "Scheme Status"
  separator: str
  "Separator for columns"
  oid_: int
  "ObjectID"
  variable: list
  "Variable"
  gnrl_modif: int
  "Object modified"
  iopt_sig: int
  "Signal Settings: Signal Type"
  charact: list
  "Charact."
  p_resvar: object
  "Result Variables"
  dataExtDesc: list
  "Description"
  newSampRate: float
  "Signal Settings: New Sampling Rate"
  dataExtUnit: list
  "Unit"
  decseprtr: str
  "Decimal separator"
  iColSelVar: list
  "Calculate Pst"
  pResfile: object
  "File Input: Result File"
  addoptions: str
  "Additional Parameters"
  col_Sep: str
  "File Input: Separator for columns"
  N: int
  "Calculation Settings: Observation Periods"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  iopt_resamp: int
  "Signal Settings: Resample Data"
  fc: float
  "Parameter Definitions: Cut-off Frequency"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  dec_Sep: str
  "File Input: Decimal separator"
  loc_name: str
  "Name"
  f_name: str
  "File Input: Filename"
  iopt_sep: int
  "File Input: Use system separators"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComGenrelinc(Protocol):
  iopt_network: int
  "Consider Network Constraints"
  dbg_colgen: list
  "Object"
  dbg_colpmx: list
  "Value"
  day_1: int
  "Time Dependent Data Days: Monday"
  day_7: int
  "Time Dependent Data Days: Sunday"
  dbg_basic: int
  "Show basic information"
  iopt_maint: int
  "Consider Maintenance Plans"
  iopt_load: int
  "Demand Consideration"
  dat_src: str
  "Data source"
  dbg_timechk: int
  "Check available time points"
  month_10: int
  "Time Dependent Data Months: October"
  chr_name: str
  "Characteristic Name"
  month_12: int
  "Time Dependent Data Months: December"
  order: float
  "Order"
  dbg_storeit: int
  "At each iteration...: Store generation results (for specified single iteration)"
  updateRng: int
  "Global random number generator: Update global random number generator"
  i_rndseed: int
  "Global random number generator: Seed"
  month_05: int
  "Time Dependent Data Months: May"
  lastSeed: list
  "Global random number generator: Last used seed"
  for_name: str
  "Foreign Key"
  day_3: int
  "Time Dependent Data Days: Wednesday"
  cpHeadFold: object
  "Head Folder"
  hour_str1: int
  "Time Dependent Data Time Intervals: From"
  hour_end1: int
  "Time Dependent Data Time Intervals: To"
  dbg_iter: int
  "At each iteration...: Show generation/demand values per machine"
  iopt_intrvl3: int
  "Time Dependent Data Time Intervals: Interval 3:"
  iSchemeStatus: int
  "Scheme Status"
  month_08: int
  "Time Dependent Data Months: August"
  day_2: int
  "Time Dependent Data Days: Tuesday"
  oid_: int
  "ObjectID"
  lossesP: float
  "Network: System Losses"
  gnrl_modif: int
  "Object modified"
  crndNumGen: list
  "Global random number generator: Actually used method:"
  rndNumGen: int
  "Global random number generator: Method:"
  iopt_rnd: int
  "Global random number generator: Seeding type:Automatic:User defined"
  month_07: int
  "Time Dependent Data Months: July"
  charact: list
  "Charact."
  month_11: int
  "Time Dependent Data Months: November"
  hour_str2: int
  "Time Dependent Data Time Intervals: From"
  dataExtDesc: list
  "Description"
  p_resdraw: object
  "Results: MC Draws"
  dbg_mach: int
  "At each iteration...: Show generation/demand values per parallel machine"
  month_06: int
  "Time Dependent Data Months: June"
  dataExtUnit: list
  "Unit"
  year_study: int
  "Time Dependent Data: Year of Study"
  day_5: int
  "Time Dependent Data Days: Friday"
  dbg_only4it: int
  "At each iteration...: Only for iteration"
  month_04: int
  "Time Dependent Data Months: April"
  iopt_resdraw: int
  "Results: MC Draws"
  iopt_asc: int
  "Report"
  addoptions: str
  "Additional Parameters"
  hour_str3: int
  "Time Dependent Data Time Intervals: From"
  month_01: int
  "Time Dependent Data Months: January"
  dbg_system: int
  "At each iteration...: Show aggregated values per system"
  month_09: int
  "Time Dependent Data Months: September"
  day_4: int
  "Time Dependent Data Days: Thursday"
  iopt_intrvl2: int
  "Time Dependent Data Time Intervals: Interval 2:"
  dbg_avtimes: int
  "Show available time points"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  dbg_drtimes: int
  "At each iteration...: Show drawn times"
  p_resdist: object
  "Results: Distribution"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  dbg_grid: int
  "At each iteration...: Show aggregated values per grid"
  hour_end3: int
  "To"
  month_02: int
  "Time Dependent Data Months: February"
  loc_name: str
  "Name"
  month_03: int
  "Time Dependent Data Months: March"
  day_6: int
  "Time Dependent Data Days: Saturday"
  hour_end2: int
  "Time Dependent Data Time Intervals: To"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def GetMaxNumIterations(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetCurrentIteration(*args):
    ...

  def GetImpedance(*args):
    ...



class ComGridtocim(Protocol):
  convertEQ: int
  "Profiles to convert: Equipment"
  version: str
  "Profile version"
  selectedGrids: list
  "Selected"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  order: float
  "Order"
  targetName: str
  "Create models in: Name"
  dependencies: object
  "Create models in: Additional Archives"
  asReduced: int
  "Profile conversion: Create bus-branch model"
  for_name: str
  "Foreign Key"
  convertGL: int
  "Profiles to convert: Geographical Location"
  targetPath: object
  "Create models in: Target Archive"
  cpHeadFold: object
  "Head Folder"
  asDifference: int
  "Profile conversion: Create difference models"
  cBoundary: list
  "Boundary"
  partial: int
  "Profile conversion"
  iSchemeStatus: int
  "Scheme Status"
  cSelected: list
  "Selected"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  convertSSH: int
  "Profiles to convert: Steady State Hypothesis"
  iopt_target: int
  "Create models in"
  charact: list
  "Charact."
  convertDY: int
  "Profiles to convert: Dynamics"
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  convertDL: int
  "Profiles to convert: Diagram Layout"
  addoptions: str
  "Additional Parameters"
  convertTP: int
  "Profiles to convert: Topology"
  profileFlag: int
  "Profile Filter"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  authorityDesc: list
  "Model description: Description"
  tid_: int
  "TimeID"
  authorityVersion: str
  "Model description: Version"
  root_id: object
  "Original Location"
  cAuthority: list
  "Authority URI"
  loc_name: str
  "Name"
  convertSC: int
  "Profiles to convert: Short Circuit"
  convertSV: int
  "Profiles to convert: State Variables"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetAuthorityUri(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def SetGridsToExport(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def AssignCimRdfIds(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def ConvertAndExport(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def SetBoundaries(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComHostcap(Protocol):
  ioptVoltages: int
  "Voltages"
  dfliclt: float
  "Long-term flicker disturbance factor (continuous operation)"
  inclFeederStartNode: int
  "Include feeder starting terminal"
  ioptBrkreach: int
  "Breaker reduction of reach"
  ioptPqual: int
  "Constraints: Power quality limits"
  reduceFeeders: int
  "Reduce feeders"
  iopt_sumvarschk: int
  "Check summary variables only (fast check)"
  ioptIndFeeder: int
  "Ignore terminals which are not part of a feeder"
  plodini: float
  "Connect new load to the busbar: Initial active power"
  selBus: object
  "Busbar selection (optional)"
  shckss: float
  "Contribution factor"
  totshc: float
  "Short-circuit contribution"
  ioptLoads: int
  "Consideration of loads"
  voltchng: float
  "Permissible voltage change (from no DER to full DER): Max. voltage change"
  fuseCurrChng: float
  "Fuse current change"
  pHflick: object
  "Harmonics contribution: Flicker coefficients"
  caseNum: str
  "Case number"
  dat_src: str
  "Data source"
  dindhd: float
  "Individual harmonic magnitude"
  ioptLodNodeOnly: int
  "Only consider terminals where load already connected"
  chr_name: str
  "Characteristic Name"
  ioptShcContr: int
  "Total fault contribution"
  optcosphi: int
  "Power factor attribute"
  coptVrisedrop: int
  "Voltage drop/rise"
  iopt_Uneutral: int
  "Neutral voltage"
  iopt_Feeder: int
  "Voltage drop/rise"
  ioptFusecurr: int
  "Fuse current change"
  order: float
  "Order"
  pmax: float
  "User-defined active power limits: Final generated power"
  iopt_sth: int
  "Short-term flicker disturbance factor (continuous operation)"
  objective: int
  "Calculation objective"
  ioptshccalc: int
  "Short-circuit calculation"
  pf_MODE: int
  "Power factor:inductive:capacitive"
  ioptProt: int
  "Constraints: Protection limits"
  iLoad: int
  "Option"
  derpf: float
  "DER power factor"
  optVrisedrop: int
  "Voltage drop/rise"
  if_volmax: float
  "Option: Upper limit of allowed voltage"
  voltunbal: float
  "Voltage unbalance: Max. voltage unbalance factor"
  iopt_ufeedrise: int
  "Feeder voltage rise"
  coptnewlod: int
  "Connect new load to the busbar"
  iopt_thdst: int
  "Total harmonic voltage distortion"
  lodsScaling: int
  "Load scaling factor"
  ioptpmax: int
  "User-defined active power limits"
  iopt1phs: int
  "1-ph fault"
  iopt_skipbcviol: int
  "Ignore elements with base-case violations"
  ivolchnggens: int
  "Generators to be switched off"
  constChkScope: int
  "Constraints check"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  antisland: float
  "Anti-islanding level"
  creduceFeeders: int
  "Reduce feeders"
  iopt_volunbal: int
  "Voltage unbalance"
  iEnableParal: int
  "Parallel computation"
  ioptModGrid: int
  "Apply changes to grid"
  selLod: object
  "Loads selection (optional)"
  coptvolunbal: int
  "Voltage unbalance"
  iopt_innodes: int
  "List ignored internal nodes"
  vlevhi: float
  "Ignore all constraints for nominal voltage...: > (above)"
  iopt_lth: int
  "Long-term flicker disturbance factor (continuous operation)"
  feedVolt: float
  "Feeder voltage"
  cpHeadFold: object
  "Head Folder"
  ivoltreg: int
  "Voltage regulator tap change"
  pchkelms: object
  "Constraints check: Selection"
  ioptGenNodeOnly: int
  "Only consider terminals where generator already connected"
  pProt: object
  "Considered protection devices: Protection device(s)"
  ioptUsrLod: int
  "Consider user-defined load selection"
  iopt_applycontr: int
  "Constraints check"
  ioptFflow: int
  "Forward flow fault current contribution"
  iopt_volcons: int
  "Constraints: Voltage limits"
  pfl_MODE: int
  "Power factor:inductive:capacitive"
  notopo: int
  "No topology rebuild"
  pHctyp: object
  "Harmonics contribution: Harmonic currents"
  totShcContr: float
  "Total fault contribution"
  ioptProtElm: int
  "Considered protection devices"
  iopt_ufeeddrop: int
  "Feeder voltage drop"
  paralSet: int
  iSchemeStatus: int
  "Scheme Status"
  iVolt: int
  "Option"
  maxIter: float
  "Convergence criteria: Max. number of iterations"
  maxVrise: float
  "Option: Maximum Voltage Rise"
  oid_: int
  "ObjectID"
  iopt_ign: int
  "Ignore all constraints for nominal voltage..."
  if_load: float
  "Option: Maximum thermal loading of components"
  selObj: object
  "Hosting sites"
  gnrl_modif: int
  "Object modified"
  iopt_action: int
  "Processing Actions"
  rtox: float
  "Short-circuit contribution: R/X"
  ioptTrip: int
  "Relay/fuse tripping"
  timeTriggersOff: int
  "Ignore time trigger"
  iopt_thdi: int
  "Integer harmonics"
  isOutGrpObjs: int
  "Group reported objects for compact output"
  brkReach: float
  "Breaker reduction of reach"
  addObjs2Transfer: object
  "Additional objects to transfer"
  pDer3p: object
  "3-phase DER element"
  ioptRevFlow: int
  "Reversed power flow"
  sel_filter: object
  "Generators to be switched off: Generators"
  iopt_lodcons: int
  "Constraints: Thermal limits"
  initStep: float
  "Initial conditions: Initial step size"
  charact: list
  "Charact."
  pResult: object
  "Results"
  dataExtDesc: list
  "Description"
  maxctap: int
  "Voltage regulator tap change: Max. allowed number of taps (capacitor)"
  pDer1p: object
  "1-phase DER element"
  iopt_inckss: int
  "Incremental contribution to the short-circuit current"
  maxVdrop: float
  "Option: Maximum Voltage Drop"
  dbgOn: int
  "Detailed debug output:Low:High"
  dataExtUnit: list
  "Unit"
  minCalcPt4Par: int
  "Parallel computation: Minimum number of calculation objects"
  vlevlow: float
  "Ignore all constraints for nominal voltage...: < (below)"
  brkFusCoord: float
  "Breaker/fuse co-ordination"
  pmin: float
  "User-defined active power limits: Initial generated power"
  iopt_allmsgs: int
  "Print all messages"
  ioptAntisl: int
  "Anti-islanding level"
  ioptOnlyBuses: int
  "Consider specific terminals only"
  addoptions: str
  "Additional Parameters"
  outputType: int
  "Output per iteration"
  numObj4Slave: int
  "Parallel computation: Package size for parallel process"
  dthdint: float
  "Integer harmonics"
  iopt_shcmodel: int
  "Short-circuit contribution: Short-circuit model"
  symBrktrip: float
  "Sympathetic breaker tripping"
  if_volmin: float
  "Option: Lower limit of allowed voltage"
  frmVolTypChk: int
  "3-phase (ABC) voltage check"
  iopt_newlod: int
  "Connect new load to the busbar"
  busVoltLimitsOn: int
  "Consider Voltage Limits"
  iopt3phs: int
  "3-ph fault"
  iopt_shc: int
  "Constraints: Short-circuit contribution limits"
  gnrl_modby: str
  "Object modified by"
  frmConnNewLod: int
  "Connect new load to the busbar"
  pid_: int
  "ProjectID"
  lodpf: float
  "Connect new load to the busbar: Power factor"
  globalFeederLimit: int
  "Option"
  ioptFlicker: int
  "Flicker"
  tid_: int
  "TimeID"
  iopt_volchng: int
  "Permissible voltage change (from no DER to full DER)"
  minStep: float
  "Convergence criteria: Min. step size"
  iSysTyp: int
  "Calculation method"
  root_id: object
  "Original Location"
  frwFlowContr: float
  "Forward flow fault current contribution"
  dflicst: float
  "Short-term flicker disturbance factor (continuous operation)"
  iopt2phs: int
  "2-ph fault"
  ioptDerObj: int
  "Connected DER"
  loc_name: str
  "Name"
  Uneutral: float
  "Neutral voltage"
  parallelSetting: object
  "Parallel computation: Parallel computation settings"
  frIterMethd: int
  "Step size algorithm"
  dthd: float
  "Total harmonic voltage distortion"
  fold_id: object
  "In Folder"
  maxtap: int
  "Voltage regulator tap change: Max. allowed number of taps (regulator)"
  initType: int
  "Initialisation of load flow"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CalcMaxHostedPower(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComImport(Protocol):
  dat_src: str
  "Data source"
  datasetLabel: str
  "Dataset import: Label"
  dbDriverName: str
  "Import from: ODBC Driver Name"
  chr_name: str
  "Characteristic Name"
  dbUser: str
  "Import from: User"
  order: float
  "Order"
  dbPassword: str
  "Import from: Password"
  dbAddParam: str
  "Import from: Additional ODBC Parameters"
  for_name: str
  "Foreign Key"
  predeflib: object
  "Import from Library: Predefined Library"
  contents: list
  "Contents"
  dbSchema: str
  "Import from: Schema Name"
  cpHeadFold: object
  "Head Folder"
  dbInfo: str
  "Import from: e.g."
  globTypeLib: object
  "Global type library"
  iSchemeStatus: int
  "Scheme Status"
  targname: str
  "Import into: Name"
  dbDatabase: str
  "Import from: Database"
  oid_: int
  "ObjectID"
  generalValue: list
  "Value"
  iopt_cpylib: int
  "Import from Library: Copy Library into Project"
  gnrl_modif: int
  "Object modified"
  prjTemplate: object
  "Import into: Project Template"
  useDatapart: int
  "Partial import"
  iopt_fkey: int
  "Use foreign keys"
  charact: list
  "Charact."
  targpath: object
  "Import into: in"
  dataExtDesc: list
  "Description"
  iopt_prj: int
  "Import into"
  dataExtUnit: list
  "Unit"
  useDataset: int
  "Dataset import"
  datapartLabel: str
  "Labels"
  pDatabase: object
  "Import from: From Configuration"
  openGraphics: int
  "Open single line diagram(s)"
  addoptions: str
  "Additional Parameters"
  dbServer: str
  "Import from: DB Service"
  dgsFormat: str
  "Source"
  dgsFormatIdx: int
  "Import from: Format"
  datapartLabels: list
  "Partial import: Labels"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  pAddPrj: object
  "Import into: Name"
  iopt_check: int
  "Import from: Replace non-printable characters"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  iopt_switch: int
  "Import from: Create Switch inside Cubicle"
  iopt_schema: int
  "Import from: Use Schema"
  fFile: str
  "Import from: Name"
  loc_name: str
  "Name"
  iopt_noxsd: int
  "Import from: No Schema Validation"
  generalKey: list
  "Key"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetModifiedObjects(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetCreatedObjects(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComInc(Protocol):
  copt_real: int
  "Real-time simulation"
  copt_fastcon: int
  "Simplifications: Fast connection of A-stable models outputs"
  allowedBusErrMv_emt: float
  "Max. acceptable equation error: Bus equations (MV)"
  outofstepdet: float
  "Synchronous machine out of step detection: Detection angle"
  iopt_only: int
  "A-stable integration algorithm: Apply per element"
  iopt_coiref: int
  "Reference"
  reincIter: int
  "Reinitialisation Iteration:Reinitialise in each discrete event iteration step:Reinitialise after discrete event iteration completed"
  rt_inter: float
  "Synchronisation with system time: Time interval used for synchronisation"
  iopt_load: int
  "Snapshot selection"
  iopt_partinc: int
  "Initialisation: Enable partial initialisation in case of deadlock"
  iopt_sample: int
  "Record results"
  chr_name: str
  "Characteristic Name"
  i_multincw: int
  "Initialisation: Issue warnings for multiple initialisation of signals"
  allowedBusErrLv: float
  "Max. acceptable equation error: Bus equations (LV)"
  itrlx: int
  "Iteration: Maximum number of iterations"
  iopt_reinf: int
  "Event: Reset integration formula after reinitialisation of algebraic equations"
  order: float
  "Order"
  iopt_simscn: int
  "Active"
  iopt_locref: int
  "Reference system area"
  updateRng: int
  "Global random number generator: Update global random number generator"
  iinftag: int
  "Consider inertias as infinite"
  tsync: float
  "Buffer size"
  iopt_vdhnm: int
  "Simplified Newton method"
  copt_net: int
  "Network representation"
  iReuseLdf: int
  "Reuse previous load flow results"
  reincEvtType: int
  "Event types:All:Interruptions"
  automaticCompilation: int
  "DSL: Automatic compilation"
  iopt_fastout: int
  "Simplifications: Fast computation of outputs"
  fdec: float
  "Speed factor: decrease"
  iopt_eulmax: int
  "Integration formula restoration steps after reset"
  iopt_fastchk: int
  "Simplifications: Fast convergence check"
  errsm: float
  "Max. acceptable equation error: Bus equations (HV)"
  i_deldirect: int
  "DSL: Fast direct interpolation of buffers (delay and movingavg)"
  oid_: int
  "ObjectID"
  p_event: object
  "Selection of simulation events: Events"
  copt_reinc: int
  "Reinitialise algebraic equations at interruption"
  gnrl_modif: int
  "Object modified"
  iopt_action: int
  "Processing Actions"
  snapPath: str
  "Save snapshot via event: Directory"
  copt_adapt: int
  "Automatic step size adaptation"
  iopt_dis: int
  "Interface: Distributed simulation"
  rndNumGen: int
  "Global random number generator: Method"
  ckres: float
  "Event: Resolution factor (with respect to smallest step)"
  tcemt: float
  "Time constant for EMT simulation"
  p_resvar: object
  "Result variables"
  dtgrd: float
  "Integration step size: Electromechanical transients"
  dataExtDesc: list
  "Description"
  alpha_rms: float
  "Integration: Damping factor"
  finc: float
  "Speed factor: increase"
  dataExtUnit: list
  "Unit"
  itrmxmin: int
  "Event: Maximum number of reschedule event loops"
  solveInitDisc: int
  "Solve discrete states at initialisation"
  sigbuf: int
  "Signal buffer"
  itrmxint: int
  "Event: Maximum number of zero-length interruptions"
  errmax: float
  "Maximum prediction error"
  errsm_emt: float
  "Max. acceptable equation error: Bus equations (HV)"
  copt_lt: int
  "A-stable integration algorithm"
  pid_: int
  "ProjectID"
  errseq: float
  "Integration: Maximum error for dynamic model equations"
  ninc: int
  "Delay for step size increase (number of steps)"
  dtout: float
  "Output sampling step"
  dtout_emt: float
  "Output sampling step"
  cvoltLevMv: float
  "Max. acceptable equation error: >"
  loadSnap: int
  "Load snapshot at initialisation"
  ddtemt_max: float
  "Maximum increase of step size"
  iopt_expref: int
  "Reference system calculation method"
  fold_id: object
  "In Folder"
  snapFile: str
  "Snapshot selection: File"
  mult_out: int
  "Record results: Sampling ratio (output step to integration step)"
  iopt_reinc: int
  "Reinitialise algebraic equations at interruption"
  iopt_outofstep: int
  "Synchronous machine out of step detection"
  dtemt_max: float
  "Integration step size: Maximum step size"
  tstart: float
  "Start time"
  itrjx: int
  "Iteration: Iteration limit to recompute Jacobian matrix"
  itrmxdisc: int
  "Event: Maximum number of discrete event iterations"
  iac: int
  "Integration: Apply AC-adaptation"
  mult_out_emt: int
  "Record results: Sampling ratio (output step to integration step)"
  dat_src: str
  "Data source"
  cloadSnap: int
  "Load snapshot at initialisation"
  allowedErrAllGridEq: float
  "Grid error threshold to recompute Jacobian matrix"
  syncperiod: float
  "Enforced synchronisation: Period"
  iopt_conn: int
  "A-stable integration algorithm: Apply per element and composite model"
  iopt_adaptreset: int
  "Reset automatic step size at interruption"
  i_rndseed: int
  "Global random number generator: Seed"
  iopt_save: int
  "Save snapshot via event"
  lastSeed: list
  "Global random number generator: Last used seed"
  for_name: str
  "Foreign Key"
  ctstart: float
  "Start time"
  erreq: float
  "Max. acceptable equation error: Network model equations"
  ddtgrd_max: float
  "Maximum increase of step size"
  cpHeadFold: object
  "Head Folder"
  erreq_emt: float
  "Max. acceptable equation error: Network model equations"
  alpha_emt: float
  "Integration: Damping factor"
  copt_sim: int
  "Simulation method"
  tcgrd: float
  "Time constant for RMS simulation"
  iopt_lt: int
  "A-stable integration algorithm"
  p_simscn: object
  "Modules"
  iopt_int: int
  "Interface: Update"
  iSchemeStatus: int
  "Scheme Status"
  kres: float
  "Event: Resolution factor (with respect to smallest step)"
  dtemt: float
  "Integration step size: Electromagnetic transients"
  ciopt_sample: int
  "Record results"
  iopt_dfrotx: int
  "Calculate maximum rotor angle deviation (dfrotx)"
  iopt_sim: str
  "Simulation method"
  crndNumGen: list
  "Global random number generator: Actually used method:"
  dtgrd_max: float
  "Integration step size: Maximum step size"
  iopt_sync: int
  "Enforced synchronisation"
  iopt_net: str
  "Network representation"
  i_sedirect: int
  "DSL: Direct application of events"
  iopt_fastcon: int
  "Simplifications: Fast connection of A-stable models outputs"
  iopt_rnd: int
  "Global random number generator: Seeding type:Automatic:User defined"
  charact: list
  "Charact."
  iopt_startmax: int
  "Use maximum step size at start"
  iopt_solvinc: int
  "Initialisation: Solve dynamic model equations at initialisation"
  itrmx: int
  "Event: Maximum number of repeat event loops"
  iopt_all: int
  "A-stable integration algorithm: Apply to all elements"
  addoptions: str
  "Additional Parameters"
  outputstep: float
  "Record results: Output sampling step"
  iopt_fastsol: int
  "Simplifications: Fast independent solution of network and dynamic models"
  cvoltLevLv: float
  "Max. acceptable equation error: >"
  ipolate: int
  "Behaviour at user-defined events"
  gnrl_modby: str
  "Object modified by"
  copt_coiref: int
  "Reference"
  rt_factor: float
  "Synchronisation with system time: Ratio between real time and calculation time"
  iopt_adapt: int
  "Automatic step size adaptation"
  allowedBusErrLv_emt: float
  "Max. acceptable equation error: Bus equations (LV)"
  iopt_show: int
  "Verify initial conditions"
  syncresult: int
  "Write results only at synchronised point in time"
  tid_: int
  "TimeID"
  iopt_adaptadv: int
  "Advanced step size algorithm"
  root_id: object
  "Original Location"
  com_init: int
  "Interface: Send and receive after initialisation"
  allowedBusErrMv: float
  "Max. acceptable equation error: Bus equations (MV)"
  errinc: float
  "Minimum prediction error"
  loc_name: str
  "Name"
  cvoltLevHv: float
  "Max. acceptable equation error: >"
  com_inter: float
  "Interface Update: Interval"
  iopt_real: int
  "Real-time simulation"


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def ZeroDerivative(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetInom(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetParent(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetImpedance(*args):
    ...



class ComLdf(Protocol):
  errlf: float
  "Max. Acceptable Load Flow Error: Bus Equations (HV)"
  vlmax: float
  "Upper Limit of Allowed Voltage"
  scLoadFac: float
  "Scaling by category: Loads"
  imaxPHSstep: int
  "Max. tap changes per iteration: for phase shifting transformers:oo:1:2:3:4:5:6:7:8:9:10"
  loadmax: float
  "Max. Loading of Edge Element"
  iopt_lim: int
  "Voltage and Reactive Power Regulation: Consider reactive power limits"
  iopt_plim: int
  "Active Power Regulation: Consider active power limits"
  maxPhaseShift: float
  "Max. transformer phase shift"
  iStepAdapt: int
  "Iteration step size"
  cPlimAsmOff: int
  "Considered Models for Active Power Limits: Asynchronous machine"
  rembar: object
  "Reference Bus: Reference Busbar"
  chr_name: str
  "Characteristic Name"
  iopt_fls: int
  "Load Options: Feeder Load Scaling"
  itrlx: int
  "Max. Number of Iterations: Newton-Raphson Iteration"
  allowedBusErrLv: float
  "Max. Acceptable Load Flow Error: Bus Equations (LV)"
  order: float
  "Order"
  vlmin: float
  "Lower Limit of Allowed Voltage"
  iopt_noinit: int
  "Starting point: Start from last calculated results if available"
  Sin: float
  "Installed Power"
  krelax: float
  "Min. Controller Relaxation Factor"
  cPlimPWMOff: int
  "Considered Models for Active Power Limits: PWM converter"
  copt_net: int
  "Calculation Method"
  iopt_iph: int
  "Ignore transformer phase shift"
  iopt_initOPF: int
  "Use this load flow for initialisation of OPF"
  ctemperature: int
  "Temperature Dependency: Line/Cable Resistances: Temperature"
  bPlimSym: int
  "Considered Models for Active Power Limits: Synchronous machine"
  bQlimAsm: int
  "Considered Models for Reactive Power Limits: Asynchronous machine"
  oid_: int
  "ObjectID"
  p_event: object
  "Events"
  codePlim: int
  "P limits"
  bQlimXnet: int
  "Considered Models for Reactive Power Limits: External grid"
  gnrl_modif: int
  "Object modified"
  iopt_prot: int
  "Consider Protection Devices:none:all:main:backup"
  bPlimPWM: int
  "Considered Models for Active Power Limits: PWM converter"
  i_volt: int
  "Consider coincidence of low-voltage loads: Voltage Drop Analysis"
  phiini: float
  "Reference Bus: Angle"
  cQlimSvsOff: int
  "Considered Models for Reactive Power Limits: Static Var system"
  modelLevel: int
  "Model level"
  dataExtDesc: list
  "Description"
  cQlimAsmOff: int
  "Considered Models for Reactive Power Limits: Asynchronous machine"
  iopt_at: int
  "Voltage and Reactive Power Regulation: Automatic tap adjustment of transformers"
  i_power: int
  "Load Flow Method"
  dataExtUnit: list
  "Unit"
  zoneScale: int
  "Zone scaling"
  bQlimSvs: int
  "Considered Models for Reactive Power Limits: Static Var system"
  iTrimStep: int
  "Iteration step size: Trim unreasonable Newton-Raphson steps"
  bQlimSlack: int
  "Considered Models for Reactive Power Limits: Reference machine"
  iopt_spar: int
  "Calculate Power at Risk"
  cosfix: float
  "Power Factor of Fixed Load"
  iTempLoads: int
  "Temperature Dependent Load Scaling"
  pid_: int
  "ProjectID"
  cQlimSlackOff: int
  "Considered Models for Reactive Power Limits: Reference machine"
  iopt_check: int
  "Reports"
  cQlimPWMOff: int
  "Considered Models for Reactive Power Limits: PWM converter"
  totNumNewtonIters: int
  "Sum of Newton iterations (of all outer loops)"
  iResType: int
  "Starting point: Source:from memory:from a file"
  cvoltLevMv: float
  "Max. Acceptable Load Flow Error: >"
  iInterType: int
  "Interchange Schedule: Consider Interchange Schedules for..."
  iKeepCalc: int
  "Maintain load flow results if calculation fails"
  cPlimSymOff: int
  "Considered Models for Active Power Limits: Synchronous machine"
  fa: float
  "Utilisation Factor"
  iopt_asht: int
  "Voltage and Reactive Power Regulation: Automatic tap adjustment of shunts"
  bQlimGenst: int
  "Considered Models for Reactive Power Limits: Static generator"
  bPlimAsm: int
  "Considered Models for Active Power Limits: Asynchronous machine"
  resFile: str
  "Starting point: File"
  iopt_chctr: int
  "Check Control Conditions"
  fold_id: object
  "In Folder"
  iopt_optaplim: int
  "Consider operational limits for tap changer"
  ign_comp: int
  "Ignore Composite Elements"
  dat_src: str
  "Data source"
  copt_apdist: int
  "Active Power Control"
  tres: float
  "Event-Resolution"
  iavailfact: int
  "Consider Availability Factors"
  iShowOutLoopMsg: int
  "Show 'Outer Loop' messages"
  iopt_trainsim: int
  "Train simulation"
  cPlimGenstOff: int
  "Considered Models for Active Power Limits: Static generator"
  scPnight: float
  "Scaling by category: Night storage heaters"
  iopt_notopo: int
  "No Topology Rebuild"
  cQlimSymOff: int
  "Considered Models for Reactive Power Limits: Synchronous machine"
  iopt_lev: int
  "Automatic Model Adaptation for Convergence"
  num_conv: int
  "Show Convergence Progress Report: Number of reported buses/models per iteration"
  ginf: float
  "Coincidence Factor (ginf)"
  for_name: str
  "Foreign Key"
  erreq: float
  "Max. Acceptable Load Flow Error: Model Equations"
  bPlimGenst: int
  "Considered Models for Active Power Limits: Static generator"
  cpHeadFold: object
  "Head Folder"
  ign_mdb: list
  "OoS Objects"
  copt_tem: int
  "Temperature Dependency: Line/Cable Resistances: at"
  iprimctrl: int
  "Consider Primary Controllers"
  iFromSaved: int
  "Starting point: Start from saved results"
  cQlim4constQOff: int
  "Considered Models for Reactive Power Limits: Limit reactive power also for const. Q machines"
  maxQlimTrans: int
  "Automatic detection of repeated reactive power limitations: Number of transitions"
  iPostCont: int
  "Time Phase"
  cSav: float
  "Average Power"
  iopt_tem: int
  "Temperature Dependency: Line/Cable Resistances: at"
  iSchemeStatus: int
  "Scheme Status"
  iopt_lod: int
  "Voltage dependent loads in Post Fault analysis"
  iopt_sim: int
  "Consider coincidence of low-voltage loads"
  ictrlx: int
  "Max. Number of Iterations: Outer Loop"
  utr_init: int
  "Voltage magnitude initialisation: Voltage magnitude initialisation:Use voltage setpoint at reference busbar:Consider ratio of rated to nominal voltage:Consider ratio of rated to nominal voltage for all branches except transformers:Consider ratio of rated to nominal voltage for transformers only"
  Sfix: float
  "Fixed Load"
  Svar: float
  "Max. Power per Customer"
  iopt_net: int
  "Calculation Method"
  iopt_apdist: int
  "Active Power Control"
  iopt_pq: int
  "Load Options: Consider Voltage Dependency of Loads"
  cPlim4constPOff: int
  "Considered Models for Active Power Limits: Limit active power also for const. P machines"
  charact: list
  "Charact."
  imaxtstep: int
  "Max. tap changes per iteration: for transformers, shunts:oo:1:2:3:4:5:6:7:8:9:10"
  iPbalancing: int
  "Balancing"
  itapopt: int
  "Method:direct:stepped"
  iItAlgStag: int
  "Iteration step size: Break if no progress in X iterations"
  nsteps: int
  "Max. Number of Iterations: Number of Steps"
  bQlimSym: int
  "Considered Models for Reactive Power Limits: Synchronous machine"
  temperature: float
  "Temperature Dependency: Line/Cable Resistances: Temperature"
  numNewtonIters: list
  "Number of Newton iterations"
  cPbalancing: int
  "Balancing"
  scGenFac: float
  "Scaling by category: Generation"
  iopt_limScale: int
  "Consider reactive power limits scaling factor"
  bQlimPWM: int
  "Considered Models for Reactive Power Limits: PWM converter"
  cQlimXnetOff: int
  "Considered Models for Reactive Power Limits: External grid"
  addoptions: str
  "Additional Parameters"
  iopt_fl: int
  "Flat Start"
  bPlim4constP: int
  "Considered Models for Active Power Limits: Limit active power also for const. P machines"
  relax: float
  "Iteration step size: Relaxation Factor"
  cvoltLevLv: float
  "Max. Acceptable Load Flow Error: >"
  iopt_igntow: int
  "Modelling Method of Towers:with in/output signals:ignore couplings:equation in lines"
  scMotFac: float
  "Scaling by category: Motors"
  maxDivOuterLoops: int
  "Break, if Newton-Raphson diverges in first X outer loops"
  gnrl_modby: str
  "Object modified by"
  iPST_at: int
  "Active Power Regulation: Automatic tap adjustment of phase shifters"
  cLimScaleOff: int
  "Consider reactive power limits scaling factor"
  cQlimGenstOff: int
  "Considered Models for Reactive Power Limits: Static generator"
  iopt_show: int
  "Show Convergence Progress Report"
  tid_: int
  "TimeID"
  bQlim4constQ: int
  "Considered Models for Reactive Power Limits: Limit reactive power also for const. Q machines"
  iInterChg: int
  "Interchange Schedule"
  root_id: object
  "Original Location"
  maxTapTrans: int
  "Automatic detection of tap hunting: Number of transitions"
  allowedBusErrMv: float
  "Max. Acceptable Load Flow Error: Bus Equations (MV)"
  numOuterLoops: int
  "Number of outer loops"
  cosvar: float
  "Power Factor of Variable Part"
  loc_name: str
  "Name"
  cvoltLevHv: float
  "Max. Acceptable Load Flow Error: >"
  iopt_maxibus: int
  "Calculate max. current at busbars"
  codeQlim: int
  "Q limits"
  iopt_stamode: int
  "Station Controller:Standard:Gen HV-Ctrl:Gen LV-Ctrl"
  PostContTime: float
  "Time Phase: Post Contingency Time (End of Time Phase)"


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def IsAC(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def IsBalanced(*args):
    ...

  def CopyData(*args):
    ...

  def PrintCheckResults(*args):
    ...

  def GetInom(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def EstimateOutage(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def CheckControllers(*args):
    ...

  def SetOldDistributeLoadMode(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def DoNotResetCalc(*args):
    ...

  def GetParent(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsDC(*args):
    ...

  def GetImpedance(*args):
    ...



class ComLink(Protocol):
  sComName: str
  "Computer Name"
  qBadLastVal: int
  "BAD: Last Known Value"
  iopt_reset: int
  "Reset Statuses"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  qBadOutServ: int
  "BAD: Out of Service"
  qBad: int
  "BAD"
  qBadSensFail: int
  "BAD: Sensor Failure"
  isLinkStarted: int
  "Link started?"
  order: float
  "Order"
  iopt_link: int
  "Link To"
  for_name: str
  "Foreign Key"
  iEngineID: int
  "Engine ID"
  idReplacement: str
  "TagID Placeholder"
  pDataSets2: object
  "Export Data"
  cpHeadFold: object
  "Head Folder"
  qGoodNonSpec: int
  "Neglect data in SE calculation if OPC quality is GOOD: Non-specific"
  qUncerSubNorm: int
  "Neglect data in SE calculation if OPC quality is UNCERTAIN: Sub-Normal"
  qUncerUnitExc: int
  "Neglect data in SE calculation if OPC quality is UNCERTAIN: Engineering Units Exceeded"
  sProgID: str
  "Prog ID"
  qBadWaiting: int
  "BAD: Waiting for Initial Data"
  iopt_deadb: int
  "Deadband Usage"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  qBadNonSpec: int
  "BAD: Non-specific"
  cReadValueInit: int
  "Initialise read items with OPC server's values"
  gnrl_modif: int
  "Object modified"
  qGoodLocOver: int
  "Neglect data in SE calculation if OPC quality is GOOD: Local Override"
  pDataSets: object
  "Import Data"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  iopt_db: int
  "DB Synchronisation"
  qUncertain: int
  "Neglect data in SE calculation if OPC quality is: UNCERTAIN"
  qBadConfigErr: int
  "BAD: Configuration Error"
  addoptions: str
  "Additional Parameters"
  pDataSets3: object
  "DigPF Data"
  qBadDevFail: int
  "BAD: Device Failure"
  iopt_lastfile: int
  "Read the last file from folder"
  qBadNotCon: int
  "BAD: Not Connected"
  iopt_report: int
  "Reports"
  qUncerNotAcc: int
  "Neglect data in SE calculation if OPC quality is UNCERTAIN: Sensor Not Accurate"
  chardel: str
  "Character Delimiter:;:,"
  gnrl_modby: str
  "Object modified by"
  qUncerLastVal: int
  "Neglect data in SE calculation if OPC quality is UNCERTAIN: Last Usable Value"
  pid_: int
  "ProjectID"
  qBadCommFail: int
  "BAD: Comm Failure"
  noise: float
  "Noise"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  deadband: float
  "Deadband Usage: Deadband"
  repoptions: str
  "Alarm Object Identifier"
  fFile: str
  "Name"
  loc_name: str
  "Name"
  qGood: int
  "Neglect data in SE calculation if OPC quality is: GOOD"
  qUncerNonSpec: int
  "Neglect data in SE calculation if OPC quality is UNCERTAIN: Non-specific"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def SetOPCReceiveQuality(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SentDataStatus(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def ReceiveData(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetSwitchShcEventMode(*args):
    ...

  def SendData(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def LoadMicroSCADAFile(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComMerge(Protocol):
  name_mod1: str
  "Compare: as"
  top_mod2: object
  "Compare: 2nd"
  minThresh: float
  "Compare Options: Ignore differences <"
  consAdded: int
  "Compare Options: Search correspondents for added objects"
  consCim: int
  "Compare Options: Consider CIM data"
  dat_src: str
  "Data source"
  consOpd: int
  "Consider Operational Data"
  chr_name: str
  "Characteristic Name"
  order: float
  "Order"
  iopt_3way: int
  "Compare: 2nd"
  for_name: str
  "Foreign Key"
  top_base: object
  "Compare: Base"
  cpHeadFold: object
  "Head Folder"
  target_2way: int
  "Merge: into"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  identifyByName: int
  "Compare Options: Identify correspondents always by name/rules"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  conApproval: int
  "Compare Options: Consider Approval Information"
  name_base: str
  "Compare: as"
  identifyByFKey: int
  "Compare Options: Identify correspondents by foreign key"
  addoptions: str
  "Additional Parameters"
  name_mod2: str
  "Compare: as"
  travmode: int
  "Compare Options: Depth :Only chosen Object :Chosen and contained Objects"
  conflictMode: int
  "Merge: Assign"
  gnrl_modby: str
  "Object modified by"
  merge: int
  "Merge"
  pid_: int
  "ProjectID"
  target_3way: int
  "Merge: into"
  tid_: int
  "TimeID"
  top_mod1: object
  "Compare: 1st"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  consDataExt: int
  "Compare Options: Consider Data Extensions"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetAutoAssignmentForAll(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def ExecuteWithActiveProject(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetModificationResult(*args):
    ...

  def HasResults(*args):
    ...

  def GetModifiedObjects(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Reset(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def GetModification(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def ShowBrowser(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def WereModificationsFound(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def Compare(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def CompareActive(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def CheckAssignments(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetCorrespondingObject(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def SetObjectsToCompare(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def Merge(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def PrintComparisonReport(*args):
    ...

  def ExecuteRecording(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def PrintModifications(*args):
    ...

  def GetImpedance(*args):
    ...



class ComMot(Protocol):
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  p_resst: object
  "Report: Results"
  order: float
  "Order"
  pMonBars: object
  "Monitoring: Additional Terminals"
  iopt_view: int
  "Display results for:"
  time: float
  "Simulation Method: Simulation Time"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  tolvolt: float
  "Successful Starting Criterion for Simplified Models: Max. Voltage Drop"
  iopt_dflt: int
  "Simulation Method: User defined simulation settings"
  iopt_dss: int
  "Simulation Method: User defined simulation settings"
  iopt_maxv: int
  "Simulation Type: Use settings for Max. Voltage Drop"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  i_volt: int
  "Successful Starting Criterion for Simplified Models: Voltage Drop based on..."
  iopt_thl: int
  "Check Thermal Limits of Cables and Transformers"
  iopt_net: int
  "Simulation Method: Network Representation"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  p_resrms: object
  "Results"
  dataExtUnit: list
  "Unit"
  pMotor: object
  "Motor(s)"
  selected: list
  "Selected Elements"
  iopt_asc: int
  "Report"
  addoptions: str
  "Additional Parameters"
  pMonCabs: object
  "Check Thermal Limits of Cables and Transformers: Additional Equipment"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tolspeed: float
  "Successful Starting Criterion for Simplified Models: Max. Speed Tolerance"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  iopt_styp: int
  "Simulation Type"
  loc_name: str
  "Name"
  iopt_rms: int
  "Simulation Method: RMS values (Electromechanical Transients)"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetMotorConnections(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetMotorSwitch(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetMotorTerminal(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComNmink(Protocol):
  iopt_lne: int
  "Network Components: Lines/cables"
  dat_src: str
  "Data source"
  iopt_n2: int
  "Outage Level: n-2 cases"
  iopt_scap: int
  "Network Components: Series Capacitors"
  chr_name: str
  "Characteristic Name"
  iopt_n1: int
  "Outage Level: n-1 cases"
  iopt_nc: int
  "Outage Level: n-k cases of mutually coupled lines/cables"
  order: float
  "Order"
  fr_elm: int
  "Network Components"
  cntNameDef: int
  "Naming of created contingencies or fault cases"
  iopt_lev: int
  "Outage Level"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  sel_folder: object
  "Fault case folder: Selected folder"
  cpHeadFold: object
  "Head Folder"
  iSaveto: int
  "Fault case folder"
  iopt_sym: int
  "Network Components: Generators"
  iopt_trf: int
  "Network Components: Transformers"
  iSchemeStatus: int
  "Scheme Status"
  iopt_cmd: int
  "Creation of Contingencies"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  sel_filter: object
  "Network Components: Filter"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  iopt_sreac: int
  "Series Reactors"
  addoptions: str
  "Additional Parameters"
  sel_user: object
  "Network Components: Set"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  optSel: int
  "Network Components: Create Cases for:Whole system:Selection:Filtered Elements"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def AddRef(*args):
    ...

  def Clear(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetAll(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GenerateContingenciesForAnalysis(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComOmr(Protocol):
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  order: float
  "Order"
  res_out: int
  "Report"
  iopt_feed: int
  "Determine Optimal Manual Restoration for"
  for_name: str
  "Foreign Key"
  ref_selfeed: object
  "Determine Optimal Manual Restoration for: Feeders"
  cpHeadFold: object
  "Head Folder"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  order_BB: int
  "Backbone Order (Max.)"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  ref_comsh: object
  "Report: Output"
  val_wght: float
  "Penalty Factor: Branches end at Manual Switch"
  addoptions: str
  "Additional Parameters"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  val_wght1: float
  "Penalty Factor: Non-Backbone Branches (Level I)"
  num_level: int
  "Max. Number of Restoration Levels"
  ref_ldf: object
  "Load Flow"
  fold_id: object
  "In Folder"
  val_pwr: float
  "Min. Power in Pocket"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetFeeders(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetOMR(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetRegionCount(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComOpc(Protocol):
  sUserName: str
  "Username"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  sSslPkPath: str
  "Private key"
  iopt_auth: int
  "Authentication mode"
  order: float
  "Order"
  sComputerUrl: str
  "Server top - level URL"
  sSslCaTrust: str
  "Trusted certificate storage"
  iopt_link: int
  "Link To"
  for_name: str
  "Foreign Key"
  idReplacement: str
  "TagID Placeholder"
  tagSet: object
  " Points to transfer"
  cpHeadFold: object
  "Head Folder"
  iopt_StorLoc: int
  "Storage location"
  sSslPkPass: str
  "Private key password"
  sSslCaRevoc: str
  "Revoked certificate storage"
  iopt_deadb: int
  "Deadband Usage"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  sSslCertPath: str
  "Certificate"
  sWinStorName: str
  "Name of certificate folder"
  gnrl_modif: int
  "Object modified"
  iPort: int
  "Server Port"
  sPassword: str
  "Password"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  iopt_mode: int
  "Credentials"
  iopt_serverV: int
  " Verify server certificate"
  dataExtUnit: list
  "Unit"
  iopt_db: int
  "DB Synchronisation"
  addoptions: str
  "Additional Parameters"
  sSslIsRevoc: str
  "Revoked issuer certificate storage"
  sSslIsTrust: str
  "Trusted issuer certificate storage"
  sWinThumbpr: str
  "Certificate thumbprint"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  sServerName: str
  "Server sub - level URL"
  root_id: object
  "Original Location"
  deadband: float
  "Deadband Usage: Deadband"
  loc_name: str
  "Name"
  iopt_type: int
  "Mode"
  rootPath: str
  "Path to root element"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def ReceiveData(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SendData(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComOutage(Protocol):
  pSWSC: list
  "Switch Scheme"
  restore: str
  "System Restoration"
  iPsensOnly: int
  "Use P-sensitivities only"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  cn_k: list
  "Fault Type"
  order: float
  "Order"
  IntState: list
  "State"
  for_name: str
  "Foreign Key"
  contents: list
  "Events"
  iNoSupply: int
  "DC Generation/Demand:not changed:changed:changed by element not in table"
  cpHeadFold: object
  "Head Folder"
  n_k: int
  "Contingency Order"
  Couplers: list
  "Open"
  outserv: int
  "Not analysed"
  CouplersClose: list
  "Close"
  Nodes: list
  "Name"
  iSchemeStatus: int
  "Scheme Status"
  cluster: int
  "Cluster"
  number: int
  "Number"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  year: int
  "Year"
  pCase: object
  "Fault Case"
  iopt_evts: str
  "Events used for this Contingency"
  Branches: object
  "Branch"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  addoptions: str
  "Additional Parameters"
  gnrl_modby: str
  "Object modified by"
  BBFault: int
  "Busbar Fault"
  pid_: int
  "ProjectID"
  Faults: list
  "Fault Location"
  idynamic: int
  "Dynamic contingency"
  iOneSide: int
  "Use equation at branch side (index)"
  tid_: int
  "TimeID"
  cpCase: object
  "Fault Case"
  root_id: object
  "Original Location"
  studyTime: int
  "Study time of dynamic contingency"
  cFaultElm: object
  "Fault location"
  loc_name: str
  "Name"
  Elms: list
  "Name"
  cpGroup: object
  "Fault Group"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def StopTrace(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetObjs(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def ExecuteTime(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetObject(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def ContinueTrace(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def StartTrace(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def RemoveEvents(*args):
    ...

  def GetImpedance(*args):
    ...



class ComPfdimport(Protocol):
  activatePrj: int
  "Import options: Activate project after import"
  g_noprjs: int
  "File information: Number of projects"
  g_path: list
  "File information: Original Path"
  g_file: str
  "File information: PFD file"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  g_refs: list
  "File information: Missing or unreadable referenced objects"
  order: float
  "Order"
  g_contents: list
  "File information: Contents"
  g_created: int
  "File information: Date and Time"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  g_noobjs: int
  "File information: Number of records"
  g_version: str
  "File information: Target version"
  codepage: list
  "Import options: Text encoding"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  g_licinfo: list
  "(DIGSIDONGLE only) Licence information"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  g_bases: list
  "Base projects and versions in original database"
  g_sourceVersion: str
  "File information: Source version"
  addoptions: str
  "Additional Parameters"
  g_creator: str
  "File information: Exported by"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  g_target: object
  "Import options: New Path"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetImportedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComPrjconnector(Protocol):
  identAttribute: str
  "Identify terminals by"
  variationName: str
  "Store connections in Variation"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  vnodeGrid: object
  "Virtual nodes grid"
  dataExtUnit: list
  "Unit"
  order: float
  "Order"
  obj: str
  "Object Name"
  addoptions: str
  "Additional Parameters"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  method: str
  "Connection method"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSuccesfullyConnectedItems(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetUnsuccesfullyConnectedItems(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class ComProtgraphic(Protocol):
  reachWidth: float
  "Width factor"
  cImpedances: int
  "Create diagrams for: Impedances"
  cDirAngles: int
  "Create diagrams for: Directional angles"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  reference: int
  "Create diagrams for: Reference frame:Secondary:Primary"
  createVars: int
  "Create diagrams for"
  order: float
  "Order"
  thresholds: int
  "Create diagrams for: Add tripping thresholds"
  reachDevices: list
  "Protection devices for reach colouring"
  path: object
  "Path"
  for_name: str
  "Foreign Key"
  cReachBrushes: list
  "Brush Style"
  cpHeadFold: object
  "Head Folder"
  cCurrents: int
  "Create diagrams for: Currents"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  loopSelection: int
  "Create diagrams for: Loop selection:&1&Phase-Earth:&2&Phase-Phase:&3&All"
  iopt_action: int
  "Action"
  sweepDevices: list
  "Protection devices for sweep diagrams"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  reachBrushes: list
  "Brush Style"
  dataExtUnit: list
  "Unit"
  cReachDevices: list
  "Device"
  addoptions: str
  "Additional Parameters"
  devices: object
  "Protection devices: Selection"
  reachColours: list
  "Colour"
  reachZones: list
  "Zone"
  cUpdatePages: list
  "Plot page"
  updatePages: list
  "Plot pages"
  cVoltages: int
  "Create diagrams for: Voltages"
  gnrl_modby: str
  "Object modified by"
  iopt_pages: int
  "Update diagrams"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  cReactances: int
  "Create diagrams for: Reactances"
  cSweep: object
  "Short-circuit sweep: Command"
  cSweepDevices: list
  "Device"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def AddToUpdatePages(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def ClearUpdatePages(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComPvcurves(Protocol):
  frStepsize: int
  "Step size definition"
  calcCont: int
  "Consider contingencies"
  scaleini: float
  "Initial load scaling: Multiplication factor"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  critGrad: float
  "Critical gradient"
  order: float
  "Order"
  frScaleini: int
  "Initial load scaling"
  maxStepsize: float
  "Step size definition: Maximum step size"
  critFactor: float
  "Critical factor"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  pSel_Busb: object
  "Record terminal results: "
  iSchemeStatus: int
  "Scheme Status"
  pInputCont: object
  "Consider contingencies: Contingency Analysis"
  maxIter: int
  "Step size definition: Maximum iterations"
  oid_: int
  "ObjectID"
  scaleNegLod: int
  "Scale loads: Scale negative loads"
  gnrl_modif: int
  "Object modified"
  iniStepsize: float
  "Step size definition: Initial step size"
  results: object
  "Record terminal results: Results"
  iopt_clc: int
  "Calculation"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  frSel_Busb: int
  "Record terminal results"
  dataExtUnit: list
  "Unit"
  frLoads: int
  "Scale loads"
  scaleMot: int
  "Scale loads: Scale motors"
  addoptions: str
  "Additional Parameters"
  pSel_Load: object
  "Scale loads: "
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  minStepsize: float
  "Step size definition: Minimum step size"
  frIterMethd: int
  "Step size algorithm"
  fold_id: object
  "In Folder"
  debugOut: int
  "Show detailed output"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def FindCriticalBus(*args):
    ...

  def GetImpedance(*args):
    ...



class ComPython(Protocol):
  typemetadata_key: list
  "Type Key"
  IntResName: list
  "Name"
  modifytime: int
  "Last Modified"
  version: str
  "Version"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  IntExpr: list
  "Value"
  order: float
  "Order"
  xDesc: list
  "Long Description"
  IntType: list
  "Type"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  obj_id: list
  "Object"
  obj_name: list
  "Name"
  IntResType: list
  "Type"
  cpHeadFold: object
  "Head Folder"
  isRemoteScriptSet: int
  "A remote script is set."
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  IntDesc: list
  "Description"
  IntName: list
  "Name"
  script_id: object
  "Remote script"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  IntUnit: list
  "Unit"
  dataExtUnit: list
  "Unit"
  obj_desc: list
  "Description"
  typemetadata_version: list
  "Version"
  typemetadata_changeLog: list
  "Change Log"
  IntResExpr: list
  "Value"
  xNotes: list
  "Release Notes"
  addoptions: str
  "Additional Parameters"
  interfaceVersion: int
  "Interface Version:&1&1:&2&2"
  shortDesc: str
  "Short Description"
  gnrl_modby: str
  "Object modified by"
  filePath: str
  "Script file"
  pid_: int
  "ProjectID"
  author: str
  "Author"
  company: str
  "Company"
  tid_: int
  "TimeID"
  scriptSourceChoice: int
  "Python Script"
  root_id: object
  "Original Location"
  IntResUnit: list
  "Unit"
  loc_name: str
  "Name"
  IntResDesc: list
  "Description"
  xScript: list
  "Embedded Code"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetInputParameterString(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetInputParameterInt(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def SetInputParameterDouble(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetExternalObject(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def SetExternalObject(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def SetInputParameterString(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetInputParameterDouble(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def SetInputParameterInt(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComRed(Protocol):
  lodType: int
  "Subgroup loads: According to load classification"
  pRegions: object
  "Regions"
  copt_group: int
  "Aggregation of nonlinear elements"
  iCalcType: int
  "Calculation type:Load Flow:Quasi-Dynamic Simulation"
  iOptBrchDbg: int
  "User defined parameters for minimisation of equivalent branches"
  weightNodes: int
  "Schur topology optimisation settings: Apply node weights according to communication with retain part"
  iChkSim: int
  "Check equivalent results: Check simulation results after reduction"
  ctrlType: int
  "Subgroup generators: According to local controller"
  ildf_rep: int
  "Equivalent model for power injection"
  iopt_rep: int
  "Report Detail Level:Brief:Detailed:Full"
  category: int
  "Subgroup generators: According to model type and plant category"
  locations: list
  "Minimisation of interchange mismatch: Locations"
  subcategory: int
  "Subgroup generators: According to model type, plant category and subcategory"
  cldf_rep: int
  "Equivalent model for power injection"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  pInc: object
  "Initial Conditions"
  iSvs: int
  "Reduction of nonlinear elements: SVS:Retain all:Retain all voltage controlled:Reduce all"
  pIntMon: list
  "Signals"
  iopt_new: int
  "Representation of equivalent"
  iopt_method: int
  "Method"
  iopt_chk: int
  "Check equivalent results: Check load flow results after reduction"
  initR: float
  "Initial value of equivalent impedance: Resistance"
  pTemplate: object
  "Template"
  maxPercentForPart: float
  "Schur topology optimisation settings: Max. num partitions (in perc. of reduce nodes)"
  iopt_group: int
  "Aggregation of nonlinear elements"
  order: float
  "Order"
  maxDist: int
  "Coherency identification method: Distance ratio threshold (max/avg)"
  maxUbFac: float
  "Schur topology optimisation settings: Maximal unbalance factor"
  iLoad: int
  "Reduction of nonlinear elements: Loads:Retain all:Reduce all"
  debugMode: int
  "Debug mode:Off:Calculate and output statistics:Write matrices:Advanced (plot graphs etc.)"
  pSim: object
  "Simulation"
  iopt_save: int
  "Check deviation of operating point: Save original operating point to result file"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  considerSubPart: int
  "Schur topology optimisation settings: Consider subpartitions for optimisation"
  iFreqImp: int
  "Calculate equivalent parameters at all frequencies"
  reiBusperStat: int
  "Single equivalent bus per substation"
  cpHeadFold: object
  "Head Folder"
  iSimPlot: int
  "Check equivalent results: Generate curve comparison plot"
  iOptBrch: int
  "Minimisation of equivalent branches"
  iCoher: int
  "Coherency identification method"
  debugRunMode: int
  "Only calculate reduced admittance matrix"
  minCorr: float
  "Coherency identification method: Correlation threshold"
  pBound: object
  "Boundary"
  iSchemeStatus: int
  "Scheme Status"
  rmin: float
  "Min. Resistance rmin"
  iCoheOnly: int
  "Stop after coherency identification"
  iCheckSig: int
  "Signals to be checked"
  weightSummand: int
  "Schur topology optimisation settings: Weight summand"
  oid_: int
  "ObjectID"
  iRedPart: int
  "To be reduced:Interior of the boundary:Exterior of the boundary"
  iNegR: int
  "Handling of negative resistance"
  cleanSub: int
  "Clean up empty substations and bays"
  ildfMode: int
  "Load flow method:AC, balanced:DC"
  templates: list
  "Template"
  iWithPSTs: int
  "Creation of phase shifters for loop flows"
  gnrl_modif: int
  "Object modified"
  identMethod: int
  "Optimisation method"
  removeCon: int
  "Schur topology optimisation settings: Remove connections to equ. generator / load during optimisation"
  topoOptAlg: int
  "Schur topology optimisation settings: Optimisation method:OLD:OLD2:ACTUAL"
  minUbFac: float
  "Schur topology optimisation settings: Min unbalance factor"
  iopt_012: int
  "Calculate short-circuit equivalent: Asymmetrical representation"
  p_ficNet: object
  "Use fictitious border network: Border network"
  iControl: int
  "Create controllers for equivalent generators"
  charact: list
  "Charact."
  weightFactor: int
  "Schur topology optimisation settings: Weight factor"
  iKeepNoise: int
  "Keep temporarily created noise elements"
  loopUbFacs: int
  "Schur topology optimisation settings: Loop over unbalance factors"
  copt_new: int
  "Representation of equivalent"
  dataExtDesc: list
  "Description"
  ubFacStep: float
  "Schur topology optimisation settings: Unbalance factor step"
  iSynGen: int
  "Reduction of nonlinear elements: Synchronous generators:Retain all:Retain all voltage controlled:Reduce all"
  iDisturb: int
  "Disturbance"
  dataExtUnit: list
  "Unit"
  initX: float
  "Initial value of equivalent impedance: Reactance"
  addoptions: str
  "Additional Parameters"
  var: str
  "Monitored signal"
  ignoreSign: int
  "Ignore active power flow direction"
  useFixedNumPartitions: int
  "Schur topology optimisation settings: Use fixed number of partitions"
  upBoundR: float
  "Upper bound of equivalent impedance: Resistance"
  upBoundX: float
  "Upper bound of equivalent impedance: Reactance"
  genCategory: list
  "Category"
  maxBrchImp: float
  "Mutual impedance: Ignore above"
  iopt_chkY: int
  "Check equivalent admittance"
  iopt_shc: int
  "Calculate short-circuit equivalent"
  simMethod: int
  "Simulation method"
  elmRetain: object
  "Reduction of nonlinear elements: Additional elements"
  iFicNet: int
  "Use fictitious border network"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  chkThrsh: float
  "Check equivalent results: Threshold for check"
  iType: int
  "Reduction type"
  fixedNumPartitions: int
  "Schur topology optimisation settings: Number of partitions"
  iHdlPV: int
  "Use Extended Ward Equivalent for PV Boundary Nodes"
  identMethodLdf: int
  "Optimisation method"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  out_msg: int
  "Show detailed output"
  useOrigTermName: int
  "Additionally retained terminals: Use original names"
  nParam: list
  "Parameters to be tuned: Number of parameters: %d"
  weight: list
  "Minimisation of interchange mismatch: Weight"
  loc_name: str
  "Name"
  iStaGen: int
  "Reduction of nonlinear elements: Static generators:Retain all:Retain all voltage controlled:Reduce all"
  paramIdent: int
  "Parameter Identification:"
  iopt_ldf: int
  "Calculate load flow equivalent"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def ReductionInMemory(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def ResetReductionInMemory(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def SimEquivalentVerification(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def LdfEquivalentVerification(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComRel3(Protocol):
  vlmax: float
  "Upper limit of allowed voltage"
  mxldany: float
  "Global Thermal Constraints: Maximum Loading of Other Components"
  loadmax: float
  "Consider Thermal Constraints (Loading): Maximum thermal loading of components"
  vmin_nk: float
  "Min. (n-k; k>=2)"
  optimize3: int
  "Tie Open Point Optimisation: Stage 3:Disabled:Enabled without load transfer:Enabled with load transfer"
  iopt_load: int
  "Consider Thermal Constraints (Loading)"
  iopt_locCst: int
  "Costs for loads: Cost curve (tariff)"
  iopt_net1: int
  "Network"
  chr_name: str
  "Characteristic Name"
  iopt_fcb: str
  "Fault Clearance Breakers"
  detailedOutput: int
  "Show detailed output of initial load flow and top-level feeders."
  iopt_noncorr: int
  "Ignore Load Correlation"
  traceDelay: int
  "Trace Functionality (Jump to Last Step): Time delay in animation"
  num_states: int
  "Max. number of load states"
  order: float
  "Order"
  vlmin: float
  "Lower limit of allowed voltage"
  vlevconst: float
  "Ignore all constraints for...: Nominal voltage below or equal to"
  iopt_LS: int
  "Update/creation of States"
  iopt_eice: int
  "Costs for energy not supplied"
  iopt_cb4Prot: int
  "Fault Clearance Breakers: Use switches with protection device"
  iopt_cross: int
  "Automatic Contingency Definition: Double earth faults"
  manTimeAvg: float
  "Switching time for stage 2 and 3: Average time to operate manual switch"
  iopt_hmax: int
  "Scale to average load (HMAX/8760)"
  iopt_bar: int
  "Automatic Contingency Definition: Busbars / terminals"
  iopt_line: int
  "Automatic Contingency Definition: Lines / cables"
  mxldcab: float
  "Global Thermal Constraints: Maximum Loading of Cables"
  iopt_vlSet: int
  "Consider Voltage Limits: Option"
  paralSet: int
  states: object
  "Current Load States"
  maxVrise: float
  "Consider Voltage Drop/Rise: Maximum Voltage Rise"
  vmax_nk: float
  "Max. (n-k; k>=2)"
  oid_: int
  "ObjectID"
  p_event: object
  "Events"
  iopt_eicl: int
  "Costs for loads"
  iopt_rndseed: int
  "Random numbers:auto:A:B:C:D:E:F:G:H:I:K"
  iopt_sec: int
  "Switching procedures for fault separation/power restoration: Consider Sectionalising (Stages 1-3)"
  iopt_prio: int
  "Load/Generator Priorities"
  gnrl_modif: int
  "Object modified"
  iopt_prot: int
  "Automatic Contingency Definition: Protection/switching failures"
  iopt_action: int
  "Processing Actions"
  iopt_avg: int
  "Calculate Average Switching Time"
  createCont: int
  "Automatic Contingency Definition"
  iopt_cfin: int
  "Failures, correction of forced outage rate: fa' = fa/pa"
  iopt_vol: int
  "Consider Voltage Limits"
  sel_grid: object
  "Grid"
  minTasks4Par: int
  "Parallel computation of contingencies: Minimum number of contingencies"
  addObjs2Transfer: object
  "Parallel computation of contingencies: Additional objects to transfer"
  timePeriod: int
  "Calculation time period"
  loadTariff: object
  "Costs for loads Cost curve (tariff): Tariff"
  iopt_clc: int
  "Calculation"
  p_resvar: object
  "Results"
  dataExtDesc: list
  "Description"
  iopt_common: int
  "Automatic Contingency Definition: Common mode"
  ieee1366SAIFI: int
  "Calculation of SAIFI/SAIDI according to IEEE 1366: Do not consider interruptions shorter than or equal to"
  cond_lmax: float
  "Calculation of Loadshedding in Transmission Networks: Only consider branch if loading before shedding exceeds"
  iopt_gens: int
  "Automatic Contingency Definition: Generators"
  calcYear: int
  "Calculation time period: Calculation Year"
  dataExtUnit: list
  "Unit"
  reclimLoad: float
  "Max. thermal loading of components"
  FisrRCSTime: float
  "Time to operate the first RCS"
  considerRecl: int
  "Calculation of SAIFI/SAIDI according to IEEE 1366: Enhanced consideration of automatic reclosing devices"
  calcTime: int
  "Calculation time period: Calculation Point Time"
  sel_user: object
  "Automatic Contingency Definition: Selection"
  dep_protOver: int
  "Automatic Contingency Definition: Backup protection maloperation"
  RCSMaxEvts: int
  "Switching time for remote controlled switches: Maximum number of switch actions"
  iopt_vdrop: int
  "Consider Voltage Drop/Rise"
  iopt_cpall: int
  "Correction of Probability:Mode 1:Mode 2:Mode 3:Mode 4"
  p_resenum: object
  "Results"
  RCSdectime: float
  "Switching time for remote controlled switches: Time to decide restoration strategy"
  pid_: int
  "ProjectID"
  optimize1: int
  "Tie Open Point Optimisation: Stage 1:Disabled:Enabled without load transfer:Enabled with load transfer"
  optimize: int
  "Tie Open Point Optimisation: Optimisation:Disabled:Enabled without load transfer:Enabled with load transfer"
  ovl_relax: float
  "Stop calculation if base case is overloaded: Relax constraints of initially overloaded elements by"
  addOutLoops: int
  "Enhanced restoration"
  iopt_glob: int
  "Global Thermal Constraints"
  vmin_n1: float
  "Lower limit of allowed voltage"
  t_end: int
  "Stop year"
  accStates: float
  "Accuracy"
  iopt_type: int
  "Method"
  parallelSetting: object
  "Parallel computation of contingencies: Parallel computation settings"
  mxN: int
  "Max. runs"
  maxld_nk: float
  "n-k; k>=2"
  tRemoteCB: float
  "Time to actuate remote controlled switches"
  fold_id: object
  "In Folder"
  iopt_lims: int
  "Limited number"
  iopt_rep: int
  "Report"
  iopt_time: int
  "Switching procedures for fault separation/power restoration"
  iopt_maint: int
  "Consider Maintenance"
  caseNum: str
  "Case number"
  dat_src: str
  "Data source"
  manTime: float
  "Switching time for stage 2 and 3: Time to operate manual switch"
  sel_backwRec: object
  "Supplying substations: Substations preferring backw. recovery"
  iopt_avgRCS: int
  "Calculate Average Switching Time for RCS"
  iopt_out: int
  "Automatic Contingency Definition"
  ioptRestore: int
  "Automatic Power Restoration"
  distrStates: object
  "Current Load Distribution States"
  AccessTime: float
  "Switching time for stage 2 and 3: Access Time to Substation"
  iopt_2: int
  "Automatic Contingency Definition: Independent second failures"
  iopt_evt: int
  "Switching:renew events:execute listed events"
  ioptSeparate: int
  "Fault Separation"
  for_name: str
  "Foreign Key"
  contents: list
  "Conting."
  iEnableParal: int
  "Parallel computation of contingencies"
  mxErr: float
  "Max. error"
  levConf: float
  "Confidence"
  iBackwRecover: int
  "Supplying substations: Backward recovery:Do not allow:Allow but prefer standard recovery:Allow with user-defined preference:Allow and prefer"
  cpHeadFold: object
  "Head Folder"
  iopt_trf: int
  "Automatic Contingency Definition: Transformers"
  iopt_prt4Prot: int
  "Fault Clearance Breakers"
  iSchemeStatus: int
  "Scheme Status"
  manMaxEvts: int
  "Switching time for stage 2 and 3: Maximum number of switch actions"
  iopt_cfrem: int
  "Failures, correction of forced outage rate: Distribute remaining rates:Off:On All:On n-2:On n-1"
  iopt_ign: int
  "Ignore all constraints for..."
  vlmin_ldf: float
  "Consider Voltage Limits: Lower limit of allowed voltage"
  RCSTimeAvg: float
  "Switching time for remote controlled switches: Time between two RCS switch events"
  iopt_ShowEvt: int
  "Define Event Objects"
  maxld_n1: float
  "Maximum thermal loading of edge element"
  totTariff: object
  "Costs for energy not supplied: Tariff"
  iopt_net: int
  "Network"
  spon_protOver: int
  "Automatic Contingency Definition: Spurious protection operation"
  iopt_evts: int
  "Events created during restoration"
  iopt_loads: int
  "Load Variations"
  charact: list
  "Charact."
  iopt_mode: int
  "Mode:Monte-Carlo:State Enumeration"
  maxVdrop: float
  "Consider Voltage Drop/Rise: Maximum Voltage Drop"
  mxldtrf: float
  "Global Thermal Constraints: Maximum Loading of Transformers"
  iopt_swt: int
  "By switching actions"
  mxldlne: float
  "Global Thermal Constraints: Maximum Loading of Overhead Lines"
  restoration: list
  "Optimal Power Restoration Settings per Stage"
  iopt_ldSet: int
  "Consider Thermal Constraints (Loading): Option"
  upd_time: float
  "Post contingency time for order identification"
  iopt_bcv: int
  "Stop calculation if base case is overloaded"
  addoptions: str
  "Additional Parameters"
  iopt_vdSet: int
  "Consider Voltage Drop/Rise: Option"
  iBusbarTransfer: int
  "Supplying substations: Busbar transfer:Simple reconnection:Optimised without additional meshes:Optimised with and without meshes"
  use_existing: int
  "Calculate existing contingencies"
  vmax_step: float
  "Max. voltage step; Contingency to base case"
  refTime: int
  "Load Variations: Reference time for characteristics"
  gnrl_modby: str
  "Object modified by"
  iopt_shunt: int
  "Automatic Contingency Definition: Shunts/Filters/Ser. Impedances"
  boundaryConstr: int
  "Consider Boundary Constraints outside feeders"
  tid_: int
  "TimeID"
  t_start: int
  "Start year"
  root_id: object
  "Original Location"
  vmax_n1: float
  "Upper limit of allowed voltage"
  iCntRep: int
  "Number of Contingency cases in report"
  optSel: int
  "Automatic Contingency Definition: Selection:Whole System:User Defined"
  loc_name: str
  "Name"
  optimize2: int
  "Tie Open Point Optimisation: Stage 2:Disabled:Enabled without load transfer:Enabled with load transfer"
  iopt_clus: int
  "Define Load States"
  vlmax_ldf: float
  "Consider Voltage Limits: Upper limit of allowed voltage"


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ValidateConstraints(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def ExeEvt(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetInom(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def AnalyseElmRes(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetParent(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def OvlAlleviate(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def RemoveOutages(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def RemoveEvents(*args):
    ...

  def GetImpedance(*args):
    ...



class ComRelpost(Protocol):
  comRel3: object
  "Reliability calculation"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  frLoads: int
  "Calculate contributions to load interruptions"
  order: float
  "Order"
  addoptions: str
  "Additional Parameters"
  pSelObj: object
  "Calculate contributions to load interruptions: "
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  frOutput: int
  "Create report for component classes"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetContributionOfComponent(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def CalcContributions(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class ComRelreport(Protocol):
  tab_SAIDI: int
  "Tabular report of Contributions Contributions to: SAIDI"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  iopt_mde: int
  "Output as"
  order: float
  "Order"
  reportTitle: object
  "ASCII Report: Title of report"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  tab_ENS: int
  "Tabular report of Contributions Contributions to: ENS"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  iopt_3in: int
  "ASCII Report: Load interruptions"
  iopt_3comp: int
  "ASCII Report: Contribution of component classes"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  tabularReport: int
  "Tabular report of Contributions"
  addoptions: str
  "Additional Parameters"
  iopt_3ca: int
  "ASCII Report: Node interruptions"
  tab_EIC: int
  "Tabular report of Contributions Contributions to: EIC"
  tab_SAIFI: int
  "Tabular report of Contributions Contributions to: SAIFI"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  iopt_3ss: int
  "ASCII Report: System Summary"
  tab_ASIDI: int
  "Tabular report of Contributions Contributions to: ASIDI"
  tab_ASIFI: int
  "Tabular report of Contributions Contributions to: ASIFI"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetContributionOfComponent(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def GetContingencies(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComRes(Protocol):
  iopt_exp: int
  "Export to"
  funAutoSampling: int
  "Automatic sampling from function objects"
  iopt_time: int
  "Time Format"
  iopt_vars: int
  "Export"
  numberFormat: int
  "Number format"
  tablename: list
  "Table name"
  cto: float
  "Interval: to"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  iopt_hdct: int
  "Variable"
  cvariable: list
  "Variable selection: Variable"
  r_to: list
  "Interval: to"
  ciopt_real: int
  "Time format"
  order: float
  "Order"
  to: float
  "Interval: to"
  for_name: str
  "Foreign Key"
  numberPrecisionScientific: int
  "Significant digits"
  filtered: int
  "Interval: Filters"
  cpHeadFold: object
  "Head Folder"
  scl_start: float
  "Shift time: New start time"
  resultobj: list
  "Variable selection: Result object"
  dSampling: float
  "Sampling frequency"
  ciopt_sec: int
  "Time format"
  iopt_honly: int
  "Object header only"
  element: list
  "Variable selection: Element"
  iSchemeStatus: int
  "Scheme Status"
  iopt_csel: int
  "Variable selection"
  separator: str
  "Separator for columns"
  timeSclObj: object
  "Leading object"
  iopt_tsel: int
  "Interval: User-defined interval"
  oid_: int
  "ObjectID"
  variable: list
  "Variable"
  filter: list
  "Filters"
  gnrl_modif: int
  "Object modified"
  database: object
  "Database"
  funSamplingRate: float
  "Samplingrate for function objects"
  iopt_fkey: int
  "Use foreign key"
  charact: list
  "Charact."
  pResult: object
  "Export from"
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  iopt_rscl: int
  "Shift time"
  decseprtr: str
  "Decimal separator"
  nsteps: int
  "Interval: n"
  numberPrecisionFixed: int
  "Decimal places"
  iSampling: int
  "Sampling frequency"
  addoptions: str
  "Additional Parameters"
  scols: str
  "Columns"
  iopt_locn: int
  "Column header: Element"
  iopt_inloc: int
  "Column header: Export from"
  col_Sep: str
  "Use system separators: Separator for columns"
  cscl_start: float
  "Shift time: New start time"
  iopt_newx: int
  "Points in Time"
  iopt_sort: int
  "Variable selection: Sorting"
  cfrom: float
  "Interval: from"
  iopt_head: int
  "Variable"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  timeRefObj: object
  "Time ref."
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  cStep: float
  "Step size"
  dec_Sep: str
  "Use system separators: Decimal separator"
  loc_name: str
  "Name"
  f_name: str
  "File name"
  ciopt_head: int
  "Column header: Variable"
  iopt_sep: int
  "Use system separators"
  r_from: list
  "Interval: from"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def ExportFullRange(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def FileNmResNm(*args):
    ...

  def GetImpedance(*args):
    ...



class ComShc(Protocol):
  ansi_mom: int
  "Calculate: Momentary Current"
  Rjoint: float
  "Joint resistance for lines: Joint resistance"
  iOhlMod: int
  "Overhead Line Modelling: Phase Matrices"
  nacdmode: int
  "NACD Mode:Interpolated:Predominant:All Remote:All Local"
  iopt_brc: int
  "Calculate max. Branch Currents = Busbar Currents"
  i_p2pgf: int
  "Phases:a,b:b,c:c,a"
  ionlysubtrans: int
  "Skip transient calculation"
  ansi_int: int
  "Calculate: Interrupting Current"
  loadIb: float
  "Check Devices: Max. Loading (Interrupting)"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  ansi_lvc: int
  "Low-Voltage Current"
  iopt_mde: int
  "Method"
  iopt_cdef: int
  "Voltage factor c"
  iecDc_pub: int
  "Published:2016:2001:1990"
  iopt_saveRes: int
  "Store Results"
  iec_pub: int
  "Published:2016:2001:1990"
  p_simres: object
  "Create plots: Results"
  iopt_calcAcImp: int
  "Calculate AC Network Impedance"
  iopt_out: int
  "Show Output: Output as"
  order: float
  "Order"
  iopt_peak_full: str
  "Peak, DC Currents, R/X ratio (ip, ib, idc): Using Method:B:C(1):C(012):-"
  iopt_preload: int
  "Preload Condition"
  UnomACFed: int
  "Nominal Voltage of AC Feeder"
  cfac_dc: float
  "Initialisation: Pre-fault voltage factor"
  ansipref: float
  "Pre-fault Voltage"
  iIgnLoad: int
  "Ignore positive sequence data: Loads"
  iopt_cnf: int
  "Multiple Faults"
  i_autopsu: int
  "Power Station Unit Detection: Automatic"
  iopt_jointres: int
  "Joint resistance for lines"
  iinftag: int
  "Assume Inertia as infinite"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  iopt_peak: str
  "Peak Short-Circuit Current (ip): Using Method:B:C(1):C(012):-"
  shcobj: object
  "Fault Location: User Selection"
  Tk: float
  "Short-Circuit Duration: Fault Clearing Time (Ith)"
  iopt_tdef: int
  "Conductor Temperature: User Defined"
  xtor_calc: int
  "X/R Calculation:Separate R and X:Complex"
  Xfle: float
  "Fault Impedance: Reactance, Xf(L-E)"
  cpHeadFold: object
  "Head Folder"
  prot_chcur: str
  "Currents/Voltages for"
  cfac_min: float
  "Equivalent voltage source factor"
  iopt_cur: int
  "Calculate"
  Rfll: float
  "Fault Impedance: Resistance, Rf(L-L)"
  cfac_use: int
  "Used:global:local"
  Ta: float
  "Calculate Using: Break Time"
  transtime: float
  "Subtransient Time"
  iEnhancedZf: int
  "Fault Impedance: Enhanced Fault Impedance Definition"
  ildfinitdc: int
  "Load Flow Initialisation"
  iSchemeStatus: int
  "Scheme Status"
  loadIp: float
  "Check Devices: Max. Loading (Peak)"
  ppro: float
  "Short-Circuit at Branch/Line: Relative:"
  oid_: int
  "ObjectID"
  p_event: object
  "Fault Location: Short-Circuits"
  maxiter: int
  "Current Iteration: Max. number of Iterations"
  iIksForProt: int
  "Calculate relay tripping with:Subtransient Values:Transient Values:Mixed Mode"
  gnrl_modif: int
  "Object modified"
  iopt_prot: int
  "Consider Protection Devices:none:all:main:backup"
  i_p2psc: int
  "Phases:a-b:b-c:c-a"
  i_lvtol: int
  "Max. Voltage Tolerance for LV-Systems:6:10"
  iopt_idc: int
  "Decaying Aperiodic Component (idc): Using Method:B:C:C'"
  p_simres_emt: object
  "Simulation Results"
  curerr: float
  "Current Iteration: Acceptable Current Error"
  Rf: float
  "Fault Impedance: Resistance, Rf"
  temp: float
  "Conductor Temperature: Temperature"
  iIgnShnt: int
  "Ignore positive sequence data: Shunts/Filters and SVS"
  pabs: float
  "Short-Circuit at Branch/Line: Absolute:"
  iMotor4Min: int
  "Consider motors for min. short-circuit calculation"
  loadIth: float
  "Check Devices: Max. Loading (Thermal)"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ildfinit: int
  "Initialisation: Load Flow Initialisation"
  Tdc: float
  "Time Tdc"
  iopt_loopres: int
  "Apply line loop impedance"
  dataExtUnit: list
  "Unit"
  iopt_Using: int
  "Approximate equivalent rectifier resistance value"
  maxlenpsu: float
  "Power Station Unit Detection: Maximum search distance over lines <"
  ignMVInfeed: int
  "Ignore MV Infeeds"
  Lf: float
  "Fault Impedance: Inductance, Lf"
  Rfle: float
  "Fault Impedance: Resistance, Rf(L-E)"
  iopt_asc: int
  "Show Output"
  bypasscap: int
  "Bypass Series Capacitance"
  iopt_allbus: int
  "Fault Location: At:User Selection:Busbars and Junction Nodes:All Busbars"
  iopt_tap: int
  "Consider Transformer Taps"
  addoptions: str
  "Additional Parameters"
  ansi_30c: int
  "Calculate: 30 Cycle Current"
  iopt_mot: int
  "Asynchronous Motors"
  cfac: float
  "Voltage factor c: Equivalent voltage source factor"
  Xf: float
  "Fault Impedance: Reactance, Xf"
  iopt_ikdig: int
  "Calculate Ik:Ignore Motor Contributions:DIgSILENT Method:Without Motors"
  Xfll: float
  "Fault Impedance: Reactance, Xf(L-L)"
  iiterMethod: int
  "Current Iteration"
  cfacMax: float
  "For max. short-circuit current calculation"
  iopt_shc: str
  "Fault Type"
  Tk_dc: float
  "Short-Circuit Duration: Short-circuit duration (Tk)"
  iIgnLneCap: int
  "Ignore positive sequence data: Capacitance of Lines"
  i_lvtolDc: int
  "Max. Voltage Tolerance for LV-Systems:6:10"
  ansi_sys: int
  "Calculate: System"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  i_pspgf: int
  "Phase:a:b:c"
  iopt_check: int
  "Verification"
  iopt_meth61363: int
  "Calculate Using"
  iIgnTrfMag: int
  "Ignore positive sequence data: Magnetising current of transformers"
  tid_: int
  "TimeID"
  p_cfactor: object
  "Voltage factor c: Table"
  cfac_full: float
  "Initialisation: Voltage factor c"
  root_id: object
  "Original Location"
  iopt_popt: int
  "Create plots: Show:only short-circuit current at faulted terminal:all short-circuit current contributions"
  iopt_calc: int
  "Grid Identification"
  cfacMin: float
  "For min. short-circuit current calculation"
  iBrkTime: int
  "Short-Circuit Duration: Used Break Time:global:min. of local:local"
  iopt_plot: int
  "Create plots"
  loc_name: str
  "Name"
  iopt_dfr: int
  "Short-Circuit at Branch/Line: Fault Distance from"
  maxgenvol: float
  "Power Station Unit Detection: Consider generators <"
  cfac_def: int
  "User defined c factor"
  pDCRes: object
  "Results"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetFaultType(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetOverLoadedBuses(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetOverLoadedBranches(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def ExecuteRXSweep(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComShctrace(Protocol):
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  order: float
  "Order"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  p_event: object
  "Short-Circuit: Events"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  p_shc: object
  "Short-Circuit: Command"
  addoptions: str
  "Additional Parameters"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  deltaT: float
  "Settings: Simultaneous Trip Tolerance"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetSwitchTime(*args):
    ...

  def ExecuteInitialStep(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetTrippedDevices(*args):
    ...

  def GetDeviceTime(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetCurrentTimeStep(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def GetBlockedSwitches(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetNonStartedDevices(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def ExecuteNextStep(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def ExecuteAllSteps(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetStartedDevices(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def BlockSwitch(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetFullName(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetDeviceSwitches(*args):
    ...

  def NextStepAvailable(*args):
    ...

  def GetImpedance(*args):
    ...



class ComSim(Protocol):
  cominc: object
  "Initial conditions"
  iTrialMsg: int
  "Display messages during trial step (do check text)"
  tstop: float
  "Stop time: Absolute"
  dat_src: str
  "Data source"
  dynw: int
  "Internal Dynamic Model warnings"
  chr_name: str
  "Characteristic Name"
  order: float
  "Order"
  iopt_dslw: int
  "Internal Dynamic Model warnings"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  iopt_action: int
  "Processing Actions"
  iopt_dbev: int
  "Display in output window: Display internal DSL events"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dtstop: float
  "Stop time: Relative"
  dataExtUnit: list
  "Unit"
  iopt_auto: int
  "Display in output window: Display automatic step size adaptation events"
  addoptions: str
  "Additional Parameters"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  iopt_show: int
  "Display in output window: Display result variables"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetTotalWarnA(*args):
    ...

  def LoadSnapshot(*args):
    ...

  def GetViolatedScanModules(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetTotalWarnB(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SaveSnapshot(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def GetSimulationTime(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def SaveSimulationState(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetTotalWarnC(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def LoadSimulationState(*args):
    ...

  def GetImpedance(*args):
    ...



class ComSimoutage(Protocol):
  numDegree: int
  "Contingency Analysis for specific region: Region extension by k-neighbourhood"
  vlmax: float
  "Limits for recording: Record if absolute voltage is above"
  blockSizeDC: int
  "Settings for Parallel Computation: Package Size for Optimised Method"
  setExclude: object
  "Criteria for AC recalculation of critical cases: Components to be ignored"
  minCtParal: int
  "Settings for Parallel Computation: Minimum number of defined study times"
  loadmax: float
  "Limits for recording: Record thermal loadings above"
  vmin_nk: float
  "Min. (n-k; k>=2)"
  PostContTime3: float
  "Calculation Settings: Post Contingency Time (End of Time Phase)"
  recLimit_nk: int
  "Limits for recording: Different limits for n-1 and n-k (k>1)"
  chr_name: str
  "Characteristic Name"
  iopt_Shw: int
  "Print report for each contingency"
  iEnableParalDC: int
  "Parallel Computation of DC Contingencies"
  diffLoadRestr: int
  "Recording filters for contingency loading results: Do not record if the absolute change in loading is below"
  termLoadThres: float
  "Also record busbars/terminals with a loading above"
  SleepTime: int
  "Sleep time in main loop of master"
  PostContTime2: float
  "Calculation Settings: Post Contingency Time (End of Time Phase)"
  order: float
  "Order"
  stepLoad: float
  "Criteria for AC recalculation of critical cases: Relative change of loading exceeds"
  vlmin: float
  "Limits for recording: Record if absolute voltage is below"
  copt_cntldf: int
  "Recording filters for contingency voltage results: Base Case versus Contingency Load Flow"
  screenRecOnly: int
  "Criteria for AC recalculation of critical cases: Screen only recorded elements"
  PostContTime1: float
  "Calculation Settings: Post Contingency Time (End of Time Phase)"
  timePhases: list
  "Time Phases"
  forceStd: int
  "Always use standard method"
  iStopIfOverLd: int
  "Stop contingency analysis if any thermal loading constraint is violated."
  p_rescntDC: object
  "Element and variable selection: DC-Results"
  iACDCCombine: int
  "AC/DC Combined (hidden)"
  minVoltRestr: int
  "Recording filters for contingency voltage results: Do not record if the absolute base case voltage is below"
  iConsSwSc: int
  "Consider Switching Rules of Substations"
  iQBEffMeth: int
  "Calculate Quad Booster Effectiveness: Calculation method"
  pFilter: object
  "Dynamic contingencies: Filters"
  maxLoadAbs: float
  "Criteria for AC recalculation of critical cases: Thermal loading of components exceeds"
  vmax_nk: float
  "Max. (n-k; k>=2)"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  iopt_action: int
  "Processing Actions"
  vlmax_nk: float
  "Limits for recording: Record if absolute voltage is above"
  stdBlockSizeDC: int
  "Settings for Parallel Computation: Package Size for Standard Method"
  i_qbsens: int
  "Calculate Quad Booster Effectiveness"
  addObjs2Transfer: object
  "Settings for Parallel Computation: Additional objects to transfer"
  rasActive: int
  "Consider Remedial Action Schemes (RAS)"
  dataExtDesc: list
  "Description"
  iIgnCriticalBC: int
  "Criteria for AC recalculation of critical cases: Ignore components that are overloaded in base case"
  dataExtUnit: list
  "Unit"
  diffVoltBase: float
  "Recording filters for contingency voltage results: Do not record if the absolute change in voltage is below"
  iMsgOutput: int
  "Output per Contingency Case"
  minCntcyDC: int
  "Settings for Parallel Computation: Minimum number of contingencies"
  maxLoadBase: float
  "Recording filters for contingency loading results: Do not record if the base case loading is above"
  bIgnoreTime: list
  "Definition of Study Times: Ignore"
  diffLoadBase: float
  "Recording filters for contingency loading results: Do not record if the absolute change in loading is below"
  useSensMethod: int
  "Use linearised method where applicable"
  maxLoad: float
  "Criteria for AC recalculation of critical cases: Thermal loading of components exceeds"
  iopt_asc: int
  "Print summary report"
  diffVoltRestr: int
  "Recording filters for contingency voltage results: Do not record if the absolute change in voltage is below"
  loadmax_nk: float
  "Limits for recording: Record thermal loadings above"
  iNewTopo: int
  "Topology rebuild"
  dynamicCase: int
  "Dynamic contingencies"
  iPerformOpt: int
  "Contingency Analysis for specific region"
  scrCritComb: int
  "Criteria for AC recalculation of critical cases: Combined loading criteria"
  pid_: int
  "ProjectID"
  iopt_noloss: int
  "Assume loss-free components"
  iDynamicMode: int
  "Contingencies to be calculated"
  iRedUnsupplied: int
  "Node Reduction Mode: Additionally remove unsupplied components"
  studyTime: list
  "Definition of Study Times: Study Time"
  parallelSetting: object
  "Parallel computation settings"
  copt_Linear: int
  "Calculation Method"
  maxld_nk: float
  "n-k; k>=2"
  stdBlockSize: int
  "Settings for Parallel Computation: Package Size for Standard Method"
  fold_id: object
  "In Folder"
  iOk: int
  "Ok flag"
  iopt_cntldf: int
  "Base Case versus Contingency Load Flow"
  recTermLoad: int
  "Record busbars/terminals with a loading above"
  iRecalcBase: int
  "Contingency Analysis for specific region: Recalculate base case load flow for the whole system"
  rasOutput: int
  "Output per Contingency Case: Show triggered RAS for each contingency in output window"
  caseNum: list
  "Contingency Number"
  dat_src: str
  "Data source"
  iStopIfVlim: int
  "Stop contingency analysis if any voltage constraint is violated."
  iopt_method: int
  "Calculation Method"
  iBusFaultProc: int
  "Handling of busbar fault"
  isPlannedOutages: int
  "Planned outages"
  iShowDebug: int
  "Display debug information"
  scrCritSimple: int
  "Criteria for AC recalculation of critical cases: Simple loading criterion"
  minCntcyAC: int
  "Settings for Parallel Computation: Minimum number of contingencies"
  sensMethod: int
  "Linearised method:Direct method:Backsubstitution (AC only)"
  for_name: str
  "Foreign Key"
  pRegion: object
  "Contingency Analysis for specific region: Monitored region"
  contents: list
  "Contents"
  iEnableParal: int
  "Parallel Computation of AC Contingencies"
  maxVoltRestr: int
  "Recording filters for contingency voltage results: Do not record if the absolute base case voltage is above"
  iEnableParalTS: int
  "Parallel Computation of Time Sweep"
  cpHeadFold: object
  "Head Folder"
  sensThreshBra: float
  "Sensitivity threshold used for linearised method: Minimal considered branch sensitivity"
  iopt_record: int
  "Recording filters for contingency loading results: Do not record if the base case loading is above"
  screeningMeth: int
  "Screening Method"
  iUpdt: int
  "Update Contingencies before running calculation"
  iSchemeStatus: int
  "Scheme Status"
  vmax_step_nk: float
  "Limits for recording: Record voltage step changes above"
  blockSize: int
  "Settings for Parallel Computation: Package Size for Optimised Method"
  iEnableTS: int
  "Calculate Time Sweep"
  iopt_evts: int
  "Recording filters for contingency voltage results: Method:Single Time Phase:Multiple Time Phases"
  minVoltBase: float
  "Recording filters for contingency voltage results: Do not record if the absolute base case voltage is below"
  charact: list
  "Charact."
  p_rescnt: object
  "Element and variable selection: AC-Results"
  iopt_init: int
  "Initialisation of Contingencies"
  addSumResults: int
  "Element and variable selection: Record additional result variables"
  upd_time: float
  "Post contingency time for order identification"
  vlmin_nk: float
  "Limits for recording: Record if absolute voltage is below"
  maxVoltBase: float
  "Recording filters for contingency voltage results: Do not record if the absolute base case voltage is above"
  addoptions: str
  "Additional Parameters"
  vmax_step: float
  "Limits for recording: Record voltage step changes above"
  i_gensens: int
  "Calculate Generator Effectiveness"
  gnrl_modby: str
  "Object modified by"
  iopt_Linear: int
  "Calculation Method"
  sensThreshBus: float
  "Sensitivity threshold used for linearised method: Minimal considered bus sensitivity"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  iopt_cnttime: int
  "Calculation Settings: Consider Specific Time Phase"
  loc_name: str
  "Name"
  PostContTime: float
  "Calculation Settings: Post Contingency Time (End of Time Phase)"


  def GetChildren(*args):
    ...

  def ClearCont(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Reset(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetLimits(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def IsOutOfService(*args):
    ...

  def AddCntcy(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AddRas(*args):
    ...

  def ExecuteAndCheck(*args):
    ...

  def GetInom(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def AddContingencies(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetNTopLoadedElms(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def RemoveRas(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def RemoveAllRas(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def CreateFaultCase(*args):
    ...

  def GetParent(*args):
    ...

  def Update(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def RemoveContingencies(*args):
    ...

  def IsReducible(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def MarkRegions(*args):
    ...

  def GetImpedance(*args):
    ...



class ComSvgexport(Protocol):
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  order: float
  "Order"
  addoptions: str
  "Additional Parameters"
  utmZone: list
  "Coordinates: UTM-Zone (e.g. 32N)"
  for_name: str
  "Foreign Key"
  coordType: int
  "Coordinates"
  objects: list
  "Object"
  cpHeadFold: object
  "Head Folder"
  scaleCoord: int
  "Coordinates: Export to Version < 22"
  fileName: str
  "SVG File"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"
  projection: str
  "Coordinates: Projection Type"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def SetObject(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetFileName(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetObjects(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class ComSvgimport(Protocol):
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  object: object
  "Object"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  order: float
  "Order"
  addoptions: str
  "Additional Parameters"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  fileName: str
  "SVG File"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def SetObject(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def SetFileName(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class ComTasks(Protocol):
  vecCases: list
  "Selection of study cases: Study cases"
  caseNum: str
  "Package index"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  order: float
  "Order"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  iEnableParal: int
  "Parallel computation"
  outMsgMode: int
  "Output per package"
  cpHeadFold: object
  "Head Folder"
  vecCasesIgn: list
  "Selection of study cases: Ignore"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  iopt_action: int
  "Processing actions"
  minTasks4Par: int
  "Parallel computation: Minimum number of packages"
  addObjs2Transfer: object
  "Parallel computation: Additional objects to transfer"
  charact: list
  "Charact."
  isForcedDbSync: int
  "Database changes of parallel processes: Database synchronisation time"
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  addoptions: str
  "Additional Parameters"
  gnrl_modby: str
  "Object modified by"
  listCases: int
  "Selection of commands/additional results: Study case"
  pid_: int
  "ProjectID"
  dbSyncTime: float
  "Database changes of parallel processes: Database synchronisation time"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  transDbChanges: int
  "Database changes of parallel processes"
  parallelSetting: object
  "Parallel computation: Parallel computation settings"
  parMethod: int
  "Distribute packages"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def AppendStudyCase(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def SetAdditionalResultsFlagForCommand(*args):
    ...

  def Energize(*args):
    ...

  def AppendCommand(*args):
    ...

  def GetCommandsForStudyCase(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def IsStudyCaseIgnored(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def IsAdditionalResultsFlagSetForCommand(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetStudyCases(*args):
    ...

  def SetResultsFolder(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def SetIgnoreFlagForCommand(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def IsCommandIgnored(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def Isolate(*args):
    ...

  def SwitchOff(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def RemoveCmdsForStudyCaseRow(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def GetNumberOfStudyCases(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def RemoveCommand(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def RemoveStudyCase(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def RemoveStudyCases(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetIgnoreFlagForStudyCase(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetNumberOfCommandsForStudyCase(*args):
    ...



class ComTececo(Protocol):
  Start: int
  "Calculation Points Calculation Period: Start"
  pDPL: object
  "User-defined Costs: Cost Assessment Script"
  frm_Tie: int
  "Optimise Tie Open Points"
  caseNum: str
  "Case number"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  frm_Losses: int
  "Losses"
  order: float
  "Order"
  iUseSel: int
  "Costs for losses: Consider user-defined set of substations/feeders only"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  iEnableParal: int
  "Parallel computation"
  frm_UserCosts: int
  "User-defined Costs"
  pTie: object
  "Optimise Tie Open Points: Tie Open Point Optimisation"
  cpHeadFold: object
  "Head Folder"
  pRes: object
  "Results"
  paralSet: int
  frm_Report: int
  "Report"
  iSchemeStatus: int
  "Scheme Status"
  iLdGrowth: int
  "Additional Settings: Incorporate load growth"
  oid_: int
  "ObjectID"
  CostsnLLoss: float
  "Costs for losses: Costs for Losses (no Load)"
  gnrl_modif: int
  "Object modified"
  iCreated: int
  "ComTececo Command has already been created"
  iopt_action: int
  "Processing Actions"
  iTolerance: int
  "Additional Settings: Tolerance for Calculation Points (in days)"
  addObjs2Transfer: object
  "Parallel computation: Additional objects to transfer"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  minCalcPt4Par: int
  "Parallel computation: Minimum number of calculation points"
  DateUserDef: list
  "Calculation Points: Date"
  frm_SubOut: int
  "Interruption Costs - Costs for Outages in Substations"
  pComStatsim: object
  "Losses: Quasi-Dynamic Simulation"
  parallelSettings: object
  "Parallel computation: Parallel computation settings"
  ColCosts: list
  "Costs for Losses: Costs"
  InitAddCosts: float
  "Additional annual costs"
  addoptions: str
  "Additional Parameters"
  outputType: int
  "Output"
  CalcPoints: int
  "Calculation Points: Calculate"
  CostsLLoss: float
  "Costs for losses: Costs for Losses (Load)"
  pRel3SubOut: object
  "Interruption Costs - Costs for Outages in Substations: Reliability Assessment"
  pSel: object
  "Costs for losses: Selection"
  pRel3: object
  "Interruption Costs: Reliability Assessment"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  End: int
  "Calculation Points Calculation Period: End"
  InterestRate: float
  "Additional Settings: Calculatory Interest Rate"
  tid_: int
  "TimeID"
  frm_Interrupt: int
  "Interruption Costs"
  root_id: object
  "Original Location"
  frm_LineOut: int
  "Interruption Costs - Costs for Outages on Lines/Cables"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  ColHmax: list
  "Costs for Losses: Hmax"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def UpdateTablesByCalcPeriod(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComTececocmp(Protocol):
  isCreateSummaryRes: int
  "Tasks: Create summary result file"
  vecCases: list
  "Selection of study cases: Study cases"
  isPltInvCosts: int
  "Results to plot: Net present value of investments"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  isCalcComTececo: int
  "Tasks: Run Techno-economical calculations"
  order: float
  "Order"
  isPltUserDefCosts: int
  "Results to plot: Net present value of user-defined costs"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  pBaseCase: object
  "Selection of study cases: Base case"
  isCreateTimesweepRes: int
  "Tasks: Create timesweep result files in study cases"
  vecCasesIgn: list
  "Selection of study cases: Ignore"
  iSchemeStatus: int
  "Scheme Status"
  isPltTotCosts: int
  "Results to plot: Net present value of total costs"
  isPltEIC: int
  "Results to plot: Net present value of expected interruption costs"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  isCreateSummaryPlots: int
  "Tasks: Create plots for summary results"
  isPltLossCosts: int
  "Results to plot: Net present value of costs for losses"
  isCreateTimesweepPlots: int
  "Tasks: Create plots for timesweep results"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  pResultFile: object
  "Summary results"
  isVerifyEqualCmdSettings: int
  "Tasks: Verify equality of underlying command settings"
  addoptions: str
  "Additional Parameters"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def AppendStudyCase(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def CalcEstimatedPaybackPeriod(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def CalcInternalRateOfReturn(*args):
    ...

  def AttributeType(*args):
    ...

  def CalcDiscountedEstimatedPaybackPeriod(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def RemoveStudyCases(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComTransfer(Protocol):
  isScaleGen: int
  "Generators"
  iGensFrm: int
  "Generator scaling mode"
  iLodsFrm: int
  "Loads"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  tcadef: int
  "Transfer capacity definition"
  dInitScale: float
  "Initial conditions: Initial scaling factor"
  iopt_scen: int
  "Last feasible solution"
  iopt_method: int
  "Calculation Method"
  p_GenSet: object
  "Generators: Generator set"
  order: float
  "Order"
  iGensel: int
  "Generators"
  p_boundary: object
  "User defined elements: Boundary"
  iLoad: int
  "Option"
  if_volmax: float
  "Option: Upper limit of allowed voltage"
  p_LodSet: object
  "Loads: Load set"
  vlevconst: float
  "Ignore all constraints for...: Nominal voltage below or equal to"
  psel_elms: object
  "Consider constraints only for selected objects: Selection"
  for_name: str
  "Foreign Key"
  iCntcon: int
  "Contingency constrained"
  cpHeadFold: object
  "Head Folder"
  iopt_volcons: int
  "Consider voltage limits"
  dIncrmnt: float
  "Initial conditions: Initial step size"
  p_scenario: object
  "Last feasible solution: Operation scenario location"
  iSchemeStatus: int
  "Scheme Status"
  iVolt: int
  "Option"
  isScaleLod: int
  "Loads"
  oid_: int
  "ObjectID"
  iopt_Palim: int
  "Consider active power limits"
  if_load: float
  "Option: Maximum thermal loading of components"
  p_toReg: object
  "Interconnection regions: Importing region"
  gnrl_modif: int
  "Object modified"
  dTolerance: float
  "Convergence criteria: Min. step size"
  ovv_relax: float
  "Continue calculation if base case has voltage violations: Relax constraints by"
  p_ficNet: object
  "Use fictitious border network: Border network"
  iopt_lodcons: int
  "Consider thermal constraints"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  p_impElms: object
  "User defined elements: Importing elements"
  bcOvvols: int
  "Continue calculation if base case has voltage violations"
  iStopIter: int
  "Convergence criteria: Max. number of iterations"
  p_cntrep: object
  "Show contingency analysis report for the last feasible solution: Contingency analysis report"
  dataExtUnit: list
  "Unit"
  iScaleMod: int
  "Scaling elements"
  iCntres: int
  "Show contingency analysis report for the last feasible solution"
  iopt_selreg: int
  "Consider constraints only for selected objects"
  iSave: int
  "Save Results"
  addoptions: str
  "Additional Parameters"
  p_expElms: object
  "User defined elements: Exporting elements"
  if_volmin: float
  "Option: Lower limit of allowed voltage"
  flowcheck: int
  "Measured transfer capacity"
  p_fromReg: object
  "Interconnection regions: Exporting region"
  iFicNet: int
  "Use fictitious border network"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  p_cntcmd: object
  "Contingency constrained: Contingency Analysis"
  pResults: object
  "Results"
  ovl_relax: float
  "Continue calculation if base case is overloaded: Relax constraints by"
  bcOvlods: int
  "Continue calculation if base case is overloaded"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  iopt_pf: int
  "Keep constant power factor"
  loc_name: str
  "Name"
  ioptIgn: int
  "Ignore all constraints for..."
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def GetTransferCalcData(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def IsLastIterationFeasible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComUcte(Protocol):
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  order: float
  "Order"
  iopt_iqlims: int
  "Options: Ignore reactive power limits for generators"
  for_name: str
  "Foreign Key"
  netsubfolder: str
  "Options: Network Data Subfolder"
  cpHeadFold: object
  "Head Folder"
  uctenames: list
  "File Type: File Names"
  uctname: str
  "UCTE Data"
  iopt_dacf: int
  "Options: Import for DACF process"
  iSchemeStatus: int
  "Scheme Status"
  targname: str
  "Folder"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  targpath: object
  "in"
  dataExtDesc: list
  "Description"
  iopt_prj: int
  "Import into"
  dataExtUnit: list
  "Unit"
  addoptions: str
  "Options: Additional Parameters"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  pAddPrj: object
  "Name"
  iopt_qforpv: int
  "Use Q value for PV generators"
  iopt_nlod2gen: int
  "Options: Convert negative loads to generators"
  tid_: int
  "TimeID"
  iopt_tr2zpu: int
  "Options: Convert transformer equivalent to common impedance"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  iopt_con: str
  "File Type"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def SetBatchMode(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComUcteexp(Protocol):
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  uctename: str
  "File Type: UCTE Data"
  gridenable: list
  "Enable"
  order: float
  "Order"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  ibranchconv: int
  "Options: Export branch as single equivalent line"
  iSchemeStatus: int
  "Scheme Status"
  iUseChrName: int
  "Options: Use first character of characteristic name as branch 'Order Code'"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  uctevmin: float
  "Options: Export UCTE voltage >="
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  addoptions: str
  "Options: Additional Parameters"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  iopt_con: str
  "File Type"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetUcteNodeName(*args):
    ...

  def SearchObject(*args):
    ...

  def GetFromToNodeNames(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetOrderCode(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def InitQuickAccess(*args):
    ...

  def SetGridSelection(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def ExportAndInitQuickAccess(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetConnectedBranches(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def QuickAccessAvailable(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def ResetQuickAccess(*args):
    ...

  def GetClassName(*args):
    ...

  def DeleteCompleteQuickAccess(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def BuildNodeNames(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ComWktimp(Protocol):
  wktFormatIdx: int
  "Import from: Format"
  dat_src: str
  "Data source"
  datasetLabel: str
  "Dataset import: Label"
  dbDriverName: str
  "Import from: ODBC Driver Name"
  chr_name: str
  "Characteristic Name"
  dbUser: str
  "Import from: User"
  order: float
  "Order"
  dbPassword: str
  "Import from: Password"
  iopt_update: int
  "Diagram Creation Mode:Create:Extend"
  dbAddParam: str
  "Import from: Additional ODBC Parameters"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  wktFormat: str
  "Source"
  dbInfo: str
  "Import from: e.g."
  iSchemeStatus: int
  "Scheme Status"
  dbDatabase: str
  "Import from: Database"
  oid_: int
  "ObjectID"
  generalValue: list
  "Value"
  gnrl_modif: int
  "Object modified"
  useDatapart: int
  "Partial import"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  useDataset: int
  "Dataset import"
  datapartLabel: str
  "Partial import: Labels"
  addoptions: str
  "Additional Parameters"
  dbServer: str
  "Import from: DB Service"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  pAddPrj: object
  "Import into: Existing Project"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  fFile: str
  "Import from: Name"
  loc_name: str
  "Name"
  generalKey: list
  "Key"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetModifiedObjects(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetCreatedObjects(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Execute(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class SetCluster(Protocol):
  PeakLoad: list
  "Peak"
  show_load: object
  "Displayed load"
  load_plot: object
  "Displayed load"
  first_yr: int
  "Year"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  numstates: int
  "Number of States"
  elmType: list
  "Element type"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  ph_info: list
  "Phase"
  numloads: int
  "Number of Loads"
  iSchemeStatus: int
  "Scheme Status"
  isGens: int
  "Generators are included in the clusters."
  cluster: list
  "Clusters"
  last_yr: int
  "End Time"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  PeakUnit: list
  "Unit"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  cstarttime: int
  "Start Time"
  load: list
  "Elements"
  flags: int
  "Flags for settings used upon creation"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  accStates: float
  "Accuracy"
  fold_id: object
  "In Folder"
  cendtime: int
  "End Time"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def CalcCluster(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def GetNumberOfClusters(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class SetColscheme(Protocol):
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  alarm: list
  "Criterion"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  cUseAlarm: int
  "2. Alarm"
  udefColouring: list
  "User-defined Filter"
  cpHeadFold: object
  "Head Folder"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  cEnergizing: int
  "1. Energising Status:  "
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  cUseEnergizing: int
  "1. Energising Status"
  cAlarm: int
  "2. Alarm:  "
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  colouring: list
  "Criterion"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  cColouring: int
  "3. Other:  "
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  cUseColouring: int
  "3. Other"
  fold_id: object
  "In Folder"
  cGroup: int
  "3. Other:  "
  energizing: list
  "1. De-energised"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def GetEnergisingColouringMode(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def SetFilter(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def SetColouring(*args):
    ...

  def GetColouringMode(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetAlarmColouringMode(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class SetDatabase(Protocol):
  cacheExpiration: int
  "Cache options: Expiration time"
  db_odbc_driver: list
  "ODBC driver"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  db_user: list
  "Username"
  db_database: list
  "Database name"
  path: list
  "Additional directory for PATH"
  for_name: str
  "Foreign Key"
  db_service: list
  "Server"
  system: str
  "Database system"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  cacheFrame: list
  "Cache options"
  parameters: list
  "Additional parameters"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  db_schema: list
  "Database schema"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  db_password: str
  "Password"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def EmptyCache(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class SetDeskpage(Protocol):
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  pConts: list
  "Contents ..."
  order: float
  "Sequence"
  viewportWidth: int
  "Viewport width (pixel)"
  for_name: str
  "Foreign Key"
  rZoomRTX: float
  "Right Top: X"
  selectedInTabGroup: int
  "Is selected window in tab group"
  cpHeadFold: object
  "Head Folder"
  tabGroupIndex: int
  "Tab group"
  iSchemeStatus: int
  "Scheme Status"
  viewportHeight: int
  "Viewport height (pixel)"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  rZoomLBX: float
  "Zoom coordinates Left Bottom: X"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  showSearchField: int
  "Show search field"
  rZoomLBY: float
  "Y"
  visible: int
  "Visible"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  rZoomRTY: float
  "Right Top: Y"
  pGrph: object
  "Graphic"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  pageStateStr: list
  "Page state (hidden)"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def Show(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def Close(*args):
    ...

  def GetImpedance(*args):
    ...



class SetDesktop(Protocol):
  pObjx: object
  "Element"
  Objectx: list
  "Element"
  drel: float
  "Axis: Start Value"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  descx: list
  "User defined Legend"
  for_name: str
  "Foreign Key"
  iopt_tim1: int
  "x-Axis variable"
  cpHeadFold: object
  "Head Folder"
  max: float
  "Axis Limits: Maximum"
  chart: int
  "Axis: Chart"
  floatingGroupGeometry: str
  "Group window geometry"
  pRes: object
  "User defined Results"
  colour1: int
  "Cursors: Colour 1"
  fit: int
  "Axis: Adapt Scale"
  PlotTyp: object
  "Default type for plots"
  iSchemeStatus: int
  "Scheme Status"
  curveTracking: int
  "Display curve values in balloon help"
  pfm_type: list
  "Type of plot"
  oid_: int
  "ObjectID"
  width2: int
  "Cursors: Width 2"
  editcmd: int
  "Command Button:Execute command:Open command"
  pfm_default: int
  "PFM-default plots"
  gnrl_modif: int
  "Object modified"
  Variablex: list
  "Variable"
  min: float
  "Axis Limits: Minimum"
  iShown: int
  "Active Page"
  xgrid: int
  "Grid Lines"
  xgrid_item: str
  "Reference"
  charact: list
  "Charact."
  dSplit: float
  "Scrollbar Position"
  dataExtDesc: list
  "Description"
  iopt_tim: int
  "x Axis Variable"
  dataExtUnit: list
  "Unit"
  last: float
  "Axis: Range"
  trigger: float
  "Axis Adapt Scale: Trigger"
  colour2: int
  "Cursors: Colour 2"
  iorder: int
  "Sequence of Desktops"
  tabSplitGeometry: str
  "Tab split geometry"
  width1: int
  "Cursors: Width 1"
  iopt_col: int
  "Use Curve Colours for Labels"
  xgrid_count: int
  "Grid Lines: Count"
  trg: float
  "Trigger"
  gnrl_modby: str
  "Object modified by"
  iopt_onl: int
  "While Simulation is running"
  pid_: int
  "ProjectID"
  sh_tit: int
  "Show Title"
  tid_: int
  "TimeID"
  Pages: list
  "Contents ..."
  auto_xscl: int
  "Axis: Auto Scale"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  map: int
  "Axis: Scale"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def IsFrozen(*args):
    ...

  def Freeze(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def SetXVar(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetScaleX(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetActivePage(*args):
    ...

  def RemovePage(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def Unfreeze(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def Show(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ZoomAll(*args):
    ...

  def SetViewArea(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def WriteWMF(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def SetResults(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOpened(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetCanvasSize(*args):
    ...

  def GetUnom(*args):
    ...

  def AddPage(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def SetAdaptX(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetPage(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DoAutoScaleX(*args):
    ...

  def SetAutoScaleX(*args):
    ...

  def Close(*args):
    ...

  def GetImpedance(*args):
    ...



class SetDistrstate(Protocol):
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  numstates: int
  "Number of States"
  dataExtUnit: list
  "Unit"
  numstations: int
  "Number of Stations"
  stations: list
  "Stations"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  plotStat: object
  "Displayed Station"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  cluster: list
  "Clusters"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"
  show_stat: object
  "Displayed station"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def CalcCluster(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class SetFilt(Protocol):
  autofilter: list
  "Filter"
  iopt_sgl: int
  "Single Line Option"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  isrchstr: int
  "Search literally"
  sInFold: list
  "Search Folders"
  order: float
  "Order"
  icoups: int
  "Interconnecting Branches:None:Grid:Zone:Area"
  istopmatch: int
  "Stop at matching Folder"
  objset: list
  "Object Filter"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  varName: str
  "in Parameter (empty: all)"
  cpHeadFold: object
  "Head Folder"
  icalcrel: int
  "Relevant Objects for Calculation"
  outserv: int
  "Out of Service"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  iautocol: int
  "Automatic Colouring"
  icolbr: int
  "Colouring Branches like Nodes"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  pstart: object
  "Look in"
  autovarname: list
  "Parameter"
  cobjset: str
  "Object Filter"
  ireg: int
  "Regular Expression"
  icase: int
  "Case sensitive"
  autodesc: list
  "Description"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  color: int
  "Colour"
  tid_: int
  "TimeID"
  ibinsgl: int
  "whose Connections (Busbars, Terminals) are drawn"
  pGraphic: object
  "Graphic"
  root_id: object
  "Original Location"
  isubfold: int
  "Include Subfolders"
  iword: int
  "Whole words only"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  expr: list
  "Expression"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def Get(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class SetLevelvis(Protocol):
  rRecloseSzFac: float
  "Reclose switches: Size factor"
  rBGRTopY: float
  "Y"
  iNormOpenFill: int
  "Normally open switches: Fill"
  iRmtSubCol: int
  "Remotely controlled substations: Colour"
  symbolRemoteStations: int
  "Remotely controlled substations"
  symbolTapPositions: int
  "Transformers, machines, shunts: Tap positions"
  symbolLdfArrows: int
  "Power flow direction arrows"
  dat_src: str
  "Data source"
  iPQS: int
  "Displayed variable"
  chr_name: str
  "Characteristic Name"
  rCircScal: float
  "Scaling Factor for Load and Generation Circles"
  iTieOptFill: int
  "Tie open points: Fill"
  rBGLBotY: float
  "Y"
  iMapType: int
  "Map layer"
  symbolLineComp: int
  "Lines: Line compensations"
  iNormOpenCol: int
  "Normally open switches: Colour"
  sBackFilNam: str
  "File"
  aSymList: str
  "Object"
  rBGLBotX: float
  "X"
  iBackgroundBrightness: int
  "Brightness (-100..100)"
  iShwCircSub: int
  "Substations"
  symbolLineSecLoads: int
  "Lines: Sections and line loads"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  iLayoutNorm: int
  "Show normally open switches"
  iStandbyCol: int
  "Open standby switches: Colour"
  iLods: int
  "Load Circles"
  symbolTieOpenPoints: int
  "Tie open points"
  iMapProvider: int
  "Provider"
  iSchemeStatus: int
  "Scheme Status"
  iRecloseCol: int
  "Reclose switches: Colour"
  oid_: int
  "ObjectID"
  Internals: list
  "Contents ..."
  iBackgroundType: int
  "Background type"
  rNormOpenWd: float
  "Normally open switches: Line width"
  symbolConnNamesBlock: int
  "Block diagram: Connection names"
  symbolPhases: int
  "Lines: Phases"
  symbolReclosers: int
  "Reclose switches"
  gnrl_modif: int
  "Object modified"
  rTieOptSzFac: float
  "Tie open points: Size factor"
  symbolConnPoints: int
  "Lines: Connection points"
  iLodTot: int
  "Load Type"
  showLdfAnimation: int
  "Power flow direction arrows: Show animation"
  showFuses: int
  "Lines: Fuses in bays"
  iStandbyFill: int
  "Open standby switches: Fill"
  iTieOptCol: int
  "Tie open points: Colour"
  charact: list
  "Charact."
  iSetBGr: int
  "Set position and size"
  symbolConnNumbersBlock: int
  "Block diagram: Connection numbers"
  dataExtDesc: list
  "Description"
  iLayoutTieOpt: int
  "Show Tie Open Points"
  rPrioCols: list
  "Colour"
  iForWhat: int
  "Target"
  rStandbySzFac: float
  "Open standby switches: Size factor"
  dataExtUnit: list
  "Unit"
  iKRatio: int
  "Keep aspect ratio"
  symbolNormOpenSwitches: int
  "Normally open switches"
  rTieOptWd: float
  "Tie open points: Line width"
  iGens: int
  "Generation Circles"
  rPrioScals: list
  "Scaling Factor"
  iBackgroundSaturation: int
  "Saturation (-100..100)"
  iLodCol: int
  "Circle Colour"
  localMapEpsgCode: int
  "EPSG:"
  rNormOpenSzFac: float
  "Normally open switches: Size factor"
  rStandbyWd: float
  "Open standby switches: Line width"
  iGenCol: int
  "Circle Colour"
  iSclBackLim: int
  "Minimum scale 1 :"
  gnrl_modby: str
  "Object modified by"
  symbolStandbySwitches: int
  "Open standby switches"
  pid_: int
  "ProjectID"
  rRecloseWd: float
  "Reclose switches: Line width"
  tid_: int
  "TimeID"
  aLevList: str
  "Selected layer for actions"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  iShwCircTrf: int
  "Secondary Substations"
  symbolVectorGroups: int
  "Transformers, machines, shunts: Vector groups"
  iArrow: int
  "Power flow direction arrows: Direction represents"
  symbolConnArrows: int
  "Lines: Connection arrows"
  fold_id: object
  "In Folder"
  rBGRTopX: float
  "X"
  iRecloseFill: int
  "Reclose switches: Fill"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def ChangeWidthVisibilityAndColour(*args):
    ...

  def Reset(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def ChangeFont(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def ChangeLayer(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def Mark(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def Align(*args):
    ...

  def ChangeRefPoints(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AdaptWidth(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class SetParalman(Protocol):
  ParalTyp: int
  "Parallel computing method"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  maxCore: list
  "Max. number of processes on local machine: Available logical cores"
  affinity: list
  "CPU index"
  for_name: str
  "Foreign Key"
  trsf_mod: int
  "Communication method"
  p_CptGrp: object
  "Computer group"
  SlaveNum: int
  "Max. number of processes on local machine"
  useCore: list
  "Max. number of processes on local machine: Max. processes"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  iAssignCPU: int
  "Assign specific affinity to each process"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  host: str
  "Master host name or IP"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def GetTransfType(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def Isolate(*args):
    ...

  def SwitchOff(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetNumSlave(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def SetTransfType(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def SetNumSlave(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class SetPath(Protocol):
  c_last: object
  "Last Busbar"
  c_first: object
  "First Busbar"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  icolor: int
  "Colour"
  cpHeadFold: object
  "Head Folder"
  c_brfirst: object
  "First Branch"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  c_brlast: object
  "Last Branch"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetBuses(*args):
    ...

  def GetContents(*args):
    ...

  def GetImpedanceAtPos(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def GetRelay(*args):
    ...

  def AllBreakers(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetNodeIndex(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetBranches(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AllProtectionDevices(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def AllClosedBreakers(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetPathFolder(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def Create(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def AllOpenBreakers(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetAll(*args):
    ...

  def GetInom(*args):
    ...

  def GetAbsDistance(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def GetControlledNode(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...

  def NextRelayBranch(*args):
    ...



class SetPrj(Protocol):
  customEpsgCode: int
  "EPSG:"
  geoCoordinateSystem: int
  "Coordinate system"
  voltLevMv: float
  "MV voltage level"
  iAutoSlack: int
  "Settings for slack assignment: Auto slack assignment:Method 1:Method 2:off"
  iCalcSymComp: int
  "Calculation of symmetrical components for untransposed lines"
  iIsolateWithEarth: int
  "Switching Actions: Isolate with earthing"
  dudevtrf: float
  "Nominal Voltage Check Max. allowed deviation from Terminal voltage: for Transformers"
  fontSglLabNod: int
  "Font-ID for node labels"
  iIsolateBrkOnly: int
  "Switching Actions: Isolate opens circuit-breakers only"
  clenexp: str
  "Lines/Cables Length unit, m"
  percentPrec: int
  "Percent (%) decimal places"
  iBayInNewStat: int
  "Insertion of new substations: Insert substations with bays"
  dat_src: str
  "Data source"
  Sbase: float
  "Base Apparent Power"
  iTowEarthRed: int
  "Earth wire reduction of towers"
  chr_name: str
  "Characteristic Name"
  drawingToolbarStateGeographic: list
  "Drawing toolbar state (geographic diagrams)"
  geoBoundsSouth: float
  "WGS-84 bounds: south"
  sSiteTypes: list
  "Site Types"
  drawingToolbarStatePlot: list
  "Drawing toolbar state (plot pages)"
  ldfVoltPrec: int
  "Load Flow and Simulation: Decimal places"
  lneLoadingCalc: int
  "Consider line compensation current for line loading calculation"
  fontSglTitle: int
  "Font-ID for title and legends"
  cspqexpgen: str
  "Static Generators/Synchr. Machines P, Q, S unit, VA,W,var"
  iConsLocalOpts: int
  "Consider local Opt*"
  fontSglLabBra: int
  "Font-ID for branch labels"
  iStartTime: int
  "Start Time"
  shcAmpExp: str
  "Short-Circuit: Ampere, A"
  iSwtTypGrThan: int
  "When connecting component to busbar create: If nominal voltage >= threshold create"
  degreePrec: int
  "Degree (angle) decimal places"
  fontSglResNod: int
  "Font-ID for node results"
  for_name: str
  "Foreign Key"
  iSwtTypSmThan: int
  "When connecting component to busbar create: If nominal voltage < threshold create"
  shcPowerExp: str
  "Short-Circuit: W, VA, var"
  dunomelne: float
  "Nominal Voltage Check Max. allowed difference over Lines/Switches/Fuses: for Lines"
  dunomeswt: float
  "Nominal Voltage Check Max. allowed difference over Lines/Switches/Fuses: for Switches and Fuses"
  thrWrnLength: float
  "Line couplings: Allowable difference in lengths of lines"
  cpHeadFold: object
  "Head Folder"
  drawingToolbarStateModelica: list
  "Drawing toolbar state (Modelica pages)"
  sBordSym: list
  "Border Symbol"
  cspqexp: str
  "Loads/Asyn. and DC Machines P, Q, S unit, VA,W,var"
  ldfPowerExp: str
  "Load Flow and Simulation: W, VA, var"
  ldfPowerPrec: int
  "Load Flow and Simulation: Decimal places"
  shcPowerPrec: int
  "Short-Circuit: Decimal places"
  geoBoundsEast: float
  "WGS-84 bounds: east"
  iSchemeStatus: int
  "Scheme Status"
  iShowInactElts: int
  "Variations: Show inactive elements from other variations"
  rmin: float
  "Min. Resistance rmin"
  dudevother: float
  "Nominal Voltage Check Max. allowed deviation from Terminal voltage: for other Elements"
  oid_: int
  "ObjectID"
  iAutoOutOfServ: int
  "Automatic Out of Service Detection"
  sDefSym: list
  "Default Symbol"
  drawingToolbarStateSchematic: list
  "Drawing toolbar state (schematic diagrams)"
  shcAmpPrec: int
  "Short-Circuit: Decimal places"
  iStatus: int
  "Status:Draft:Issued"
  fontsStr: list
  "Fonts"
  showSiteName: int
  "Display name: Show site name"
  gnrl_modif: int
  "Object modified"
  frnom: float
  "Default frequency"
  sSubstTyp: list
  "Substation Types"
  voltLevCB: float
  "When connecting component to busbar create: Threshold:"
  ldfAmpExp: str
  "Load Flow and Simulation: Ampere, A"
  iPlannedOutOrder: int
  "Planned Outages: Application sequence"
  iEndTime: int
  "End Time"
  onForNoneFBcon: int
  "Settings for slack assignment: Auto slack assignment for areas without connection to fictitious border grid"
  diagramSearchAttribs: list
  "Additional attributes to include in diagram search (comma separated list): ."
  extDataDir: str
  "External Data Directory: External Data Directory"
  iSwitchAmbiguous: int
  "Switch on performs forced closing in ambiguous situations"
  charact: list
  "Charact."
  energyPrec: int
  "Energy decimal places"
  currency: str
  "Currency unit"
  dataExtDesc: list
  "Description"
  displayNameMode: int
  "Display name: Mode:Show element name only:Prepend parent element:Prepend site and/or substation name"
  gmin: float
  "Min. Conductance gmin"
  drawingToolbarStateBlock: list
  "Drawing toolbar state (block diagrams)"
  prefShowSite: int
  "Prefer site name"
  dataExtUnit: list
  "Unit"
  defaultPlotStyle: object
  "Default plot style"
  iSuppliedElmsAlgo: int
  "Determination of supplying transformers: Considered transformers:&2&All:&0&Only those located in stations:&3&Only voltage controlling ones:&1&Only voltage controlling ones, located in stations"
  ilenunit: int
  "Units"
  maxJumpTo: int
  "Max. number of entries in to-labels"
  showDiaextdata: int
  "External Data Directory: Display reminder after file selection"
  iBBAlgo: int
  "Standard beach ball algorithm"
  refMachinePrio: int
  "Settings for slack assignment: Priority for Reference Machines:Rated Power:Active Power Capability:Active Power Reserve"
  shcVoltPrec: int
  "Short-Circuit: Decimal places"
  ldfAmpPrec: int
  "Load Flow and Simulation: Decimal places"
  voltLevHv: float
  "HV voltage level"
  geoBoundsWest: float
  "WGS-84 bounds: west"
  overviewDetails: list
  "Category detail level displayed in project overview window"
  fontBlkTitle: int
  "Font-ID for Title and Legends"
  useNewPlotFramework: int
  "Use new plot framework"
  gnrl_modby: str
  "Object modified by"
  fontSglResBra: int
  "Font-ID for branch results"
  pid_: int
  "ProjectID"
  showJumpTo: int
  "Show jump-to labels at graphically half-connected lines"
  perUnitPrec: int
  "Per unit (p.u.) decimal places"
  otherPrec: int
  "Decimal places for other units"
  fontBlkLabBra: int
  "Font-ID for signal labels"
  showSubStatName: int
  "Display name: Show substation name"
  shcVoltExp: str
  "Short-Circuit: Volt, V"
  geoBoundsNorth: float
  "WGS-84 bounds: north"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  iopt_switch: int
  "When connecting component to busbar create"
  iDispNames: int
  "Names in plot legends"
  outages: int
  "Planned Outages: Creation"
  sSymbol: list
  "Symbol"
  loc_name: str
  "Name"
  ldfVoltExp: str
  "Load Flow and Simulation: Volt, V"
  iFlowOrient: int
  "Flow Orientation:Mixed Mode:Load Oriented:Generator Oriented"
  fontBlkLabNod: int
  "Labels for block labels"
  ymodmin: float
  "Threshold Impedance for Z-model"
  fold_id: object
  "In Folder"
  defaultPlotColourPalette: object
  "Default colour palette"
  applyAutomatically: int
  "Planned Outages: Consider automatically upon study case activation"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetFontFor(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetFontID(*args):
    ...

  def GetImpedance(*args):
    ...



class SetScenario(Protocol):
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def Check(*args):
    ...

  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def Default(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def Print(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class SetSelect(Protocol):
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  cpHeadFold: object
  "Head Folder"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  iusedSub: int
  "Type"
  dataExtUnit: list
  "Unit"
  iused: int
  "Used for"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def AllBreakers(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def AllBars(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def AllSym(*args):
    ...

  def Move(*args):
    ...

  def AllLines(*args):
    ...

  def AddRef(*args):
    ...

  def Clear(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def AllClosedBreakers(*args):
    ...

  def AllLoads(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def AllElm(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def AllTypLne(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def All(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def AllOpenBreakers(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def AllAsm(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetAll(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class SetTime(Protocol):
  month: int
  "Month"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dayofweek: int
  "Details: Day of Week:Monday:Tuesday:Wednesday:Thursday:Friday:Saturday:Sunday"
  sec: int
  "Second"
  cDate: str
  "Date"
  for_name: str
  "Foreign Key"
  week: int
  "Details: Week"
  hour: int
  "Hour"
  cpHeadFold: object
  "Head Folder"
  outserv: int
  "Ignore Time Trigger"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  datetime: int
  "Date and Time"
  day: int
  "Day"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  year: int
  "Year"
  min: int
  "Minute"
  cTime: str
  "Time"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  isleapyear: int
  "Details: Leap Year"
  dayofyear: int
  "Details: Day of Year"
  hourofyear: int
  "Details: Hour of Year"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def SetTime(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def SetTimeUTC(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def Date(*args):
    ...

  def Time(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class SetUser(Protocol):
  pwPassword: list
  "Password"
  iCoreInput: int
  "Actual number of processes to be used: Number of processes"
  graphicPageBackgroundColour: int
  "Background colours: Graphic page"
  iFloatDay: int
  "Floating Licence Validity (Days)"
  maxZoomScaleGPS: int
  "Mark in graphic Zoom-in on marked elements: Maximum scale in GPS diagrams"
  iAutoScroll: int
  "Automatic Scrolling"
  customDate: list
  "Localisation: x"
  enableMsgFilter: int
  "Enable message filter"
  showmod: int
  "Selected Modules"
  iPrErr: int
  "Displayed messages: Errors"
  rMinTextSz: float
  "General options: Show text only if height will be at least"
  showTabIcon: int
  "Tabbed Document Interface: Show tab icons"
  iAskDel: int
  "Browser: Confirm Delete Action"
  confirmTabClose: int
  "Tabbed Document Interface: Show confirmation dialog when closing diagrams"
  prioChaVar: int
  "Priority:1:2:3"
  iShowExit: int
  "Confirmation dialogs: Show 'Exit' dialog"
  modelTypePageBackgroundColour: int
  "Background colours: Model type"
  markSameWords: int
  "Options: Enable Same-word Highlighting"
  dat_src: str
  "Data source"
  markInGraphicMarkers: int
  "Mark in graphic: Highlight small elements using additional markers"
  chr_name: str
  "Characteristic Name"
  iMarkInGrf: int
  "Mark in graphic"
  iRszBr: int
  "General options: Allow Resizing of branch objects"
  iUpdateCheckIv: int
  "Check for application updates: Update check interval"
  iColChaVar: int
  "Parameter with Characteristics"
  tool_advan: int
  "Advanced Toolbar"
  iAutoGrp: int
  "Open graphics board on study case activation"
  pwKamikaze: int
  "Use network settings from configuration"
  drwToolBarLibraryZoom: float
  "Drawing Toolbar Zoom Factor"
  iShowWelcome: int
  "Welcome Dialog"
  iAuto1Br: int
  "Place Branch Objects with One Connection Automatically"
  diagramWindowMargin: int
  "General options: Diagram window margin"
  dmColumnWidths: list
  "Data Manager Column Widths"
  msgTextFilter: list
  "Contained text"
  for_name: str
  "Foreign Key"
  pTbar: list
  "Toolbar"
  ishowmargin: int
  "Options: Show Selection Margin"
  msgTextFilter2: list
  "Contained text"
  iRemLastObj: int
  "Data Manager: Remember last selected object"
  cpHeadFold: object
  "Head Folder"
  iColOPVar: int
  "Operation Scenario Parameter"
  iRecBin: int
  "Export/Import Data (DZ/DZS): Export References to Deleted Objects"
  drwToolBarShHd: int
  "Drawing Toolbox: Show group headers"
  iPrWrg: int
  "Displayed messages: Warnings"
  windowBackgroundColour: int
  "Background colours: Window"
  iMarkCol: int
  "Mark in graphic: Colour"
  iPrDateTime: int
  "Message Format"
  dmFaves: list
  "Favourites"
  iSchemeStatus: int
  "Scheme Status"
  iAutoZ: int
  "Mark in graphic: Zoom-in on marked elements"
  ibsatsol: int
  "Options: Enable Backspace at Start of Line"
  itabs_: int
  "Options: Tabs"
  procTimeOut: int
  "Max. waiting time for process response"
  tabPosition: int
  "Tabbed Document Interface: Tab position:top:bottom"
  oid_: int
  "ObjectID"
  iShowBackup: int
  "Confirmation dialogs: Show backup reminder dialog"
  modelPageBackgroundColour: int
  "Background colours: Model"
  limitStationDiagrams: int
  "Limit number of open site and substation diagrams"
  graphicDebug: int
  "DIgSILENT Internal: Graphic debug mode"
  gridColour: int
  "Grid representation: Grid colour"
  iTreeS: int
  "Stations"
  gnrl_modif: int
  "Object modified"
  pwPasswordEdit: str
  "Password"
  iPrOthers: int
  "Displayed messages: Others"
  prioColour: str
  "Colour Prio"
  iMigrateSc: int
  "Operation Scenario: Automatically migrate to current configuration during activation"
  iEditFilt: int
  "Edit Filter before Execute"
  iopt_updCheck: int
  "Check for application updates"
  iAutoSav: int
  "Browser: Save Data Automatically (tabular Input)"
  iInitialFreeze: int
  "General options: Open diagrams in freeze mode on study case activation"
  sIgnoredUpdates: list
  "Versions ignored in update check"
  iInvResults: int
  "Retention of results after network change"
  iColFlexVar: int
  "Flexible Data Parameter"
  off_idsWarn: int
  "Id contingent warning threshold"
  charact: list
  "Charact."
  pwUsername: str
  "Username"
  dataExtDesc: list
  "Description"
  iPrPcl: int
  "Displayed messages: Events"
  iActUseCore: int
  "Actual number of processes to be used"
  pProfile: object
  "Used Profile"
  tcalcupdsgl: float
  "Update graphic while simulation is running: update every"
  icalcupdsgl: int
  "Update graphic while simulation is running"
  iModGrf: int
  "General options: Show Edit Graphic Object in context menu"
  iTreeAll: int
  "All Folders"
  dataExtUnit: list
  "Unit"
  pwSelection: str
  "Last selection"
  pTbox: list
  "Toolbox"
  gridDotColour: int
  "Grid representation: Grid colour"
  iShowRecNot: int
  "Confirmation dialogs: Show 'Variation is recording' notification"
  graphicFlushFrameTime: int
  "DIgSILENT Internal: Include flush in frame time"
  exportModBy: int
  "Export/Import Data (DZ/DZS): Export 'Modified by'"
  drwToolBarShLbls: int
  "Drawing Toolbox: Show element labels"
  iTreeB: int
  "Model Definition"
  iSnapVi: int
  "General options: Snap Textboxes"
  ilinenumbers: int
  "Options: Show Line Numbers"
  iTreeC: int
  "Cubicle"
  pTboxgr: list
  "Toolbox Group"
  pfm_shell: int
  "Communicates with PFM Shell"
  iIntervalSc: int
  "Operation Scenario: Save Interval"
  showResetCalc: int
  "Confirmation dialogs: Show 'Reset Calculation' confirmation dialog"
  tool_advanVI: int
  "Advanced Toolbar"
  iUpdateChkLast: int
  "Check for application updates: Date of last check"
  iAscBin: int
  "Export/Import Data (DZ/DZS): Binary Data (e.g. Results):not included:included:file name only"
  iConfirmMsgDel: int
  "Show confirmation dialog before clearing messages"
  iShowExample: int
  "Show 'Example' dialog at startup"
  idecisep: int
  "Localisation: Decimal Symbol"
  iShowRemoveCont: int
  "Confirmation dialogs: Show 'Remove Contingencies' confirmation in Contingency Analysis"
  iColDistrVar: int
  "Parameter with Distributions"
  iautoind: int
  "Options: Enable Auto Indent"
  iMultBrowse: int
  "Data Manager: Use multiple Data Manager"
  iAllowHousek: int
  "Allow housekeeping task to operate when user is connected"
  isSendFullPrj: int
  "Transfer complete project to all processes"
  gridStyle: int
  "Grid representation: Style:no grid:grid lines:dots:crosses"
  petloc: int
  "Cursor"
  maxStationDiagrams: int
  "Limit number of open site and substation diagrams: Maximum page count"
  iAutoSaveSc: int
  "Operation Scenario: Save active Operation Scenario automatically"
  ptopn: str
  "last path used in open dialog box"
  gnrl_modby: str
  "Object modified by"
  iMultNmm: int
  "Data Manager: Use multiple Network Model Manager"
  iTreeL: int
  "Lines"
  pid_: int
  "ProjectID"
  iCoordmm: int
  "Coordinate Output at Statusbar in mm"
  parallelSet: object
  "Parallel computation settings"
  iProfile: int
  "System Stage Profile:All:Revisions Only:No System Stages"
  markOpacity: float
  "Mark in graphic: Opacity"
  maxZoomSchematic: int
  "Mark in graphic Zoom-in on marked elements: Maximum zoom in schematic diagrams"
  tid_: int
  "TimeID"
  iCustomDate: int
  "Localisation: Use Custom Format for Date and Time:"
  prioDistrVar: int
  "Priority:1:2:3"
  iAutoSort: int
  "Data Manager: Sort Automatically"
  iAutocomp: int
  "Options: Enable Autocomplete"
  rZoomAccl: float
  "Acceleration of Zooming and Panning: Acceleration Factor"
  root_id: object
  "Original Location"
  iPrInf: int
  "Displayed messages: Information"
  inumtabs: int
  "Options: Tab size"
  lineWidthScaleExport: float
  "Line width scaling factor for export/printing"
  pwService: str
  "Service Endpoint"
  loc_name: str
  "Name"
  p_glfold: object
  "Custom Library: Used Library"
  off_ids: int
  "Id contingent size"
  iPrLngName: int
  "Message Format: Full object names"
  editorColors: list
  "Editor colour settings"
  fold_id: object
  "In Folder"
  iShowHid: int
  "Hidden Folders"
  iviewwhites: int
  "Options: View Blanks and Tabs"
  prioOPVar: int
  "Priority:1:2:3"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetNumProcesses(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class SetVipage(Protocol):
  pObjx: object
  "Element"
  use_x: int
  "Use local x-Axis"
  Objectx: list
  "Element"
  drel: float
  "Scale: Start Value"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  order: float
  "Order"
  style: str
  "Plot style: Used"
  sBackFilNam: str
  "Background: Filename"
  iopt_add: str
  "Arrangement"
  descx: list
  "User defined Legend"
  UsedDia: object
  "Used by Dialog"
  for_name: str
  "Foreign Key"
  selectedInTabGroup: int
  "Is selected window in tab group"
  iopt_trans: int
  "Background: Graphics are transparent"
  iopt_tim1: int
  "x-Axis variable"
  cpHeadFold: object
  "Head Folder"
  max: float
  "Scale Limits: Maximum"
  chart: int
  "Scale: Chart"
  tabGroupIndex: int
  "Tab group"
  pRes: object
  "Results"
  fit: int
  "Scale: Adapt Scale"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  iopt_move: int
  "Plots can be moved"
  iopt_rsz: int
  "Plots can be resized"
  gnrl_modif: int
  "Object modified"
  Variablex: list
  "Variable"
  min: float
  "Scale Limits: Minimum"
  xgrid: int
  "Grid Lines"
  xgrid_item: str
  "Reference"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  iopt_tim: int
  "x Axis Variable"
  dataExtUnit: list
  "Unit"
  last: float
  "Scale: Range"
  Vis: list
  "Plots"
  visible: int
  "Visible"
  xgrid_count: int
  "Grid Lines: Count"
  trg: float
  "Scale Adapt Scale: Trigger"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  isDownMigrated: int
  "Has been down migrated"
  tid_: int
  "TimeID"
  auto_xscl: int
  "Scale: Auto Scale"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  map: int
  "Scale: Scale"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def MigratePage(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def SetXVar(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetScaleX(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def InsertPlot(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def Show(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetOrInsertPlot(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def GetVI(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def SetResults(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SetTile(*args):
    ...

  def SetStyle(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def SetAdaptX(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def DoAutoScaleY(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def CreateVI(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DoAutoScaleX(*args):
    ...

  def SetAutoScaleX(*args):
    ...

  def Close(*args):
    ...

  def GetImpedance(*args):
    ...



class BlkDef(Protocol):
  sUpLimInp: list
  "Limiting parameters/input signals Upper limitation: Input signals"
  typemetadata_key: list
  "Type Key"
  cInput: list
  "Variables: Input signals"
  sInput: list
  "Variables: Input signals"
  cCheckSum: list
  "DSL info: Checksum:"
  cOutput: list
  "Variables: Output signals"
  configScript: object
  "Initialisation: Configuration Script"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  displayCopyright: list
  "Copyright"
  isCompiled: int
  "Compiled model"
  isLinear: int
  "Classification: Linear"
  i_partinc: int
  "Initialisation: Partial initialisation in case of deadlock"
  sAddParam: list
  "Additional parameters"
  displayModule: list
  "Compilation options: Module"
  sAddEquat: list
  "Additional equations"
  maxerror: float
  "Iterative solver options: Max. error"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  disName: str
  "Model type: Display name"
  sCopyright: list
  "Compilation options: Copyright"
  isMacro: int
  "Model type: Macro"
  elm_name: list
  "Model Name"
  cpHeadFold: object
  "Head Folder"
  fMatlab: str
  "Model type: M-file"
  cUsage: int
  "Usage"
  intVersion: str
  "Version"
  algloop: int
  "Initialisation: Allow iterative solver at initialisation"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  i_autoinc: int
  "Initialisation: Automatic calculation of initial conditions"
  oid_: int
  "ObjectID"
  interpo: int
  "Interpolation of internal variables"
  maxiteration: int
  "Iterative solver options: Max. number of iterations"
  autoCompCheckSum: list
  "Automatic compilation checksum"
  gnrl_modif: int
  "Object modified"
  sLowLimPar: list
  "Limiting parameters/input signals Lower limitation: Parameters"
  display3rdParty: list
  "Third Party Licence (will only be applied after encryption): Third Party Module"
  sStates: list
  "Variables: State variables"
  charact: list
  "Charact."
  sParams: list
  "Variables: Parameters"
  dataExtDesc: list
  "Description"
  cIntern: list
  "Variables: Internal variables"
  dataExtUnit: list
  "Unit"
  level: int
  "Classification: DSL level:&0&0:&1&1:&2&2:&3&3:&4&4:&5&5:&6&6:&7&7"
  sLowLimInp: list
  "Limiting parameters/input signals Lower limitation: Input signals"
  sVersion: list
  "Compilation options: Version"
  typemetadata_version: list
  "Version"
  sAuthor: list
  "Compilation options: Author"
  isMatlab: int
  "MATLAB"
  iopt_modtyp: int
  "Model type"
  typemetadata_changeLog: list
  "Change Log"
  sCompany: list
  "Compilation options: Company"
  cdlllevel: int
  "Classification: DLL level:"
  sTitle: str
  "Title"
  sPSSEParam: list
  "Parameter mapping"
  usage: int
  "Usage"
  sInterf: list
  "Extended additional equations"
  gnrl_modby: str
  "Object modified by"
  cStates: list
  "Variables: State variables"
  pid_: int
  "ProjectID"
  fDllName: str
  "Model type: DLL-file"
  cParams: list
  "Variables: Parameters"
  iecTa: float
  "IEC61400-27 Interface: Sample time"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  sOutput: list
  "Variables: Output signals"
  loc_name: str
  "Name"
  sAddInter: list
  "Additional internal variables"
  sUpLimPar: list
  "Limiting parameters/input signals Upper limitation: Parameters"
  sIntern: list
  "Variables: Internal variables"
  cdisName: list
  "Display name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetCheckSum(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetThirdPartyModule(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def Check(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Compile(*args):
    ...

  def Delete(*args):
    ...

  def Pack(*args):
    ...

  def PackAsMacro(*args):
    ...

  def CalculateCheckSum(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def Encrypt(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...

  def ResetThirdPartyModule(*args):
    ...



class BlkSig(Protocol):
  emt_rst: int
  "EMT Simulation unbalanced"
  pnodfrom: object
  "Connected with Output: of"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  inodto: int
  "Connected with Input: Variable"
  shc_sym: int
  "VDE/IEC Short-Circuit balanced"
  pnodto: object
  "Connected with Input: of"
  for_name: str
  "Foreign Key"
  rms_sym: int
  "RMS Simulation balanced"
  shcf_sym: int
  "Complete Short-Circuit balanced"
  cpHeadFold: object
  "Head Folder"
  shcf_rst: int
  "Complete Short-Circuit unbalanced"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  shc_rst: int
  "VDE/IEC Short-Circuit unbalanced"
  indep: int
  "Independent of Module"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  rms_rst: int
  "RMS Simulation unbalanced"
  dataExtUnit: list
  "Unit"
  inodfrom: int
  "Connected with Output: Variable"
  iconto: int
  "Connected with Input: Connection Type:unknown:Input:Output:Lower Limit:Upper Limit"
  ldf_sym: int
  "Load flow balanced"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  value: float
  "Current Value"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  ldf_rst: int
  "Load flow unbalanced"
  iconfrom: int
  "Connected with Output: Connection Type:unknown:Input:Output:Lower Limit:Upper Limit"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetToSigName(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetFromSigName(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ChaVecfile(Protocol):
  iopt_csep: int
  "File Settings: Separator for columns"
  datacol: int
  "Values from File: Data Column"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  curval_t: list
  "Current Value"
  curval: float
  "Current Value"
  iopt_file: int
  "File Settings: Format:Comma Separated Values (*.csv):PowerFactory Measurement File:User Defined Text File"
  degree: int
  "Polynomial Degree"
  clines: int
  "No. of readings"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  separator: str
  "Separator for columns"
  oid_: int
  "ObjectID"
  approx: int
  "Approximation:constant:linear:polynomial:spline:hermite"
  gnrl_modif: int
  "Object modified"
  scale: object
  "Scale"
  timecol: int
  "Values from File: Time Column"
  icol: int
  "Data Column"
  charact: list
  "Charact."
  status: int
  "Error Status"
  decseprtr: str
  "Decimal separator"
  afac: float
  "Values from File: Factor a"
  cexponent: str
  " U"
  col_Sep: str
  "File Settings: Separator for columns"
  usage: int
  "Usage:relative in %:relative:absolute"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  useExponent: int
  "Unit"
  bfac: float
  "Values from File: Factor b"
  dec_Sep: str
  "File Settings: Decimal separator"
  loc_name: str
  "Parameter"
  f_name: str
  "File Settings: Filename"
  exponent: str
  "Exponent"
  iopt_sep: int
  "File Settings: Use system separators"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def Update(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class CimModel(Protocol):
  resID: str
  "Resource ID"
  cimClass: str
  "Class information: Type"
  contents: list
  "Contents"
  cpHeadFold: object
  "Head Folder"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  classNS: str
  "Class information: Namespace"
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  diff: int
  "Class information: Difference model"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def RemoveParameter(*args):
    ...

  def SetAttributeValue(*args):
    ...

  def HasParameter(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def SetAssociationValue(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetParameterValue(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def GetParameterNamespace(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def GetParameterCount(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetAttributeEnumerationType(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetModelsReferencingThis(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def DeleteParameterAtIndex(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetAttributeEnumeration(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class CimObject(Protocol):
  resID: str
  "Resource ID"
  cimClass: str
  "Class information: Type"
  cpHeadFold: object
  "Head Folder"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  classNS: str
  "Class information: Namespace"
  dataExtDesc: list
  "Description"
  about: int
  "Class information: Description"
  dataExtUnit: list
  "Unit"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def RemoveParameter(*args):
    ...

  def GetObjectsWithSameId(*args):
    ...

  def SetAttributeValue(*args):
    ...

  def HasParameter(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def SetAssociationValue(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetParameterValue(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def GetParameterNamespace(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def GetParameterCount(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetAttributeEnumerationType(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def DeleteParameterAtIndex(*args):
    ...

  def GetObjectsReferencingThis(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetPfObjects(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def SetAttributeEnumeration(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class GrpPage(Protocol):
  numLayoutColumns: int
  "Num columns"
  plotStyle: object
  "Style"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  pConts: list
  "Contents ..."
  order: float
  "Sequence"
  viewportWidth: int
  "Viewport width (pixel)"
  zoomAreaRight: float
  "Right Top: X"
  for_name: str
  "Foreign Key"
  selectedInTabGroup: int
  "Is selected window in tab group"
  cpHeadFold: object
  "Head Folder"
  zoomAreaBottom: float
  "Y"
  tabGroupIndex: int
  "Tab group"
  iSchemeStatus: int
  "Scheme Status"
  viewportHeight: int
  "Viewport height (pixel)"
  zoomAreaLeft: float
  "Zoom Area Left Bottom: X"
  autoLayoutMode: int
  "Page auto layout:off:vertical:grid"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  resultFile: object
  "Results"
  colourPalette: object
  "Colour palette"
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  visible: int
  "Visible"
  backgroundImage: str
  "Background Image"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  curveAreaAlignment: int
  "Curve area alignment:off:shared axes only:all plots on page"
  legacyStyleName: str
  "Style (legacy)"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  zoomAreaTop: float
  "Right Top: Y"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def SetScaleY(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetOrInsertXYPlot(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetScaleX(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetOrInsertDiscreteBarPlot(*args):
    ...

  def SetAutoScaleModeY(*args):
    ...

  def RemovePage(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def SetScaleTypeY(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def Show(*args):
    ...

  def IsDeleted(*args):
    ...

  def SetLayoutMode(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ChangeStyle(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetOrInsertModalAnalysisPlot(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def SetResults(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def SetScaleTypeX(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def DoAutoScaleY(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetOrInsertCurvePlot(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def SetAutoScaleModeX(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetOrInsertVectorPlot(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetPlot(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DoAutoScaleX(*args):
    ...

  def DoAutoScale(*args):
    ...

  def GetImpedance(*args):
    ...



class IntAddonvars(Protocol):
  size: list
  "Initial size/rows"
  percon: list
  "Per Connection"
  name: list
  "Name"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  size2: list
  "Initial column count"
  datatype: list
  "Type"
  classname: str
  "Classname"
  iSchemeStatus: int
  "Scheme Status"
  description: list
  "Description"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  resultingName: str
  "Resulting Name"
  unit: list
  "Unit"
  longDesc: list
  "Long Description"
  allowedValues: list
  "Allowed values"
  shortDesc: str
  "Short Description"
  initial: list
  "Initial Value"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  advanced: list
  "More..."
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  maxValue: list
  "Maximum value"
  minValue: list
  "Minimum value"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def RemoveParameter(*args):
    ...

  def GetChildren(*args):
    ...

  def AddInteger(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetConstraint(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def AddIntegerVector(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def AddDoubleMatrix(*args):
    ...

  def AddString(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def AddDoubleVector(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def AddDouble(*args):
    ...

  def AddObject(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def AddObjectVector(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class IntCase(Protocol):
  iPostProcess: int
  "Topological processing: Calculate results for all breakers"
  iMaxNumIterIS: int
  "Max. number of iterations"
  iPreCondMeth: int
  "Preconditioning method"
  iLevOfFill: int
  "ILU: Level of fill"
  iStudyTime: int
  "Study Time"
  absThreshJac: float
  "Bifactorisation control: Absolute threshold"
  defThreshOpt: float
  "Bifactorisation control: Defer threshold"
  cActCalc: str
  "Current Calculation"
  chkThreshJac: float
  "Bifactorisation control: Check threshold"
  dat_src: str
  "Data source"
  useStableBlockFac: int
  "Bifactorisation control: Stable block factorisation"
  chr_name: str
  "Characteristic Name"
  iNumAnaLdf: int
  "Calculation of partial derivatives"
  relThreshSim: float
  "Bifactorisation control: Relative threshold"
  chkThreshOpt: float
  "Bifactorisation control: Check threshold"
  cpProject: object
  "Project"
  cvoltexp: str
  "Volt, V"
  numAnaOpfSeJac: int
  "Calculation of Jacobians"
  campexp: str
  "Ampere, A"
  toolboxgroups: list
  "Toolbox Group"
  numDiffMethSim: int
  "Calculation of state variable Jacobians"
  relThreshOpt: float
  "Bifactorisation control: Relative threshold"
  iUseBlockOpt: int
  "Representation"
  iLinSolve: int
  "Solution of linear equations"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  iErrTolAuto: int
  "Automatic error tolerance adaption"
  owner: str
  "Owner"
  cpScenario: object
  "Active Scenario"
  dErrTolAutoInit: float
  "Automatic error tolerance adaption: Initial error tolerance for linear equations"
  cpHeadFold: object
  "Head Folder"
  iUseBlockJac: int
  "Representation"
  cvexpshc: str
  "Volt, V"
  cRecStName: str
  "Name of Recording Expansion Stage"
  cPrjName: str
  "Name of Project"
  absThreshSim: float
  "Bifactorisation control: Absolute threshold"
  toolboxes: list
  "Toolbox"
  toolbars: list
  "Toolbar"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  iDropThresh: int
  "ILU: Drop element if smaller 10^X"
  dErrTol: float
  "Error tolerance for linear equations"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  cpowexp: str
  "W,VA,var"
  absThreshOpt: float
  "Bifactorisation control: Absolute threshold"
  iNumAnaOpfSe: int
  "Calculation of Hessian"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  useStableBlockFacSim: int
  "Bifactorisation control: Stable block factorisation"
  relThreshJac: float
  "Bifactorisation control: Relative threshold"
  cScenName: str
  "Name of Active Scenario"
  numDeltaHesse: float
  "Calculation of Hessian: Numerical step size"
  dataExtUnit: list
  "Unit"
  DPL_sel: object
  "DPL selection"
  useStableBlockFacOpt: int
  "Bifactorisation control: Stable block factorisation"
  pRecSstage: object
  "Recording Expansion Stage"
  defThreshJac: float
  "Bifactorisation control: Defer threshold"
  defThreshSim: float
  "Bifactorisation control: Defer threshold"
  iRedBrkMode: int
  "Topological processing: Breaker reduction:Any suitable:Any suitable, except circuit-breakers:None:Enhanced mode"
  deltaDiffMethSim: float
  "Calculation of state variable Jacobians: Numerical step size"
  cpexpshc: str
  "W,VA,var"
  iPreCondAlg: int
  "Calculation of factorisation"
  iStudyDate: int
  "Study Date"
  iRunParalIS: int
  "Parallelised calculation"
  idefault: int
  "Use as default"
  iEquiSystem: int
  "Equilibrate all matrices"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iUseBlockSim: int
  "Representation"
  root_id: object
  "Original Location"
  caexpshc: str
  "Ampere, A"
  loc_name: str
  "Name"
  chkThreshSim: float
  "Bifactorisation control: Check threshold"
  fold_id: object
  "In Folder"
  isIterSolver4DcLdf: int
  "Apply iterative solution method in DC Load Flow based calculations"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetStudyTime(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Consolidate(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def Activate(*args):
    ...

  def Deactivate(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def ApplyStudyTime(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def ApplyNetworkState(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class IntComtrade(Protocol):
  timeZone: str
  "Time Zone"
  Samples: int
  "Number of samples"
  recDate: str
  "Date of first sample"
  trgYear: int
  "Year"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  triggerThreshold: float
  "Triggers: Threshold"
  trgMonth: int
  "Month"
  AnCh: int
  "Number of analogue channels"
  for_name: str
  "Foreign Key"
  contents: list
  "User defined Results"
  cpHeadFold: object
  "Head Folder"
  iSchemeStatus: int
  "Scheme Status"
  triggerUnit: str
  "Triggers: Unit"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  triggerId: str
  "Triggers: ID"
  Binary: int
  "Binary Data"
  triggerType: str
  "Triggers: Type"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  trgDay: int
  "Day"
  recYear: int
  "Year"
  triggerMeasure: str
  "Triggers: Measurement Name"
  dataExtUnit: list
  "Unit"
  triggerSignal: str
  "Triggers: Signal Name"
  trgDate: str
  "Trigger Date"
  triggerCount: int
  "Triggers: Events"
  recMonth: int
  "Month"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  triggerIndex: int
  "Triggers: Displayed event"
  triggerTime: str
  "Triggers: Time"
  root_id: object
  "Original Location"
  recDay: int
  "Day"
  loc_name: str
  "Name"
  DigCh: int
  "Number of digital channels"
  f_name: str
  "File"
  orgname: list
  "Filename"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def FindColumn(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetVariable(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetAnalogueDescriptions(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Load(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SortAccordingToColumn(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def GetValue(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def FindMaxInColumn(*args):
    ...

  def IsEarthed(*args):
    ...

  def GetNumberOfRows(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def ConvertToBinaryFormat(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def Release(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ConvertToASCIIFormat(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def GetColumnValues(*args):
    ...

  def GetObjectValue(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def FindMinInColumn(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetUnit(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetDescription(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetNumberOfAnalogueSignalDescriptions(*args):
    ...

  def AttributeType(*args):
    ...

  def GetNumberOfColumns(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSignalHeader(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetDigitalDescriptions(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetNumberOfDigitalSignalDescriptions(*args):
    ...



class IntComtradeset(Protocol):
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataObjs: list
  "COMTRADE File Info"
  stepsize: float
  "Info: Average Step Size"
  for_name: str
  "Foreign Key"
  contents: list
  "User defined Results"
  cpHeadFold: object
  "Head Folder"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  endDate: int
  "Info: Date and time of last sample"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  startDate: int
  "Info: Date and time of first sample"
  fold_id: object
  "In Folder"
  samples: int
  "Info: Number of samples"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def FindColumn(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetVariable(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetAnalogueDescriptions(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Load(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SortAccordingToColumn(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def GetValue(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def FindMaxInColumn(*args):
    ...

  def IsEarthed(*args):
    ...

  def GetNumberOfRows(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def Release(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def GetColumnValues(*args):
    ...

  def GetObjectValue(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def FindMinInColumn(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetUnit(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetDescription(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetNumberOfAnalogueSignalDescriptions(*args):
    ...

  def AttributeType(*args):
    ...

  def GetNumberOfColumns(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSignalHeader(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetDigitalDescriptions(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetNumberOfDigitalSignalDescriptions(*args):
    ...



class IntDataset(Protocol):
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  ival: int
  "Value"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  i_use: int
  "Use"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  pObj: object
  "Object"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def All(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def AddRef(*args):
    ...

  def Clear(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetAll(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntDocument(Protocol):
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  appr_modby: str
  "Approval Information: Modified by"
  sSize: list
  "Size of embedded file"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  pObj: object
  "Related to"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  appr_status: int
  "Approval Information: Status"
  f_name: str
  "Filename"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def Export(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def Import(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def Reset(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def View(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntDplmap(Protocol):
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  iSize: int
  "Size"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def Remove(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def Update(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def First(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def Clear(*args):
    ...

  def Contains(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def Insert(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetValue(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def Next(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def Size(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntDplvec(Protocol):
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  iSize: int
  "Size"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def Remove(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def IndexOf(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def Isolate(*args):
    ...

  def SwitchOff(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def Get(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def Sort(*args):
    ...

  def Clear(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def Insert(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def Size(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntEvt(Protocol):
  calTp: int
  "Calculation type"
  mod_sim: int
  "Calculation types: Simulation"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  mod_cnt: int
  "Calculation types: Contingency Analysis"
  mod_shc: int
  "Calculation types: Short-Circuit"
  iOrder: int
  "Contingency Order: order"
  for_name: str
  "Foreign Key"
  contents: list
  "Events"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  iContOrder: int
  "Contingency Order"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  shcEvts: int
  "Always create switch events to clear the faults"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def CreateCBEvents(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def RemoveSwitchEvents(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntExtaccess(Protocol):
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  sPermissions: list
  "Allowed address patterns"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  cCheckUrl: str
  "Test-URL"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def CheckUrl(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntGate(Protocol):
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  oneGate: int
  "Trigger: Logical gate to combine triggers:And:Or"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  negate: list
  "Trigger: Negate"
  oneOrUser: int
  "Gate definition"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  conditions: list
  "Trigger: Trigger"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  expression: list
  "Expression"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def AddTrigger(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntGrf(Protocol):
  iVis: int
  "Visible"
  sAttr: list
  "Attributes"
  charact: list
  "Charact."
  dat_src: str
  "Data source"
  iCol: int
  "Colour"
  chr_name: str
  "Characteristic Name"
  iOrtho: int
  "Orthogonal Connection Lines"
  iLevel: int
  "Layer"
  for_name: str
  "Foreign Key"
  rSizeY: float
  "Y-Size"
  rCenterX: float
  "X-Position"
  iIndLS: int
  "Line Style"
  iCollapsed: int
  "Imploded View"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  sSymNam: str
  "Symbol Name"
  pDataObj: object
  "Net Data Object"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  rSizeX: float
  "X-Size"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  Internals: list
  "Contents ..."
  iRot: int
  "Rotation"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"
  rCenterY: float
  "Y-Position"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def MoveToLayer(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntGrfgroup(Protocol):
  charact: list
  "Charact."
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def Export(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def Import(*args):
    ...

  def SetAttribute(*args):
    ...

  def ClearData(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntGrflayer(Protocol):
  loadGenOpacity: int
  "General settings: Circle Opacity"
  layerColour: int
  "Colour"
  interSizeFactor: float
  "Arrows: Scaling factor"
  interColorQ: int
  "Arrows: Colour for Q"
  defineMaxGeographicScale: int
  "Maximum geographic scale"
  actionTargetObjectType: int
  "Target parent element type"
  showResultLegend: int
  "Show result legend"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  backgroundImageFile: str
  "Background image: File"
  defineMinGeographicScale: int
  "Minimum geographic scale"
  bayLineWidth: float
  "Show bays: Line width"
  imageTopRightY: float
  "Right top: Y"
  cSystemLayer: int
  "System layer"
  siteLineStyle: int
  "Show sites: Line style"
  imageBrightness: int
  "Adjust bitmaps: Brightness (-100..100)"
  keepImageRatio: int
  "Background image: Keep aspect ratio"
  mapLayer: int
  "Map configuration: Map layer"
  defineMinZoom: int
  "Zoom-dependent visibility: Minimum zoom level"
  imageSaturation: int
  "Adjust bitmaps: Saturation (-100..100)"
  layerId: int
  "Layer ID"
  pIntGrfnet: object
  "Default diagram fonts: Text box settings"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  imageBottomLeftY: float
  "Background image Left bottom: Y"
  loadGenPrioScalsR: list
  "Scaling factor"
  cpHeadFold: object
  "Head Folder"
  maxGeographicScale: int
  "Zoom-dependent visibility: Maximum geographic scale (value)"
  allowInteraction: int
  "Elements: Elements are selectable"
  minGeographicScale: int
  "Zoom-dependent visibility: Minimum geographic scale (value)"
  cImageLayer: int
  "Background image"
  loadGenPrioColsR: list
  "Colour"
  loadGenForTrafStats: int
  "General settings: Show circles for secondary substations"
  showColorLegend: int
  "Show colour legend"
  iSchemeStatus: int
  "Scheme Status"
  loadGenLoadColor: int
  "Load circles: Circle colour"
  minZoomSchematic: int
  "Zoom-dependent visibility: Minimum zoom level (value)"
  oid_: int
  "ObjectID"
  drawPlotBackground: int
  "Draw plot background"
  loadGenLoadType: int
  "Load circles: Load type"
  processImages: int
  "Adjust bitmaps"
  gnrl_modif: int
  "Object modified"
  hostingCapColor: int
  "Hosting capacity: Circle colour"
  localMapCatalogFile: str
  "Map configuration: Catalogue file"
  imageBottomLeftX: float
  "Background image Left bottom: X"
  loadGenShowLoads: int
  "Load circles"
  siteOpacity: int
  "Show sites: Opacity"
  cGeoLayer: int
  "Geographic map"
  iVis: int
  "Visible"
  localMapScaleLimit: int
  "Map configuration: Minimum scale 1 :"
  imageOpacity: int
  "Adjust bitmaps: Opacity"
  interNodesLineStyle: int
  "Nodes: Line style"
  interNodesShow: int
  "Nodes"
  loadGenShowGens: int
  "Generation circles"
  isTargetLayer: int
  "Target layer"
  siteBrushStyle: int
  "Show sites: Brush Style"
  charact: list
  "Charact."
  bayColor: int
  "Show bays: Colour"
  bayOpacity: int
  "Show bays: Opacity"
  mapProviderUrl: object
  "Map configuration: Service URL"
  loadGenForSubstats: int
  "General settings: Show circles for substations and sites"
  iInvariant: int
  "Elements are zoom-invariant"
  defineMaxZoom: int
  "Zoom-dependent visibility: Maximum zoom level"
  loadGenPQS: int
  "Displayed variable"
  plotBackgroundOpacity: float
  "Draw plot background: Opacity"
  siteShow: int
  "Show sites"
  iSetImageRect: int
  "Background image: Set position and size"
  layerType: int
  "Layer type"
  localMapEpsgCode: int
  "EPSG:"
  siteLineWidth: float
  "Show sites: Line width"
  loadGenGenColor: int
  "Generation circles: Circle colour"
  siteColor: int
  "Show sites: Colour"
  cElementLayer: int
  "Net elements, annotations, text boxes"
  bayLineStyle: int
  "Show bays: Line style"
  rOrder: float
  "Drawing order"
  gnrl_modby: str
  "Object modified by"
  multiMapLayerConfStr: list
  "Multi map layer config string"
  pid_: int
  "ProjectID"
  actionTargetSymbolDesc: str
  "Target parent element type: Object"
  bayBrushStyle: int
  "Show bays: Brush Style"
  showHostingCap: int
  "Hosting capacity"
  tid_: int
  "TimeID"
  interColorP: int
  "Arrows: Colour for P"
  maxZoomSchematic: int
  "Zoom-dependent visibility: Maximum zoom level (value)"
  isNetworkTargetLayer: int
  "Elements: Target layer for graphic representation of network elements"
  root_id: object
  "Original Location"
  mapProvider: int
  "Map configuration: Provider"
  imageTopRightX: float
  "Right top: X"
  interBrushStyle: int
  "Nodes: Brush style"
  interArrowsShow: int
  "Arrows"
  plotBackgroundColor: int
  "Draw plot background: Colour"
  decimalsPQ: int
  "Arrows: Number of decimal places"
  loc_name: str
  "Name"
  interPQ: int
  "Arrows: Direction according to"
  loadGenCircleScale: float
  "General settings: Scaling factor for load and generation circles"
  systemLayer: int
  "System layer"
  hostCapCircleScale: float
  "Hosting capacity: Circle scaling factor"
  fold_id: object
  "In Folder"
  interNodesLineWidth: float
  "Nodes: Line width"
  bayShow: int
  "Show bays"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def ExportToVec(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def Export(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def Import(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def ImportFromVec(*args):
    ...

  def ChangeWidthVisibilityAndColour(*args):
    ...

  def Reset(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def ChangeFont(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def ChangeLayer(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def Mark(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def Align(*args):
    ...

  def ChangeRefPoints(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def ClearData(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AdaptWidth(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class IntGrfnet(Protocol):
  prjSettings: object
  "Project settings"
  rBGRTopY: float
  "Y"
  rTermSzFacSGL: float
  "terminals"
  sAttr: list
  "Options"
  iLEOZoomLim: int
  "Geographic scale thresholds for visibility of: switch state boxes at line ends (1/x)"
  rSiteSzFac: float
  "Size factor for: sites"
  tid_: int
  "TimeID"
  rScaleX: float
  "X"
  ortho_on: int
  "Drawing aids: Line routing"
  iCabDash: int
  "Line style for cables"
  cimRdfId: list
  "RDF ID"
  rScalFac: float
  "1 :"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  iShowLL: int
  "Show coordinates in latitude/longitude"
  appr_modby: str
  "Approval Information: Modified by"
  iSwitch: int
  "Switch state symbol at connection end"
  rNodWid: float
  "Node width factor"
  maxTooltipObjs: int
  "Show tooltip on network elements: Maximum number of shown elements"
  rBGLBotY: float
  "Y"
  sSiteSymbol: list
  "Symbol"
  iBeachB: int
  "Beach ball representation of composite nodes"
  rRTopX: float
  "X"
  rXFak: float
  "X transformation factor"
  rScaleY: float
  "Y"
  iShowIndLW: int
  "Allow individual line width"
  iShowLineTB: int
  "Show line from general text boxes to referenced objects"
  showSearchField: int
  "Show search field"
  symbolComponentMask: int
  "Visible symbol components (mask)"
  iTBZoomLim: int
  "text (1/x)"
  iFrmResBra: int
  "Results Branches: Show frame"
  defaultViewArea: object
  "Default view area"
  rBGLBotX: float
  "X"
  iLevel: int
  "Current graphic layers (legacy)"
  allowFontsIndivTBs: int
  "Allow individual fonts for text boxes"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  rGridX: float
  "Horizontal grid size"
  rBraDistFac: float
  "Distance factor for one-port devices"
  rLEOSzFacSGL: float
  "Size factor for: line end symbols"
  rZoomRTX: float
  "X-zoom right top"
  cDrawFormat: str
  "Format"
  rURTopY: float
  "User coordinate space Right top: Y"
  fontNodRes: int
  "Font-ID for node results"
  fontNodLabel: int
  "Font-ID for node labels"
  rTermSzFac: float
  "Size factor for: terminals"
  rYFak: float
  "Y transformation factor"
  sBackFile: list
  "Catalogue file"
  cpHeadFold: object
  "Head Folder"
  iFrmNamNod: int
  "Labels Nodes: Show frame"
  sBordSym: list
  "Border symbol"
  iTrNam: int
  "Labels: Background"
  pColVI: object
  "Diagram colouring: Used colouring scheme"
  PrjList: str
  "GPS projection"
  rLBotX: float
  "X"
  rSiteSzFacSGL: float
  "Size factor for: sites"
  iUTrSet: int
  "User coordinate space"
  iSchemeStatus: int
  "Scheme Status"
  iShowCoupTBs: int
  "Results: Always show result boxes of detailed couplers"
  iOHLDash: int
  "Line style for overhead lines"
  iFrmSwt: int
  "Display frame around switches"
  pColScheme: object
  "Diagram colouring: Colouring Scheme"
  oid_: int
  "ObjectID"
  frTrOut: int
  "Coordinate output transformation (A*x+b)"
  sDefSym: list
  "Default substation symbol"
  Internals: list
  "Contents ..."
  iTooltip: int
  "Show tooltip on network elements"
  appr_status: int
  "Approval Information: Status"
  rTxtSzFac: float
  "Size factor for: text"
  gnrl_modif: int
  "Object modified"
  rLEOSzFac: float
  "Size factor for: line end symbols"
  rZoomLBX: float
  "X-zoom left bottom"
  iPrefBraC: int
  "Prefer branch coordinates"
  rBraSzFacSGL: float
  "Size factor for: edge elements"
  sSubstTyp: list
  "Substation Type"
  rWSpace: float
  "Margin at full zoom"
  iScalFac: int
  "Use scaling factor for computation of distances"
  pDataFolder: object
  "Target folder for network elements"
  rURTopX: float
  "User coordinate space Right top: X"
  rBraSzFac: float
  "Size factor for: edge elements"
  iTrans: int
  "Results: Background"
  iShowNavi: int
  "Allow navigation pane to be shown"
  rSubSzFac: float
  "Size factor for: substations"
  charact: list
  "Charact."
  iSetBGr: int
  "Set size of background image"
  rTransX: float
  "X"
  sDefSiteSym: list
  "Default site symbol"
  iLayZoomLim: int
  "annotation elements (deprecated: please use layer settings instead)"
  iKRatio: int
  "Keep ratio"
  rULBotX: float
  "User coordinate space Left bottom: X"
  iCrSwts: int
  "Create switches when connecting to busbar"
  iSimplf: int
  "Simplified representation of bus couplers and tie breakers"
  iPhasTec: int
  "Default phase technologies for terminals"
  rRTopYc: float
  "World coordinate space Right top: Y"
  iSmallRes: int
  "Results: Space saving representation on connection lines"
  cColFrame: int
  "Diagram colouring"
  iFrzPerm: int
  "Write protected"
  rOffSemOrt: float
  "Drawing aids: Semi-orthogonal offset"
  rSubSzFacSGL: float
  "Size factor for: substations (beach ball representation)"
  rULBotY: float
  "User coordinate space Left bottom: Y"
  rGridFak: float
  "Grid-factor"
  iFrmNamBra: int
  "Labels Branches: Show frame"
  rGridY: float
  "Vertical grid size"
  rVoltLev: float
  "Voltage level default"
  iShowScl: int
  "Show scale"
  iBraZoomLim: int
  "Geographic scale thresholds for visibility of: edge elements, except lines (1/x)"
  iGPS: int
  "Geographical data from network elements (zoom independent diagram)"
  iMeasureLength: int
  "Re-adjust length of line when making graphical changes"
  rDefOffBr: float
  "Offset factor when drawing one-port devices"
  iFrmResNod: int
  "Results Nodes: Show frame"
  rZoomLBY: float
  "Y-zoom left bottom"
  sSiteTyp: list
  "Site Type"
  rRTopY: float
  "Y"
  cDrawOrient: int
  "Drawing orientation"
  rLBotYc: float
  "World coordinate space Left bottom: Y"
  iSclBackLim: int
  "Minimum scale 1 :"
  rRTopXc: float
  "World coordinate space Right top: X"
  rGPSLineWd: float
  "Line width"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  fontBraRes: int
  "Font-ID for branch results"
  rZoomRTY: float
  "Y-zoom right top"
  iNoSwitch: int
  "Not visible if results are shown"
  rLBotY: float
  "Y"
  iType: int
  "Diagram Type"
  iStump: int
  "Branch off type"
  iMBBSwt: int
  "Show connected busbars as small dots in simplified substation representation"
  rLBotXc: float
  "World coordinate space Left bottom: X"
  rTransY: float
  "Y"
  usePrjFonts: int
  "Use fonts from project settings"
  root_id: object
  "Original Location"
  sSymbol: list
  "Symbol"
  sSiteBordSym: list
  "Border symbol"
  loc_name: str
  "Name"
  sSymFile: str
  "Symbol file"
  fontBraLabel: int
  "Font-ID  for branch labels"
  iShowIndLS: int
  "Allow individual line style"
  fontTitle: int
  "Font-ID for title and legends"
  iShowBC: int
  "Show bus couplers"
  iArrow: int
  "Direction arrow mode"
  rMBBConWid: float
  "Size factor for: connection circles on simplified substations"
  rLlodSzFac: float
  "Size factor for: line loads, compensations and section transitions"
  fold_id: object
  "In Folder"
  rBGRTopX: float
  "X"
  snap_on: int
  "Drawing aids: Snap elements to grid"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def Show(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetFontFor(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def SetSymbolComponentVisibility(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetLayerVisibility(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def Close(*args):
    ...

  def GetImpedance(*args):
    ...



class IntIcon(Protocol):
  transpColorBlue: int
  "Define colour as transparent: blue"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  transpColorRed: int
  "Define colour as transparent: red"
  for_name: str
  "Foreign Key"
  transpColorGreen: int
  "Define colour as transparent: green"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  transpColor: int
  "Define colour as transparent"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def Export(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def Import(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntMat(Protocol):
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  iec_tab: str
  "Table"
  gnrl_modif: int
  "Object modified"
  RowLabels: list
  "Row labels"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  M: list
  "Matrix"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  ColLabels: list
  "Col labels"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Resize(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetColumnLabel(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def Invert(*args):
    ...

  def GetColumnLabelIndex(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SizeX(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetColumnLabel(*args):
    ...

  def Init(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def NCol(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def Save(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def NRow(*args):
    ...

  def IsEarthed(*args):
    ...

  def GetNumberOfRows(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetRowLabel(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def ColLbl(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def RowLbl(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def Set(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def Get(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetNumberOfColumns(*args):
    ...

  def SizeY(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def Multiply(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def SortToColum(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetRowLabelIndex(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def SetRowLabel(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def SortToColumn(*args):
    ...

  def GetImpedance(*args):
    ...



class IntMon(Protocol):
  objname: list
  "Element"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  iopt_out: int
  "Display Values during Simulation in Output Window (see Simulation Command)"
  vars: list
  "Complete List of Selected Variables"
  for_name: str
  "Foreign Key"
  obj_id: object
  "Object"
  cpHeadFold: object
  "Head Folder"
  iopt_rec: int
  "Consider Recording Limits"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  cUnit: list
  "Unit"
  gnrl_modif: int
  "Object modified"
  cvariables: list
  "Variable"
  iopt_loc: int
  "internal: Add Keywords to Bus List"
  filtvar: str
  "Variable Name"
  cPhase: list
  "Phase"
  charact: list
  "Charact."
  classnm: str
  "Class Name"
  cforms: list
  "Format"
  cIdent: list
  "Identifier"
  iopt_all: int
  "Display All"
  iopt_var: int
  "Variable filter: Variable Set"
  setFilt: object
  "Element filter"
  filtbus: str
  "Variable filter: Bus and Phase"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  cDevice: list
  "Component"
  tid_: int
  "TimeID"
  csample: list
  "Sample"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  cheader: list
  "Customised Header"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def AddVar(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def RemoveVar(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def PrintVal(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def NVars(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def GetVar(*args):
    ...

  def ClearVars(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AddVars(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def PrintAllVal(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class IntOutage(Protocol):
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  cObjGenDerat: object
  "Derated Generator"
  Skstrans: float
  "Transient Short-Circuit Level Transfer"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  cObjLoadTransf: object
  "Source of Load Demand Transfer"
  contents: list
  "Contents"
  pObj: object
  "Outaged Element"
  cpHeadFold: object
  "Head Folder"
  Qtrans: float
  "Reactive Power Transfer"
  ftrans: float
  "Power Transfer"
  outserv: int
  "Ignored"
  pmaxratf: float
  "MW reductions"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  pTrans: object
  "Destination of Load Demand Transfer"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  starttime: int
  "Start Time"
  gnrl_modif: int
  "Object modified"
  endtime: int
  "End Time"
  cObjOutage: object
  "Outaged Element"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  Sksstrans: float
  "Subtransient Short-Circuit Level Transfer"
  dataExtUnit: list
  "Unit"
  stateconsistent: int
  "Correctly reflected"
  transinputtype: int
  "Value Type:relative:absolute"
  Ptrans: float
  "Active Power Transfer"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  iType: int
  "Outage Type"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def IsInStudytime(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def CheckAll(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsInStudyTime(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def Check(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def ResetAll(*args):
    ...

  def Delete(*args):
    ...

  def Apply(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def ApplyAll(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class IntPlannedout(Protocol):
  endtime: int
  "End Time"
  recurrence: int
  "Recurrent"
  components: list
  "Components"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  recsettings: list
  "Settings"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  appr_modby: str
  "Approval Information: Modified by"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  contents: list
  "Events"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  priority: int
  "Priority"
  outserv: int
  "Ignored"
  tid_: int
  "TimeID"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  appr_status: int
  "Approval Information: Status"
  starttime: int
  "Start Time"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetRecurrence(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntPlot(Protocol):
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  auto_yscl: int
  "y-Axis: Auto Scale"
  for_name: str
  "Foreign Key"
  mxpos: int
  "Ticks x-Axis: Main"
  cpHeadFold: object
  "Head Folder"
  y_min: float
  "y-Axis Limits: Minimum"
  cy_map: int
  "y-Axis: Scaling"
  typos: int
  "Ticks y-Axis: Small"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  sh_off: int
  "y-Axis Adapt Scale: Show Deviation from Offset"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  XGridMain: int
  "Grid x-Axis: Main"
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  txpos: int
  "Ticks x-Axis: Small"
  y_max: float
  "y-Axis Limits: Maximum"
  y_off: float
  "y-Axis Adapt Scale: Offset"
  y_fit: int
  "y-Axis: Adapt Scale"
  YGridHlp: int
  "Grid y-Axis: Help"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  XGridHlp: int
  "Grid x-Axis: Help"
  tid_: int
  "TimeID"
  y_map: int
  "y-Axis: Scale"
  root_id: object
  "Original Location"
  YGridMain: int
  "Grid y-Axis: Main"
  mypos: int
  "Ticks y-Axis: Main"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def SetScaleY(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def SetAutoScaleY(*args):
    ...

  def SetAdaptY(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class IntPrjfolder(Protocol):
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  recnetdatonly: int
  "Record Network Data folder only"
  share: int
  "Sharing"
  iopt_icon: str
  "Icon"
  iopt_typ: str
  "Folder Type"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  dat_date: int
  "Data Date"
  loc_name: str
  "Name"
  filter: str
  "Class Filter"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def IsProjectFolderType(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetProjectFolderType(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntQlim(Protocol):
  cap_Qmx: list
  "Max. React. Pow."
  MatrixQmax: list
  "Matrix for Qmax"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  cap_Ppu: list
  "Active Power"
  voltagedep: int
  "Consider voltage dependent limits"
  MatrixQmin: list
  "Matrix for Qmin"
  inputmod: int
  "Input Model"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  cap_Qmn: list
  "Min. React. Pow."
  psetpoinpu: list
  "P-setpoints"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  cap_P: list
  "Active Power"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  MatQmaxpu: list
  "Matrix for Qmax"
  gnrl_modif: int
  "Object modified"
  volevelpu: list
  "Voltage Level"
  cap_Qmxpu: list
  "Max. React. Pow."
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  MatQminpu: list
  "Matrix for Qmin"
  dataExtUnit: list
  "Unit"
  psetpoin: list
  "P-setpoints"
  volevel: list
  "Voltage Level"
  cap_Qmnpu: list
  "Min. React. Pow."
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetQlim(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class IntRas(Protocol):
  availability: list
  "Availability"
  events: list
  "Remedial actions executed if trigger is true: Remedial actions"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  triggers: list
  "Trigger: Trigger"
  cpHeadFold: object
  "Head Folder"
  eventList: int
  "Remedial actions executed if trigger is true Create remedial actions: :Switch Event:Dispatch Event:Tap Event:Power Transfer Event:Load Event"
  outserv: int
  "Out of service"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  iRepeat: int
  "RAS can be triggered more than once per Contingency"
  oneGate: int
  "Trigger: Logical Gate to combine triggers:And:Or"
  dataExtUnit: list
  "Unit"
  sequenceNr: int
  "RAS Sequence-Nr"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  hasAvailability: int
  "Active only at a certain time"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def AddEvent(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def AddTrigger(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def IsValid(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class IntRunarrange(Protocol):
  iEndTime: int
  "End Time"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  appr_modby: str
  "Approval Information: Modified by"
  iStartTime: int
  "Start Time"
  pSubstat: object
  "Substation"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def GetSwitchStatus(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntScenario(Protocol):
  iCurConfig: int
  "Based on current scenario configuration"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  cpHeadFold: object
  "Head Folder"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  iModified: int
  "Modified"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  iAcIncremental: int
  "Include incremental subset in activation"
  dataExtUnit: list
  "Unit"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  sShort: str
  "Short Name"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetObjects(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def ApplySelective(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def Save(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def Activate(*args):
    ...

  def Deactivate(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetOperationValue(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def Apply(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def ReleaseMemory(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DiscardChanges(*args):
    ...

  def SetOperationValue(*args):
    ...

  def GetImpedance(*args):
    ...



class IntScensched(Protocol):
  tEndTime: list
  "End Time"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  iAcIncremental: int
  "Include incremental subsets in scenario activation"
  tStartTime: list
  "Start Time"
  dataExtUnit: list
  "Unit"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  pScenario: list
  "Operating Scenario"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def Activate(*args):
    ...

  def Deactivate(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetScenario(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def DeleteRow(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetStartEndTime(*args):
    ...

  def SearchScenario(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class IntScheme(Protocol):
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  iValPeriod: int
  "Restricted Validity Period"
  iStartTime: int
  "Restricted Validity Period: Start Time"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  icolor: int
  "Colour"
  cpHeadFold: object
  "Head Folder"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  iEndTime: int
  "Restricted Validity Period: End Time"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  tToAc: int
  "Activation Time: completed"
  dataExtUnit: list
  "Unit"
  tFromAc: int
  "Activation Time: starting"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  sRepres: list
  "Representative"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Consolidate(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def Activate(*args):
    ...

  def Deactivate(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def NewStage(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetActiveScheduler(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class IntSscheduler(Protocol):
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  appr_modby: str
  "Approval Information: Modified by"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def Update(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def Activate(*args):
    ...

  def GetControlledNode(*args):
    ...

  def Deactivate(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def HasReferences(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntSstage(Protocol):
  cActTime: int
  "Effective Activation Time"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  cpHeadFold: object
  "Head Folder"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  ScrVal: float
  "Commercial equipment value: Scrap value"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  AddCosts: float
  "Costs for expansion: Additional costs"
  tAcTime: int
  "Activation Time"
  dataExtUnit: list
  "Unit"
  LifeSpan: int
  "Commercial equipment value: Expected life span"
  iExclude: int
  "Exclude from Activation"
  weekOfActivation: int
  "Week (Activation)"
  InvCosts: float
  "Costs for expansion: Investment costs"
  OrigVal: float
  "Commercial equipment value: Original value"
  doc_id: object
  "Additional Data"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Target"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetScheme(*args):
    ...

  def IsExcluded(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def Activate(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetVariation(*args):
    ...

  def HasReferences(*args):
    ...

  def ReadValue(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def WriteValue(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def CreateStageObject(*args):
    ...

  def HasAttribute(*args):
    ...

  def EnableDiffMode(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def PrintModifications(*args):
    ...

  def GetImpedance(*args):
    ...



class IntSubset(Protocol):
  dat_src: str
  "Data source"
  iSize: list
  "Memory Size"
  chr_name: str
  "Characteristic Name"
  iCount: int
  "Number of Elements"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  iExcluded: int
  "Exclude grid from recording"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  pGrid: object
  "Grid"
  paraminfo: list
  "Parameter Information"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  iType: int
  "Type:&0&undefined:&1&Virtual Power Plant:&2&Demand:&3&Generation:&4&Switch:&5&RA:&6&Tap:&7&Voltage:&8&Feeder:&9&Zone:&10&Compensation:&12&Out-of-Service:&13&External Measurement:&11&Other:&14&Grid:&15&Incremental"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  classFilter: str
  "Class Filter"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetObjects(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def ApplySelective(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Clear(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def Apply(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetConfiguration(*args):
    ...

  def GetImpedance(*args):
    ...



class IntThrating(Protocol):
  typemetadata_key: list
  "Type Key"
  MyMatrix: list
  "Short term ratings"
  duration: list
  "Consider short term ratings: Duration"
  ContRating: float
  "Continuous Rating"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  preload: list
  "Consider short term ratings: Preload"
  configWind: list
  "Wind speed: Wind speed"
  contRatMat: list
  "Continuous Rating"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  iopt_unit: int
  "Unit:MVA:kA:%"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  table_valid: int
  "Consider short term ratings"
  gnrl_modif: int
  "Object modified"
  optTa: int
  "Ambient temperature"
  PostRating: float
  "Post-fault continuous rating"
  PreRating: float
  "Pre-fault continuous rating"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  typemetadata_version: list
  "Version"
  typemetadata_changeLog: list
  "Change Log"
  configTa: list
  "Ambient temperature: Ambient temperature"
  configSolar: list
  "Solar irradiance (GHI): Solar irradiance (GHI)"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  optWind: int
  "Wind speed"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  optSolar: int
  "Solar irradiance (GHI)"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Resize(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetCriticalTimePhase(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetRating(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class IntUrl(Protocol):
  geoBoundsSet: int
  "Map Service Configuration: Specify geographic map bounds"
  mapServerProtocol: int
  "Map Service Configuration: Map server protocol:WMTS 1.0.0:WMS 1.1.1:WMS 1.3.0:XYZ (Slippy Map)"
  mapProjection: str
  "Map Service Configuration: Preferred projection"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  geoBoundsSouth: float
  "Map Service Configuration Specify geographic map bounds: south"
  appr_modby: str
  "Approval Information: Modified by"
  resourceType: int
  "Resource type:Generic:Map Service:Geographic Search Provider"
  sUrl: str
  "Address"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  pObj: object
  "Related to"
  cpHeadFold: object
  "Head Folder"
  geoBoundsEast: float
  "Map Service Configuration Specify geographic map bounds: east"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  httpAccessDataSet: int
  "Map Service Configuration: Specify HTTP access data"
  charact: list
  "Charact."
  httpUsername: str
  "Map Service Configuration Specify HTTP access data: Username"
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  geoSearchProviderType: int
  "Geographic search provider"
  httpPassword: str
  "Map Service Configuration Specify HTTP access data: Password"
  geoBoundsWest: float
  "Map Service Configuration Specify geographic map bounds: west"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  geoBoundsNorth: float
  "Map Service Configuration Specify geographic map bounds: north"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  mapReverseAxes: int
  "Map Service Configuration: Reverse axes of projection space"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def View(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class IntVec(Protocol):
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  V: list
  "Vector"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Resize(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Delete(*args):
    ...

  def Energize(*args):
    ...

  def Set(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def Get(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def Max(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def Sort(*args):
    ...

  def Mean(*args):
    ...

  def Init(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def Save(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def Min(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def Size(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntVecobj(Protocol):
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  vecSize: int
  "Size"
  dataExtUnit: list
  "Unit"
  infolder: list
  "In Folder"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  V: list
  "Vector"
  oid_: int
  "ObjectID"
  classFilter: list
  "Class Filter"
  loc_name: str
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Resize(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Delete(*args):
    ...

  def Energize(*args):
    ...

  def Set(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def Search(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def Get(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def Save(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def Size(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntVersion(Protocol):
  notify: int
  "Notify users of derived projects"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  dbid: int
  "Internal database id"
  for_name: str
  "Foreign Key"
  contents: list
  "Content"
  approval: int
  "Complete project approval for versioning required"
  cpHeadFold: object
  "Head Folder"
  creator: str
  "Created by"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  creation: int
  "Point in Time"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetDerivedProjects(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def CreateDerivedProject(*args):
    ...

  def Energize(*args):
    ...

  def Rollback(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetHistoricalProject(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class IntViewbookmark(Protocol):
  fold_id: object
  "In Folder"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  viewAreaRight: float
  "View Area: Right"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pDiagram: object
  "Diagram"
  pid_: int
  "ProjectID"
  viewAreaLeft: float
  "View Area: Left"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  hotkeySelectBox: int
  "Hotkey: New hotkey:   :CTRL+1:CTRL+2:CTRL+3:CTRL+4:CTRL+5:CTRL+6:CTRL+7:CTRL+8:CTRL+9"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  hotkey: int
  "Hotkey"
  viewAreaTop: float
  "View Area: Top"
  gnrl_modif: int
  "Object modified"
  viewAreaBottom: float
  "View Area: Bottom"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def JumpTo(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def UpdateFromCurrentView(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class PltAxis(Protocol):
  scaleDuringLivePlot: int
  "Scale to Contents: Scale during live plotting"
  minorTickExtent: int
  "Line Style: Tick extent:None:Outside:Inside:Both sides"
  minorGridlineColor: int
  "Line Style: Gridline colour"
  dat_src: str
  "Data source"
  axisDateFormat: int
  "Date format"
  chr_name: str
  "Characteristic Name"
  minorTickTimeUnit: int
  "Tick Mark Positions: Unit:Milliseconds:Seconds:Minutes:Hours:Days:Months:Years"
  rangeMax: float
  "Range: Maximum"
  majorTickCount: int
  "Tick Mark Positions: Major tick count"
  axisLineStyle: int
  "Axis line style"
  discreteTextAngle: float
  "Font Style: Text angle"
  fontID: int
  "Font-ID"
  majorTickStep: float
  "Tick Mark Positions: Major tick step size"
  keepTicksCongruent: int
  "Keep tick marks congruent with first axis"
  majorGridlineStyle: int
  "Line Style: Gridline style"
  for_name: str
  "Foreign Key"
  showUnit: int
  "Font Style: Show unit (if unique)"
  useAutoTickSettings: int
  "Tick Mark Positions: Determine tick positions automatically"
  majorTickTimeUnit: int
  "Tick Mark Positions: Unit:Milliseconds:Seconds:Minutes:Hours:Days:Months:Years"
  axisDimension: int
  "Axis dimension"
  majorTickTimeStep: int
  "Tick Mark Positions: Major tick step size"
  cpHeadFold: object
  "Head Folder"
  minorGridlineStyle: int
  "Line Style: Gridline style"
  axisFrequencyUnit: int
  "Frequency Unit"
  rangeDateTimeMax: int
  "Time Period: End"
  axisLineColor: int
  "Axis line colour"
  axisLineWidth: int
  "Axis line width"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  numFormatShowPlus: int
  "Number Format: Show sign for positive values"
  Internals: list
  "Contents ..."
  majorGridlineWidth: int
  "Line Style: Gridline width"
  rangeDateTimeMaxMs: int
  "Milliseconds"
  gnrl_modif: int
  "Object modified"
  scaleType: int
  "Scale Type"
  rangeDateTimeMin: int
  "Time Period: Start"
  minorTickStep: float
  "Tick Mark Positions: Minor tick step size"
  axisTimeUnit: int
  "Time unit"
  limitMinimumToOrigin: int
  "Scale to Contents: Limit minimum to origin if possible"
  numFormatMode: int
  "Number Format: Format:concise:fixed decimals:scientific"
  charact: list
  "Charact."
  numExponentCase: int
  "Number Format: Exponent character:'e':'E'"
  dataExtDesc: list
  "Description"
  labelOffset: float
  "Font Style: Label offset"
  scaleOnDataChange: int
  "Scale to Contents: Scale when calculation data changes"
  dataExtUnit: list
  "Unit"
  vectorCoords: int
  "Representation of Coordinates"
  rangeDateTimeMinMs: int
  "Milliseconds"
  majorGridlineColor: int
  "Line Style: Gridline colour"
  axisTimeOfDayFormat: int
  "Time of day format"
  scaleRelativeMargin: int
  "Scale to Contents: Relative margin"
  centreOrigin: int
  "Scale to Contents: Centre origin"
  tickPositionFrame: int
  "Tick Mark Positions"
  minorTickCount: int
  "Tick Mark Positions: Minor tick count"
  minorTickTimeStep: int
  "Tick Mark Positions: Minor tick step size"
  numFormatDecimals: int
  "Number Format: Decimals"
  gnrl_modby: str
  "Object modified by"
  axisIndex: int
  "Axis index"
  pid_: int
  "ProjectID"
  rangeMin: float
  "Range: Minimum"
  tickReferenceValue: float
  "Tick Mark Positions: Reference value"
  rangeExponentMin: int
  "Range (exponents): Minimum 1e"
  tid_: int
  "TimeID"
  minorGridlineWidth: int
  "Line Style: Gridline width"
  root_id: object
  "Original Location"
  axisMode: int
  "Axis mode:Default:Time:Date and time:Frequency:Discrete (net elements):XY plot"
  labelColor: int
  "Font Style: Label colour"
  loc_name: str
  "Name"
  rangeExponentMax: int
  "Range (exponents): Maximum 1e"
  fold_id: object
  "In Folder"
  majorTickExtent: int
  "Line Style: Tick extent:None:Outside:Inside:Both sides"
  numFormatDigits: int
  "Number Format: Digits (maximum)"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetFont(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DoAutoScale(*args):
    ...

  def GetImpedance(*args):
    ...



class PltComplexdata(Protocol):
  transformationVariable: list
  "Transformation Variable"
  complexVariable: list
  "Complex Variable"
  dataTableColour: list
  "Colour"
  borderColor: int
  "Border and Background: Border colour"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  vectorLabels: int
  "Plot Features: Vector labels:None:Automatic:Coordinates, Polar:Coordinates, Cartesian:Phase Only"
  enableVectorTrafo: int
  "Plot Features: Vector transformation"
  dataTableLineStyle: list
  "Style"
  unitScalingTableScale: list
  "Scale"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  dataTableTrafoOperator: list
  "Operation"
  labelFontColor: int
  "Label Font: Colour"
  dataTableVariable: list
  "Complex Variable"
  curveAreaLeft: float
  "Curve Area Position (mm): Left"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  numFormatShowPlus: int
  "Number Format: Show sign for positive values"
  dataTableLabel: list
  "Description"
  dataTableTrafoVariable: list
  "Transformation Variable"
  gnrl_modif: int
  "Object modified"
  dataTableResultFile: list
  "Result File"
  timePoint: float
  "Time Point Selection: Time Point"
  dataTableElement: list
  "Element"
  fillBackground: int
  "Border and Background: Fill background"
  curveAreaTop: float
  "Curve Area Position (mm): Top"
  commonResultFile: object
  "Data Source: Result file"
  timePointCursor: object
  "Time Point Selection: Cursor"
  numFormatMode: int
  "Number Format: Format:concise:fixed decimals:scientific"
  showAllPhases: int
  "Show all phases"
  charact: list
  "Charact."
  numExponentCase: int
  "Number Format: Exponent character:'e':'E'"
  colourPalette: object
  "Colour palette"
  dataExtDesc: list
  "Description"
  dataSourceType: int
  "Data Source"
  dataExtUnit: list
  "Unit"
  drawArrowHeads: int
  "Plot Features: Draw arrow heads"
  unitScalingTableUnit: list
  "Unit"
  drawBorder: int
  "Border and Background: Draw border"
  autoPositionCurveArea: int
  "Curve Area Position (mm): Auto-Position Curve Area"
  enableUnitAutoScaling: int
  "Determine unit scales automatically"
  fillColor: int
  "Border and Background: Fill colour"
  iopt_dataSourceResultFile: int
  "Data Source: Result file"
  dataTableResultElement: list
  "Element"
  useIndividualResults: int
  "Data Source: Select results individually per vector"
  curveAreaBottom: float
  "Curve Area Position (mm): Bottom"
  numFormatDecimals: int
  "Number Format: Decimals"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  iopt_dataSourceVariables: int
  "Data Source: Element variables"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  curveAreaRight: float
  "Curve Area Position (mm): Right"
  loc_name: str
  "Name"
  dataTableLineWidth: list
  "Width"
  labelFontID: int
  "Font-ID"
  dataTableVisible: list
  "Visible"
  fold_id: object
  "In Folder"
  numFormatDigits: int
  "Number Format: Digits (maximum)"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def ChangeColourPalette(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def AddVector(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def ClearVectors(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class PltDataseries(Protocol):
  curveTableResultFile: list
  "Result File"
  showHarmonicFundFrequency: int
  "Plot Features: Show fundamental frequency"
  curveTableNormaliseX: list
  "Normalise X"
  harmonicLimitsFillColor: int
  "Harmonic Limits: Style"
  curveTableElementX: list
  "Element X-Axis"
  borderColor: int
  "Border and Background: Border colour"
  curveTableLineStyle: list
  "Line Style"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  specifyByDate: int
  "Specify time range: Use date format"
  resultOriginLabel: list
  curveTableFunction: list
  "Function"
  harmonicLimitsFillStyle: int
  "Harmonic Limits: Style"
  enableCurveStacking: int
  "Plot Features: Curve stacking"
  drawDirectionArrows: int
  "Plot Features: Draw direction arrows"
  curveTableFillStyle: list
  "Fill Style"
  enableDataTrafo: int
  "Plot Features: Data transformation"
  for_name: str
  "Foreign Key"
  curveTableVisible: list
  "Visible"
  dataTransformationMode: int
  "Plot Features: "
  curveTableNormValue: list
  "Nom.Val."
  cpHeadFold: object
  "Head Folder"
  labelFontColor: int
  "Label Font: Colour"
  curveTableLineWidth: list
  "Line Width"
  curveAreaLeft: float
  "Curve Area Position (mm): Left"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  numFormatShowPlus: int
  "Number Format: Show sign for positive values"
  Internals: list
  "Contents ..."
  userSelectedResultFile: object
  "Data Source: User-defined result file"
  resultTypeFilter: str
  "Data Source: Calculation type"
  gnrl_modif: int
  "Object modified"
  curveTableLabel: list
  "Label"
  curveStackingMode: int
  "Curve stacking"
  fillBackground: int
  "Border and Background: Fill background"
  curveAreaTop: float
  "Curve Area Position (mm): Top"
  harmonicLimits: list
  "Harmonic Limits: Show"
  curveTableAxisIndexX: list
  "X-Axis"
  enableCurveShapes: int
  "Plot Features: Additional curve shapes"
  numFormatMode: int
  "Number Format: Format:concise:fixed decimals:scientific"
  charact: list
  "Charact."
  numExponentCase: int
  "Number Format: Exponent character:'e':'E'"
  colourPalette: object
  "Colour palette"
  normalisationUnit: int
  "Normalisation Unit"
  dataExtDesc: list
  "Description"
  curveFunctionStore: list
  "Function object"
  curveVariableStoreX: list
  "Variable X-Axis"
  dataExtUnit: list
  "Unit"
  discreteBarAxisPath: object
  "Path"
  harmonicStandard: list
  "Harmonic Limits: Standard"
  curveTableShape: list
  "Curve Shape"
  dateRangeMaxMs: int
  "Milliseconds"
  drawBorder: int
  "Border and Background: Draw border"
  showTotalHarmonicDistortion: int
  "Plot Features: Show corresponding THD or THF"
  autoPositionCurveArea: int
  "Curve Area Position (mm): Auto-Position Curve Area"
  dateRangeMinMs: int
  "Milliseconds"
  specifyTimeRange: int
  "Specify time range"
  fillColor: int
  "Border and Background: Fill colour"
  autoSearchResultFile: int
  "Data Source: Auto-search results"
  curveTableNormalise: list
  "Normalise"
  discreteBarAxisElements: list
  "Elements"
  curveTableColor: list
  "Colour"
  curveTableSampleMarker: list
  "Sample Marker"
  dateRangeMax: int
  "End time"
  curveVariableStore: list
  "Variable Y-Axis"
  curveTableAxisIndexY: list
  "Y-Axis"
  curveTableVariable: list
  "Variable"
  curveTableVariableX: list
  "Variable X-Axis"
  useIndividualResults: int
  "Data Source: Select results individually per curve"
  curveAreaBottom: float
  "Curve Area Position (mm): Bottom"
  numFormatDecimals: int
  "Number Format: Decimals"
  timeRangeMax: float
  "Specify time range: End time"
  curveTableElement: list
  "Element"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  curveStackingSelector: int
  "Plot Features: Stacking mode:Values:Absolute values:Relative values:Percentage"
  curveAngleStore: list
  "Angle"
  curveTableNormValueX: list
  "Nom.Val. X"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  curveAreaRight: float
  "Curve Area Position (mm): Right"
  dateRangeMin: int
  "Start time"
  timeRangeMin: float
  "Specify time range: Start time"
  loc_name: str
  "Name"
  useAxisTextFormat: int
  "Use text format settings from axes for curve labels"
  labelFontID: int
  "Font-ID"
  curveTableAngle: list
  "Angle"
  fold_id: object
  "In Folder"
  numFormatDigits: int
  "Number Format: Digits (maximum)"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetIntCalcres(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def AddXYCurve(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def ChangeColourPalette(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetDataSource(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AddCurve(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def ClearCurves(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class PltLegend(Protocol):
  floatingPosRight: float
  "Floating Position (mm): Right"
  borderColor: int
  "Border and Background: Border colour"
  alwaysShowUnits: int
  "Text Format: Always show units"
  floatingPosTop: float
  "Floating Position (mm): Top"
  dat_src: str
  "Data source"
  maxRelativeSize: float
  "Positioning and Layout: Maximum size"
  chr_name: str
  "Characteristic Name"
  fontID: int
  "Font-ID"
  lineSpacingFactor: float
  "Text Format: Line spacing"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  position: int
  "Positioning and Layout: Position:floating:top left:top centre:top right:bottom left:bottom centre:bottom right:left:right"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  Internals: list
  "Contents ..."
  gnrl_modif: int
  "Object modified"
  fillBackground: int
  "Border and Background: Fill background"
  includeOnlyDrawnCurves: int
  "Positioning and Layout: Include only drawn curves"
  fontColor: int
  "Text Format: Font colour"
  charact: list
  "Charact."
  floatingPosLeft: float
  "Floating Position (mm): Left"
  dataExtDesc: list
  "Description"
  floatingPosBottom: float
  "Floating Position (mm): Bottom"
  dataExtUnit: list
  "Unit"
  drawBorder: int
  "Border and Background: Draw border"
  reverseItemOrder: int
  "Positioning and Layout: Reverse item order"
  fillColor: int
  "Border and Background: Fill colour"
  padding: float
  "Positioning and Layout: Padding"
  numColumns: int
  "Positioning and Layout: Num columns"
  margin: float
  "Positioning and Layout: Margin"
  gnrl_modby: str
  "Object modified by"
  layoutMode: int
  "Positioning and Layout: Layout:automatic:columns:horizontal"
  pid_: int
  "ProjectID"
  useShortVarDesc: int
  "Text Format: Use short variable description"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  showLegend: int
  "Show legend"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetFont(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class PltLinebarplot(Protocol):
  borderColor: int
  "Border and Background: Border colour"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  elementPaddingRight: float
  "Element Padding (mm): Right"
  yAxis2Sharing: int
  "Right Y-Axis: Y-Axis Sharing"
  xAxisSharing: int
  "Bottom X-Axis: X-Axis Sharing"
  for_name: str
  "Foreign Key"
  plotAreaTop: float
  "Plot Position on Page (mm): Top"
  axisVisibilityY: int
  "Axis Visibility: Show left Y-Axis"
  cpHeadFold: object
  "Head Folder"
  axisVisibilityY2: int
  "Axis Visibility: Show right Y-Axis"
  elementPaddingTop: float
  "Element Padding (mm): Top"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  Internals: list
  "Contents ..."
  elementPaddingBottom: float
  "Element Padding (mm): Bottom"
  xAxis2Sharing: int
  "Top X-Axis: X-Axis Sharing"
  gnrl_modif: int
  "Object modified"
  pageOrderIndex: int
  "Page Order"
  fillBackground: int
  "Border and Background: Fill background"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  drawBorder: int
  "Border and Background: Draw border"
  axisVisibilityX2: int
  "Axis Visibility: Show top X-Axis"
  fillColor: int
  "Border and Background: Fill colour"
  plotAreaBottom: float
  "Plot Position on Page (mm): Bottom"
  axisVisibilityX: int
  "Axis Visibility: Show bottom X-Axis"
  gnrl_modby: str
  "Object modified by"
  plotAreaLeft: float
  "Plot Position on Page (mm): Left"
  pid_: int
  "ProjectID"
  yAxisSharing: int
  "Left Y-Axis: Y-Axis Sharing"
  elementPaddingLeft: float
  "Element Padding (mm): Left"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  plotAreaRight: float
  "Plot Position on Page (mm): Right"


  def GetContents(*args):
    ...

  def SetScaleY(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetScaleX(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def SetAutoScaleModeY(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def SetScaleTypeY(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ChangeStyle(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAxisX(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetDataSeries(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetTitleObject(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAxisSharingLevelY(*args):
    ...

  def GetAxisY(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def SetScaleTypeX(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def DoAutoScaleY(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def SetAutoScaleModeX(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def SetAxisSharingLevelX(*args):
    ...

  def DoAutoScaleX(*args):
    ...

  def DoAutoScale(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetLegend(*args):
    ...



class PltTitle(Protocol):
  borderColor: int
  "Border and Background: Border colour"
  floatingPosTop: float
  "Floating Position (mm): Top"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  fontID: int
  "Font-ID"
  showTitle: int
  "Title: Show title"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  position: int
  "Positioning and Layout: Position:floating:top left:top centre:top right:bottom left:bottom centre:bottom right:left:right"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  Internals: list
  "Contents ..."
  gnrl_modif: int
  "Object modified"
  fillBackground: int
  "Border and Background: Fill background"
  fontColor: int
  "Text Format: Font colour"
  charact: list
  "Charact."
  floatingPosLeft: float
  "Floating Position (mm): Left"
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  drawBorder: int
  "Border and Background: Draw border"
  fillColor: int
  "Border and Background: Fill colour"
  padding: float
  "Positioning and Layout: Padding"
  margin: float
  "Positioning and Layout: Margin"
  titleString: list
  "Title: Title"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetFont(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class PltVectorplot(Protocol):
  borderColor: int
  "Border and Background: Border colour"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  elementPaddingRight: float
  "Element Padding (mm): Right"
  for_name: str
  "Foreign Key"
  plotAreaTop: float
  "Plot Position on Page (mm): Top"
  axisVisibilityY: int
  "Axis Visibility: Show Y-Axis"
  cpHeadFold: object
  "Head Folder"
  elementPaddingTop: float
  "Element Padding (mm): Top"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  Internals: list
  "Contents ..."
  elementPaddingBottom: float
  "Element Padding (mm): Bottom"
  gnrl_modif: int
  "Object modified"
  pageOrderIndex: int
  "Page Order"
  fillBackground: int
  "Border and Background: Fill background"
  createVectorPlot: int
  "Create Vector Plot"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  drawBorder: int
  "Border and Background: Draw border"
  fillColor: int
  "Border and Background: Fill colour"
  plotAreaBottom: float
  "Plot Position on Page (mm): Bottom"
  axisVisibilityX: int
  "Axis Visibility: Show X-Axis"
  gnrl_modby: str
  "Object modified by"
  plotAreaLeft: float
  "Plot Position on Page (mm): Left"
  pid_: int
  "ProjectID"
  elementPaddingLeft: float
  "Element Padding (mm): Left"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  plotAreaRight: float
  "Plot Position on Page (mm): Right"


  def GetContents(*args):
    ...

  def SetScaleY(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetScaleX(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def SetAutoScaleModeY(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ChangeStyle(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAxisX(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetTitleObject(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def GetAxisY(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetComplexData(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def SetAutoScaleModeX(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DoAutoScale(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetLegend(*args):
    ...



class RelChar(Protocol):
  cIpsetrU: str
  "Unit"
  c_sfiec: str
  "IEC Symbol:"
  typ_id: object
  "Type"
  cTadder: float
  "Enable TCC modifiers: Time Adder"
  cpOperator: object
  "Operator"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  cpIpsetU: str
  "Unit"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  cIpsetU: str
  "Unit"
  cDisplayName: str
  "Display Name"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpIpset: float
  "Input Setting"
  Tadder: float
  "Enable TCC modifiers: Time Adder"
  cpBranch: object
  "Branch"
  ctratio: str
  "Current Transformer Ratio"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  Tpset: float
  "Enable TCC modifiers: Time Dial"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  pcharac: object
  "Characteristic"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  minresptime: float
  "Enable TCC modifiers: Min. Response Time"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  c_type: str
  "Measure Type:"
  cminresptime: float
  "Enable TCC modifiers: Min. Response Time"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  Tshift: float
  "Time Shift"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  cResetT: float
  "Reset Delay"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  c_sfansi: str
  "ANSI Symbol:"
  cpArea: object
  "Area"
  ModFrame: int
  "Enable TCC modifiers"
  Ipsetr: float
  "Input Setting"
  udeftmax: float
  "Max. Time"
  cpSupplyTransformer: object
  "Supplying Transformer"
  vtratio: str
  "Voltage Transformer Ratio"
  Ipset: float
  "Input Setting"
  resetdis: int
  "Reset Characteristic"
  ResetT: float
  "Reset Delay"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  udeftmin: float
  "Min. Time"
  root_id: object
  "Original Location"
  idir: int
  "Tripping Direction"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  calcuse: int
  "Compute Time Using"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def SetCurve(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class RelToc(Protocol):
  c_sfiec: str
  "IEC Symbol:"
  typ_id: object
  "Type"
  cTadder: float
  "Enable TCC modifiers: Time Adder"
  cpOperator: object
  "Operator"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  Trelblock: float
  "Consider Blocking: Release Blocking Time"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  cDisplayName: str
  "Display Name"
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  cpIpset: float
  "Current Setting"
  Tadder: float
  "Enable TCC modifiers: Time Adder"
  cpBranch: object
  "Branch"
  ctratio: str
  "Current Transformer Ratio"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  iacceptblock: int
  "Consider Blocking"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  Tpset: float
  "Enable TCC modifiers: Time Dial"
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  pcharac: object
  "Characteristic"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  minresptime: float
  "Enable TCC modifiers: Min. Response Time"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  c_type: str
  "Measure Type:"
  cminresptime: float
  "Enable TCC modifiers: Min. Response Time"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  Tshift: float
  "Time Shift"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  cResetT: float
  "Reset Delay"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  c_sfansi: str
  "ANSI Symbol:"
  cpArea: object
  "Area"
  ModFrame: int
  "Enable TCC modifiers"
  Ipsetr: float
  "Current Setting"
  udeftmax: float
  "Max. Time"
  cpSupplyTransformer: object
  "Supplying Transformer"
  Ipset: float
  "Current Setting"
  resetdis: int
  "Reset Characteristic"
  ResetT: float
  "Reset Delay"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  tid_: int
  "TimeID"
  udeftmin: float
  "Min. Time"
  root_id: object
  "Original Location"
  idir: int
  "Tripping Direction"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  calcuse: int
  "Compute Time Using"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def SetCurve(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class RelZpol(Protocol):
  irelpol: int
  "Polarisation Method:Self:Cross (Quadrature):Cross (Quad L-L):Positive Sequence:Self, ground compensated"
  PcompRatio: float
  "Mutual Earth Factor: Earth Current Ratio"
  typ_id: object
  "Type"
  cpOperator: object
  "Operator"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  complexrepr: int
  "Earth Factor: Show as complex number"
  c_pol: str
  "Polarisation Method:"
  phik0m: float
  "Mutual Earth Factor: Angle"
  cpSupplyTrfStation: object
  "Supplying Secondary Substation"
  pol2k: float
  "2nd Polarising factor"
  cDisplayName: str
  "Display Name"
  CompAngle0: float
  "Comp. angle zero seq."
  for_name: str
  "Foreign Key"
  ciDist: int
  "Distance from infeed in number of buses"
  XeXl: float
  "Earth Factor: Xe / Xl"
  cpBranch: object
  "Branch"
  cpHeadFold: object
  "Head Folder"
  cpOwner: object
  "Owner"
  ciEarthed: int
  "Earthed"
  outserv: int
  "Out of Service"
  ciOutaged: int
  "Planned Outage"
  cpSupplySubstation: object
  "Supplying Substation"
  iSCompenLine: int
  "Series compensation"
  CompAngle2: float
  "Comp. angle neg. seq."
  iSchemeStatus: int
  "Scheme Status"
  cUserDefIndex: int
  "User defined Index"
  oid_: int
  "ObjectID"
  phik0: float
  "Earth Factor: Angle"
  memreset: float
  "Memory use reset threshold"
  c_k0desc: str
  "Earth factor representation:"
  gnrl_modif: int
  "Object modified"
  ciEnergized: int
  "Energized"
  Tmem: float
  "Memory Time"
  PcompLtg: float
  "Mutual Earth Factor: Earth Current Ratio"
  ciDistAllRoot: int
  "Distance from first infeed in number of buses including switches"
  cpZone: object
  "Zone"
  c_type: str
  "Polarisation Unit:"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  IFsub: int
  "Substitute for IF:3I0:3I2"
  ciDistRoot: int
  "Distance from first infeed in number of buses"
  cpFeed: object
  "Feeder"
  dataExtUnit: list
  "Unit"
  cpMeteostat: object
  "Meteo Station"
  RmRl: float
  "Mutual Earth Factor: Rm / Rl"
  lineangle: float
  "Earth Factor: Line angle"
  iencircmem: int
  "Circular memory"
  cpArea: object
  "Area"
  cpSupplyTransformer: object
  "Supplying Transformer"
  k0m: float
  "Mutual Earth Factor: k0m"
  c_auto: int
  "Used Impedance"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  ciLater: int
  "Lateral Index"
  ciDistAll: int
  "Distance from infeed in number of buses including switches"
  XmXl: float
  "Mutual Earth Factor: Xm / Xl"
  cpSite: object
  "Site"
  cpSubstat: object
  "Substation"
  cpGrid: object
  "Grid"
  memuse: float
  "Memory use threshold"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  ReRl: float
  "Earth Factor: Re / Rl"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  k0: float
  "Earth Factor: k0"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def AssumeReRl(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def AssumeXeXl(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def AssumeCompensationFactor(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ScnFreq(Protocol):
  dtscn: float
  "Time step"
  fmin: float
  "Frequency: Minimum limit"
  fmax: float
  "Frequency: Maximum limit"
  conscn: int
  "Detection of multiple violations"
  for_name: str
  "Foreign Key"
  iopt_actscn: int
  "Action"
  cpHeadFold: object
  "Head folder"
  outserv: int
  "Ignored"
  htscn: int
  "Activation time: Hours"
  timewindowGrad: float
  "Scan measurement: Time window"
  fmingrad: float
  "Frequency gradient: Minimum limit"
  mtscn: int
  "Activation time: Minutes"
  oid_: int
  "ObjectID"
  simscanobj: object
  "Scan location: User selection"
  gnrl_modif: int
  "Object modified"
  iopt_opt: int
  "Scan measurement"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  stscn: float
  "Activation time: Seconds"
  dataExtUnit: list
  "Unit"
  stopError: int
  "Action: Stop with error"
  fnom: float
  "Nominal frequency"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  freqlist: str
  "Scan measurement: Nominal frequency"
  tid_: int
  "TimeID"
  root_id: object
  "Original location"
  loc_name: str
  "Name"
  location: int
  "Scan location"
  triggerObj: object
  "Action: Trigger"
  fmaxgrad: float
  "Frequency gradient: Maximum limit"
  fold_id: object
  "In folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetVariable(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetViolationTime(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def GetValue(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetLimit(*args):
    ...

  def GetRegion(*args):
    ...

  def GetReferences(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetNumberOfViolations(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetViolatedElement(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ScnFrt(Protocol):
  dtscn: float
  "Time step"
  curve_uH: list
  "Value"
  duration: float
  "Duration"
  conscnH: int
  "Multiple fault detection"
  voltlist: str
  "Unbalanced network representation: Scanned voltages"
  iopt_elmTerm: int
  "Variable"
  vinitialH: float
  "Activation threshold"
  curve_u: list
  "Value"
  param: list
  "Variable: Variable"
  durationH: float
  "Duration"
  conscn: int
  "Multiple fault detections"
  for_name: str
  "Foreign Key"
  iopt_actscn: int
  "Action"
  cpHeadFold: object
  "Head folder"
  outserv: int
  "Ignored"
  htscn: int
  "Activation time: Hours"
  minDurationH: float
  "Multiple fault detection: Minimum duration"
  mtscn: int
  "Activation time: Minutes"
  oid_: int
  "ObjectID"
  iopt_unbViol: int
  "Unbalanced violation"
  unitTxt: str
  "Variable: Unit"
  reigniThres: float
  "Multiple fault detections: Reignition threshold"
  simscanobj: object
  "Scan location: User selection"
  gnrl_modif: int
  "Object modified"
  vinitial: float
  "Activation threshold"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  classnm: str
  "Scan location: Class name"
  stscn: float
  "Activation time: Seconds"
  curve_tu: list
  "Time"
  dataExtUnit: list
  "Unit"
  stopError: int
  "Action: Stop with error"
  iopt_printMes: int
  "Display messages"
  cclassnm: str
  "Scan location: Class name"
  gnrl_modby: str
  "Object modified by"
  minDuration: float
  "Multiple fault detections: Minimum duration"
  pid_: int
  "ProjectID"
  iopt_scanType: int
  "Limit curve type"
  reigniThresH: float
  "Multiple fault detection: Reignition threshold"
  curve_tuH: list
  "Time"
  iopt_unbFault: int
  "Unbalanced fault detection"
  tid_: int
  "TimeID"
  root_id: object
  "Original location"
  loc_name: str
  "Name"
  location: int
  "Scan location"
  triggerObj: object
  "Action: Trigger"
  fold_id: object
  "In folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetVariable(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetViolationTime(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def GetValue(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetLimit(*args):
    ...

  def GetRegion(*args):
    ...

  def GetReferences(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetNumberOfViolations(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetViolatedElement(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ScnSpeed(Protocol):
  dtscn: float
  "Activation time: Time step"
  for_name: str
  "Foreign Key"
  iopt_actscn: int
  "Action"
  cpHeadFold: object
  "Head folder"
  outserv: int
  "Ignored"
  htscn: int
  "Activation time: Hours"
  mtscn: int
  "Activation time: Minutes"
  oid_: int
  "ObjectID"
  simscanobj: object
  "Scan location: User selection"
  gnrl_modif: int
  "Object modified"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  stscn: float
  "Activation time: Seconds"
  dataExtUnit: list
  "Unit"
  stopError: int
  "Action: Stop with error"
  smin: float
  "Speed settings: Minimum limit"
  smax: float
  "Speed settings: Maximum limit"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original location"
  loc_name: str
  "Name"
  location: int
  "Scan location"
  triggerObj: object
  "Action: Trigger"
  fold_id: object
  "In folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetVariable(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetViolationTime(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def GetValue(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetLimit(*args):
    ...

  def GetRegion(*args):
    ...

  def GetReferences(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetNumberOfViolations(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetViolatedElement(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ScnSync(Protocol):
  dtscn: float
  "Activation time: Time step"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  stscn: float
  "Activation time: Seconds"
  dataExtUnit: list
  "Unit"
  stopError: int
  "Stop with error"
  for_name: str
  "Foreign Key"
  iopt_actscn: int
  "Action"
  cpHeadFold: object
  "Head folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  outserv: int
  "Ignored"
  tid_: int
  "TimeID"
  htscn: int
  "Activation time: Hours"
  root_id: object
  "Original location"
  mtscn: int
  "Activation time: Minutes"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  location: int
  "Scan location"
  simscanobj: object
  "Scan location: User selection"
  gnrl_modif: int
  "Object modified"
  triggerObj: object
  "Action: Trigger"
  fold_id: object
  "In folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetVariable(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetViolationTime(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetLimit(*args):
    ...

  def GetRegion(*args):
    ...

  def GetReferences(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def GetValue(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetNumberOfViolations(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetViolatedElement(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class ScnVar(Protocol):
  dtscn: float
  "Activation time: Time step"
  param: list
  "Variable"
  conscn: int
  "Detection of multiple violations"
  for_name: str
  "Foreign Key"
  iopt_actscn: int
  "Action"
  cpHeadFold: object
  "Head folder"
  maxlim: float
  "Settings: Maximum limit"
  outserv: int
  "Ignored"
  htscn: int
  "Activation time: Hours"
  mtscn: int
  "Activation time: Minutes"
  oid_: int
  "ObjectID"
  simscanobj: object
  "Scan location: User selection"
  gnrl_modif: int
  "Object modified"
  oscila: int
  "Continuous scan"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  classnm: str
  "Scan location: Class name"
  stscn: float
  "Activation time: Seconds"
  dataExtUnit: list
  "Unit"
  stopError: int
  "Stop with error"
  cclassnm: str
  "Scan location: Class name"
  minlim: float
  "Settings: Minimum limit"
  p_scnobj: object
  "User selection"
  minunit: str
  "Settings: Minimum limit, unit"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original location"
  maxunit: str
  "Settings: Maximum limit, unit"
  loc_name: str
  "Name"
  location: int
  "Scan location"
  triggerObj: object
  "Action: Trigger"
  fold_id: object
  "In folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetVariable(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetViolationTime(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def GetValue(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetLimit(*args):
    ...

  def GetRegion(*args):
    ...

  def GetReferences(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetNumberOfViolations(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetViolatedElement(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class ScnVolt(Protocol):
  tvrecmax: float
  "Recovery thresholds: Duration below threshold"
  dtscn: float
  "Time step"
  vmaxGrad: float
  "Voltage gradient: Maximum limit"
  iopt_vl: int
  "Voltage"
  iopt_vr: int
  "Combined threshold for violation and recovery detection"
  voltlist: str
  "Unbalanced network representation: Scanned voltages"
  vrecmax: float
  "Recovery thresholds: Recovery threshold"
  conscn: int
  "Detection of multiple violations"
  for_name: str
  "Foreign Key"
  iopt_actscn: int
  "Action"
  tvrecmin: float
  "Recovery thresholds: Duration above threshold"
  cpHeadFold: object
  "Head folder"
  tvmax: float
  "Voltage: Duration (max. limit)"
  outserv: int
  "Ignored"
  htscn: int
  "Activation time: Hours"
  timewindowGrad: float
  "Scan measurement: Time window"
  mtscn: int
  "Activation time: Minutes"
  vmax: float
  "Voltage: Maximum limit"
  oid_: int
  "ObjectID"
  iopt_recType: int
  "Recovery thresholds"
  simscanobj: object
  "Scan location: User selection"
  gnrl_modif: int
  "Object modified"
  iopt_opt: int
  "Scan measurement"
  oscila: int
  "Continuous scan"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  vrec: float
  "Recovery thresholds: Recovery threshold"
  stscn: float
  "Activation time: Seconds"
  dataExtUnit: list
  "Unit"
  stopError: int
  "Stop with error"
  tvmin: float
  "Voltage: Duration (min. limit)"
  vrecmin: float
  "Recovery thresholds: Recovery threshold"
  tvrec: float
  "Recovery thresholds: Maximum allowed time below threshold"
  vmin: float
  "Voltage: Minimum limit"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original location"
  vminGrad: float
  "Voltage gradient: Minimum limit"
  loc_name: str
  "Name"
  location: int
  "Scan location"
  triggerObj: object
  "Action: Trigger"
  fold_id: object
  "In folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetVariable(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetViolationTime(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def GetValue(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetLimit(*args):
    ...

  def GetRegion(*args):
    ...

  def GetReferences(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetNumberOfViolations(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetViolatedElement(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class StoMaint(Protocol):
  typemetadata_key: list
  "Type Key"
  Start: int
  "Begin"
  Duration: list
  "Duration"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  iopt_def: str
  "Elements"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  dataExtUnit: list
  "Unit"
  typemetadata_version: list
  "Version"
  typemetadata_changeLog: list
  "Change Log"
  iopt_in: str
  "Input Mode"
  for_name: str
  "Foreign Key"
  StartTime: list
  "Start Time"
  cStart: str
  "Time Range: Begin"
  cEnd: str
  "Time Range: End"
  cpHeadFold: object
  "Head Folder"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  outserv: int
  "Ignore Schedule"
  tid_: int
  "TimeID"
  iSchemeStatus: int
  "Scheme Status"
  root_id: object
  "Original Location"
  oid_: int
  "ObjectID"
  loc_name: str
  "Name"
  Elms: list
  "Name"
  gnrl_modif: int
  "Object modified"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def SetElms(*args):
    ...

  def GetChildren(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def IsInFeeder(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def Delete(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def GetUnom(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def HasResults(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def HasReferences(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def IsDeleted(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetImpedance(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...



class TypAsmo(Protocol):
  r1: float
  "Operating cage/Rotor data: Resistance RrA2"
  a: float
  "Turns ratio aux./main"
  typemetadata_key: list
  "Type Key"
  rstr_aux: float
  "Stator res. aux. winding"
  tab_Tpu: list
  "Torque"
  rrsn: float
  "Slip dependent part of RrA at rated slip"
  tab_ISI: list
  "Current"
  rstr: float
  "Stator resistance Rs"
  xrs1: float
  "Slip dependent part of XrA at slip=1"
  Tinrush: float
  "Inrush peak current: Max. time"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  cs: float
  "Capacitor-start capacitance"
  satV: list
  "Saturation parameter: Term. voltage"
  rstrshc: float
  "Impedance input: Stator resistance Rs"
  appr_modby: str
  "Approval Information: Modified by"
  manuf: str
  "Manufacturer"
  crmshc: float
  "Impedances: Resistance Rm"
  cxstrshc: float
  "Impedances: Stator reactance Xs"
  cxdssshc: float
  "Impedances: Reactance Xm"
  i_1pModel: int
  "Startup model:&0&Split-phase:&1&Capacitor-start:&2&Capacitor-start, capacitor-run"
  Thot: float
  "Stall time: Hot"
  nphase: int
  "No. of phases:1:3"
  i_cage: int
  "Rotor"
  cr: float
  "Capacitor-run capacitance"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  xstr: float
  "Stator reactance Xs"
  rrtrA: float
  "Operating cage/Rotor data: Rotor resistance RrA"
  aslkp: float
  "Slip at stalling point"
  asstl: float
  "Slip at saddle point"
  x0: float
  "Operating cage/Rotor data: Reactance XrA1"
  iansitp: int
  "ANSI type:Auto detection:> 1000 at <= 1800(1500):> 250 at 3600/3000:50-1000 at <=1800(1500):50-250 at 3600(3000):< 50 (Std C37):< 50 (Std 141)"
  cpHeadFold: object
  "Head Folder"
  i_cdisp: int
  "Operating cage/Rotor data: Consider current displacement (squirrel cage rotor)"
  pgn: float
  "Power rating: Rated mechanical power"
  satIm: list
  "Saturation parameter: No load current"
  ugn: float
  "Rated voltage"
  tab_Ipu: list
  "Current"
  xrtrA: float
  "Operating cage/Rotor data: Rotor reactance XrA"
  xzero: float
  "Zero sequence: Reactance"
  amkzn: float
  "Torque at stalling point"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  tab_pf: list
  "Power Factor"
  xtorshc: float
  "Impedance input: X/R locked rotor"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  xdssshc: float
  "Impedance input: Locked rotor reactance"
  gnrl_modif: int
  "Object modified"
  effic: float
  "Efficiency at rated operation"
  rtox: float
  "Consider transient parameter: R/X locked rotor"
  cosn: float
  "Rated power factor"
  aiaznshc: float
  "Impedance input: Locked rotor current (Ilr/In)"
  i_trans: int
  "Consider transient parameter"
  rrs1: float
  "Slip dependent part of RrA at slip=1"
  i_sat: int
  "Main flux saturation:&0&No saturation:&1&Quadratic (SG10/SG12):&2&Exponential (SG10/SG12):&3&Tabular input"
  amstl: float
  "Torque at saddle point"
  J: float
  "Moment of inertia"
  i_freqVar: int
  "Effect of frequency variation (only for Doubly Fed Induction Machine)"
  sg10: float
  "Saturation parameter: SG10"
  charact: list
  "Charact."
  i_optpn: int
  "Power rating"
  iinrush: float
  "Inrush peak current: Ratio Ip/In"
  rs: float
  "Capacitor-start resistance"
  ctmss: float
  "Time constants: Tm"
  dataExtDesc: list
  "Description"
  crstrshc: float
  "Impedances: Stator resistance Rs"
  i_mode: int
  "Input mode"
  puSI: int
  "Current/Torque values in:p.u.:S.I."
  islp: float
  "Current"
  dataExtUnit: list
  "Unit"
  frequ: float
  "Nominal frequency"
  aiazn: float
  "Consider transient parameter: Locked rotor current (Ilr/In)"
  ctdc: float
  "Time constants: Tdc"
  Ibase: float
  "Base current"
  anend: float
  "Rated speed"
  fcharlss: object
  "Frequency dependence of: Inductance L''(f)"
  nslty: int
  "Connection:D:Y:YN"
  tab_w: list
  "Speed"
  typemetadata_version: list
  "Version"
  xstr_aux: float
  "Stator reac. aux. winding"
  xm: float
  "Mag. reactance Xm"
  Tcold: float
  "Stall time: Cold"
  typemetadata_changeLog: list
  "Change Log"
  xrsn: float
  "Slip dependent part of XrA at rated slip"
  crrotshc: float
  "Impedances: Rotor resistance Rr"
  chp: float
  "Power"
  tab_eff: list
  "Efficiency"
  cxrotshc: float
  "Impedances: Rotor reactance Xr"
  cansitp: str
  "ANSI type"
  fcharrstr: object
  "Frequency dependence of: Stator resistance Rs(f)"
  rr: float
  "Capacitor-run resistance"
  istt: int
  "Status of ESB Calculation"
  n_cdisp: int
  "Order of R-L approximation"
  sgn: float
  "Power rating: Rated apparent power"
  tag: float
  "Acceleration time constant"
  xrtrB: float
  "Starting cage: Rotor reactance XrB"
  doc_id: object
  "Additional Data"
  r0: float
  "Operating cage/Rotor data: Resistance RrA1"
  amazn: float
  "Locked rotor torque"
  satSmoothFac: float
  "Saturation parameter: Curve smoothing factor"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  rzero: float
  "Zero sequence: Resistance"
  xmrtr: float
  "Rotor leakage reac. Xrm"
  rrtrA0: float
  "Operating cage/Rotor data: Resistance RrA0"
  tab_TSI: list
  "Torque"
  ishcmax: float
  "Maximum subtransient short-circuit current"
  Tbase: float
  "Base torque"
  tid_: int
  "TimeID"
  nppol: int
  "No of pole pairs"
  coazn: float
  "cos(phi) locked rotor"
  root_id: object
  "Original Location"
  sg12: float
  "Saturation parameter: SG12"
  x1: float
  "Operating cage/Rotor data: Reactance XrA2"
  loc_name: str
  "Name"
  xrtrA0: float
  "Operating cage/Rotor data: Reactance XrA0"
  mslp: float
  "Torque"
  rtoxshc: float
  "Impedance input: R/X locked rotor"
  slp: float
  "Slip"
  fold_id: object
  "In Folder"
  rrtrB: float
  "Starting cage: Rotor resistance RrB"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def CalcElParams(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class TypCtcore(Protocol):
  typemetadata_key: list
  "Type Key"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  manuf: str
  "Manufacturer"
  aclimit: list
  "Accuracy limitfactor"
  Ithr: float
  "Rated short-time current (1s)"
  appr_modif: int
  "Approval Information: Modified"
  for_name: str
  "Foreign Key"
  cpHeadFold: object
  "Head Folder"
  Snom: list
  "Snom"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  gnrl_modif: int
  "Object modified"
  cratios: list
  "Resulting ratio"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  secrat: float
  "Current ratings: Secondary"
  Vmax: list
  "Vmax"
  typemetadata_version: list
  "Version"
  typemetadata_changeLog: list
  "Change Log"
  iopt_sat: str
  "Accuracy parameters according to"
  doc_id: object
  "Additional Data"
  raclass: list
  "Accuracy class"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  prirat: float
  "Current ratings: Primary"
  loc_name: str
  "Name"
  ratios: list
  "Ratio"
  Zb: list
  "Zb"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def AddRatio(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def RemoveRatioByIndex(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def RemoveRatio(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class TypLne(Protocol):
  gline0: float
  "Parameters per Length Zero Sequence: Conductance G0'"
  lline0: float
  "Parameters per Length Zero Sequence: Inductance L0'"
  typemetadata_key: list
  "Type Key"
  iopt_inpshc: str
  "Input Option Temperature Dependency for Complete SHC only"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  fcharR1: object
  "Frequency Dependencies of Pos.-Sequence Impedance: R1'(AC)(f)"
  appr_modby: str
  "Approval Information: Modified by"
  xline: float
  "Parameters per Length 1,2-Sequence: Reactance X'"
  nlnph: int
  "Phases:1:2:3"
  manuf: str
  "Manufacturer"
  rline_tmax: float
  "Parameters per Length 1,2-Sequence: AC-Resistance R' at max. operating temperature"
  cscreen: int
  "Cable Design Parameter With Sheath: Radial Cable Screen"
  rectancond: int
  "Rectangular Conductor"
  touchExp: int
  "Cable Design Parameter: Exposed to touch"
  mlei: str
  "Parameters per Length 1,2-Sequence: Conductor Material"
  side_d: float
  "Rectangular Conductor: Width (d)"
  bline: float
  "Parameters per Length 1,2-Sequence: Susceptance B'"
  nneutral: int
  "Number of Neutrals:0:1"
  Ithr: float
  "Rated Short-Time (1s) Current (Conductor)"
  appr_modif: int
  "Approval Information: Modified"
  picln: float
  "Inrush Peak Current: Ratio Ip/In"
  for_name: str
  "Foreign Key"
  rpnline: float
  "Parameters per Length, Phase-Neutral Coupling: AC-Resistance Rpn'"
  fcharL1: object
  "Frequency Dependencies of Pos.-Sequence Impedance: L1'(f)"
  cpHeadFold: object
  "Head Folder"
  systp: int
  "System Type:AC:DC"
  fcharL0: object
  "Frequency Dependencies of Zero-Sequence Impedance: L0'(f)"
  bpnline: float
  "Parameters per Length, Phase-Neutral Coupling: Susceptance Bpn'"
  cohl_: int
  "Cable / OHL:Cable:Overhead Line"
  aohl_: str
  "Cable / OHL"
  lnline: float
  "Parameters per Length, Neutral: Inductance Ln'"
  cnline: float
  "Parameters per Length, Neutral: Capacitance Cn'"
  rnline: float
  "Parameters per Length, Neutral: AC-Resistance Rn'"
  desc: list
  "Description"
  fcharC0: object
  "Frequency Dependency of Zero-Sequence Capacitance: C0'(f)"
  iSchemeStatus: int
  "Scheme Status"
  InomAir: float
  "Rated Current (in air)"
  sline: float
  "Rated Current"
  twtln: float
  "Maximum Time"
  oid_: int
  "ObjectID"
  appr_status: int
  "Approval Information: Status"
  bline0: float
  "Parameters per Length Zero Sequence: Susceptance B0'"
  gnrl_modif: int
  "Object modified"
  xpnline: float
  "Parameters per Length, Phase-Neutral Coupling: Reactance Xpn'"
  frnom: float
  "Nominal Frequency"
  pitln: float
  "Inrush Peak Current: Maximum Time"
  iopt_inp: str
  "Input Option Temperature Dependency for LDF, RMS and EMT calculations"
  bett: float
  "Operating Temp."
  rtemp: float
  "Max. End Temperature"
  charact: list
  "Charact."
  gline: float
  "Parameters per Length 1,2-Sequence: Conductance G'"
  dataExtDesc: list
  "Description"
  Ices: float
  "Parameters per Length Zero Sequence: Earth-Fault Current"
  miso: str
  "Insulation Material"
  rlin1: float
  "Loop Resistance  (sev)"
  slin1: float
  "Rated Current (1.)"
  slin2: float
  "Load Current (*In)"
  xline0: float
  "Parameters per Length Zero Sequence: Reactance X0'"
  dataExtUnit: list
  "Unit"
  typemetadata_version: list
  "Version"
  carmour: int
  "Cable Design Parameter With Sheath: Armoured Cable"
  typemetadata_changeLog: list
  "Change Log"
  alpha: float
  "Parameters per Length 1,2-Sequence: Temperature Coefficient"
  shins: int
  "Cable Design Parameter With Sheath: Sheath Insulation Material"
  cpnline: float
  "Parameters per Length, Phase-Neutral Coupling: Capacitance Cpn'"
  lodln: str
  "Type of Load"
  lpnline: float
  "Parameters per Length, Phase-Neutral Coupling: Inductance Lpn'"
  shtyp: int
  "Cable Design Parameter With Sheath: Sheath Type:Non-Metallic:Metallic"
  fcharR0: object
  "Frequency Dependencies of Zero-Sequence Impedance: R0'(AC)(f)"
  tline0: float
  "Parameters per Length Zero Sequence: Ins. Factor"
  twcln: float
  "Ratio It/In"
  uline: float
  "Rated Voltage"
  xnline: float
  "Parameters per Length, Neutral: Reactance Xn'"
  imiso: int
  "Cable Design Parameter: Insulation Material:PVC:XLPE:Mineral:Paper:EPR"
  fr_sheath: int
  "Cable Design Parameter: With Sheath"
  lline: float
  "Parameters per Length 1,2-Sequence: Inductance L'"
  lcost: float
  "Line Cost"
  bnline: float
  "Parameters per Length, Neutral: Susceptance Bn'"
  cline: float
  "Parameters per Length 1,2-Sequence: Capacitance C'"
  doc_id: object
  "Additional Data"
  tline: float
  "Parameters per Length 1,2-Sequence: Ins. Factor"
  rline: float
  "Parameters per Length 1,2-Sequence: AC-Resistance R'(20C)"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  rline0: float
  "Parameters per Length Zero Sequence: AC-Resistance R0'"
  pStoch: object
  "Stochastic model"
  side_b: float
  "Rectangular Conductor: Height (b)"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  qurs: float
  "Nominal Cross Section"
  xlin1: float
  "Loop Reactance (sev)"
  iopt_cnd: str
  "Cable Design Parameter: Cable Cores"
  loc_name: str
  "Name"
  cline0: float
  "Parameters per Length Zero Sequence: Capacitance C0'"
  fold_id: object
  "In Folder"
  fcharC1: object
  "Frequency Dependency of Pos.-Sequence Capacitance: C1'(f)"
  tmax: float
  "Parameters per Length 1,2-Sequence: Max. Operating Temperature"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def IsCable(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class TypMdl(Protocol):
  cauthor: list
  "Author"
  stateStart: list
  "Start"
  cfilePath: str
  "Compiled model: File path"
  inputMax: list
  "Max"
  inputStart: list
  "Start"
  isEncrypted: int
  "Encrypted model flag"
  coutputMax: list
  "Max"
  connectSecondBlock: list
  "Second model"
  connectFirstConnector: list
  "First connector"
  inputName: list
  "Name"
  coutputDesc: list
  "Description"
  configScript: object
  "Initialisation: Configuration Script"
  chr_name: str
  "Characteristic Name"
  cstateMin: list
  "Min"
  interName: list
  "Name"
  annotation: list
  "Annotation"
  cCheckSumFMU: list
  "DLL"
  cinputType: list
  "Base Type"
  ccopyright: list
  "Copyright"
  interMin: list
  "Min"
  coutputSize: list
  "Size(s)"
  coutputAll: list
  "Outputs"
  connectSecondConnector: list
  "Second connector"
  cinterUnit: list
  "Unit"
  outputMax: list
  "Max"
  inputAnnot: list
  "Annotation"
  cstateName: list
  "Name"
  cparamUnit: list
  "Unit"
  desc: list
  "Description"
  stateDesc: list
  "Description"
  initAlgorithm: list
  "Algorithm at first tick"
  cinputName: list
  "Name"
  cinputSize: list
  "Size(s)"
  connectFirstBlock: list
  "First model"
  oid_: int
  "ObjectID"
  cstateStart: list
  "Start"
  coutputUnit: list
  "Unit"
  gnrl_modif: int
  "Object modified"
  cstateUnit: list
  "Unit"
  paramMax: list
  "Max"
  blockName: list
  "Name"
  logFmuVals: list
  "FMU: On/Off"
  cinputVariability: list
  "Variability"
  inputSize: list
  "Size(s)"
  dataExtDesc: list
  "Description"
  interMax: list
  "Max"
  cinterMax: list
  "Max"
  logFmuNames: list
  "Names"
  inputType: list
  "Base Type"
  outputVariability: list
  "Variability"
  dataExtUnit: list
  "Unit"
  inputUnit: list
  "Unit"
  typemetadata_version: list
  "Version"
  cstateType: list
  "Base Type"
  algorithm: list
  "Algorithm after first tick"
  typemetadata_changeLog: list
  "Change Log"
  connectAnnot: list
  "Annotation"
  initEquation: list
  "Initial equations"
  cinterName: list
  "Name"
  stateType: list
  "Base Type"
  paramType: list
  "Base Type"
  showDef: int
  "Language specification: Show default/start values of parameters/variables in Variable Declarations"
  cinterMin: list
  "Min"
  inputVariability: list
  "Variability"
  blockDesc: list
  "Description"
  showMinMax: int
  "Language specification: Show minimum/maximum values of variables in Variable Declarations"
  modelType: int
  "Compiled model"
  pid_: int
  "ProjectID"
  author: list
  "Author"
  cinputAll: list
  "Inputs"
  cparamMin: list
  "Min"
  outputSize: list
  "Size(s)"
  aCategory: str
  "Category"
  cparamSize: list
  "Size(s)"
  cstateSize: list
  "Size(s)"
  fold_id: object
  "In Folder"
  outputUnit: list
  "Unit"
  noArrayFmu: int
  "Do not consider arrays"
  typemetadata_key: list
  "Type Key"
  inputDesc: list
  "Description"
  cparamName: list
  "Name"
  cGlobalAutoCompHash: list
  "Global automatic compilation hash"
  outputAnnot: list
  "Annotation"
  stateName: list
  "Name"
  cCheckSum: list
  "Checksum"
  interDesc: list
  "Description"
  interSize: list
  "Size(s)"
  dat_src: str
  "Data source"
  blockAnnot: list
  "Annotation"
  outputMin: list
  "Min"
  singleInstanceType: int
  "Single-instance type"
  interType: list
  "Base Type"
  cparamMax: list
  "Max"
  i_partinc: int
  "Partial initialisation in case of deadlock"
  cinterStart: list
  "Start"
  outputStart: list
  "Start"
  cCategory: str
  "Category"
  stateUnit: list
  "Unit"
  cinterDesc: list
  "Description"
  cinputDesc: list
  "Description"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  modMethod: int
  "Method:&0&Hybrid Method:&1&Clocked"
  blockTypeRef: list
  "Type"
  cinterSize: list
  "Size(s)"
  coutputVariability: list
  "Variability"
  cpHeadFold: object
  "Head Folder"
  stateMax: list
  "Max"
  interStart: list
  "Start"
  paramSize: list
  "Size(s)"
  iSchemeStatus: int
  "Scheme Status"
  coutputMin: list
  "Min"
  cinputMax: list
  "Max"
  autoCompCheckSum: list
  "Automatic compilation checksum"
  blockParams: list
  "Parameters"
  paramUnit: list
  "Unit"
  cGlobalAnnotationHash: list
  "Global annotation hash"
  cstateMax: list
  "Max"
  outputDesc: list
  "Description"
  cinputStart: list
  "Start"
  cparamDefault: list
  "Default"
  cstateDesc: list
  "Description"
  charact: list
  "Charact."
  cinputMin: list
  "Min"
  cinputUnit: list
  "Unit"
  level: int
  "Model level"
  cGlobalEquationHash: list
  "Global equations' hash"
  equation: list
  "Equations"
  paramDefault: list
  "Default"
  cparamType: list
  "Base Type"
  cparamAll: list
  "Parameters"
  ctypemetadata_version: list
  "Version"
  cGlobalBlockParamHash: list
  "Global block parametrisation hash"
  cGlobalParameterHash: list
  "Global parametrisation hash"
  outputType: list
  "Base Type"
  interUnit: list
  "Unit"
  coutputType: list
  "Base Type"
  paramMin: list
  "Min"
  gnrl_modby: str
  "Object modified by"
  copyright: list
  "Copyright"
  filePath: str
  "File path"
  coutputName: list
  "Name"
  stateMin: list
  "Min"
  cdesc: list
  "Description"
  stateSize: list
  "Size(s)"
  tid_: int
  "TimeID"
  outputName: list
  "Name"
  root_id: object
  "Original Location"
  coutputStart: list
  "Start"
  inputMin: list
  "Min"
  loc_name: str
  "Name"
  paramDesc: list
  "Description"
  cparamDesc: list
  "Description"
  cGlobalAdditionalDataHash: list
  "Global additional data hash"
  cinterType: list
  "Base Type"
  paramName: list
  "Name"


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def Delete(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetInom(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def Check(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Compile(*args):
    ...

  def Pack(*args):
    ...

  def GetParent(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetImpedance(*args):
    ...



class TypQdsl(Protocol):
  resDesc: list
  "Description"
  objType: list
  "Usage"
  typemetadata_key: list
  "Type Key"
  modifytime: int
  "Last Modified"
  version: str
  "Version"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  varDesc: list
  "Description"
  xDesc: list
  "Long Description"
  eqLdf: list
  "Load flow equations"
  displayModule: list
  "Third Party Licence (will only be applied after encryption!): Module"
  eqQds: list
  "Quasi-dynamic equations"
  for_name: str
  "Foreign Key"
  csigVarName: list
  "Variable name"
  varName: list
  "Name"
  cpHeadFold: object
  "Head Folder"
  resName: list
  "Name"
  sigClassName: list
  "Class name"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  resUnit: list
  "Unit"
  gnrl_modif: int
  "Object modified"
  display3rdParty: list
  "Third Party Licence"
  charact: list
  "Charact."
  sigVarName: list
  "Variable name"
  dataExtDesc: list
  "Description"
  objName: list
  "Name"
  objDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  sigType: list
  "Usage"
  typemetadata_version: list
  "Version"
  typemetadata_changeLog: list
  "Change Log"
  init: list
  "Initialisation"
  ctrlLdf: list
  "Control actions for Load Flow"
  sigBusName: list
  "Bus/Phase name"
  xNotes: list
  "Release Notes"
  isLinearModel: int
  "Linear model"
  ctrlQds: list
  "Control actions for Quasi-Dynamic Simulation"
  shortDesc: str
  "Short Description"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  author: str
  "Author"
  company: str
  "Company"
  varType: list
  "Variable type"
  varUnit: list
  "Unit"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  sigName: list
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def SetThirdPartyModule(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def IsEncrypted(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def Encrypt(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...

  def ResetThirdPartyModule(*args):
    ...



class TypTr2(Protocol):
  r0pu_lho: float
  "Zero Sequence Impedance: LV-Resistance r0 (HV open)"
  pitt1: float
  "Inrush Peak Current: Max. Time (1)"
  twct2: float
  "Ratio It/In"
  x1putmx: float
  "Tap dependent impedance: x1 (max. tap)"
  iInterPol: int
  "Magnetising Reactance: Interpolation:spline:piecewise linear"
  itrdl: float
  "Distribution of Leakage Reactances (p.u.): x,Pos.Seq. HV-Side"
  chr_name: str
  "Characteristic Name"
  uk0_hls: float
  "Zero Sequence Impedance: HV-SHC-Voltage uk0 (LV short-circuit)"
  appr_modby: str
  "Approval Information: Modified by"
  manuf: str
  "Manufacturer"
  ansiclass: str
  "Class:OA:FA:FOA"
  dphitap2: float
  "Tap Changer 2: Additional Angle per Tap"
  itrtype: int
  "Transformer Type:Liquid-Immersed:Dry-Type"
  utrn_l: float
  "Rated Voltage: LV-Side"
  xtortmn: float
  "Tap dependent impedance: X/R (min. tap)"
  fdtr2r: str
  "Internal"
  l1pu: float
  "Frequency dependencies of positive sequence impedance: Inductance l1"
  cFrolich: float
  "Frolich equation coefficient c"
  tr2cn_l: str
  "Vector Group: LV-Side:Y :YN:Z :ZN:D"
  r0putmn: float
  "Tap dependent impedance: r0 (min. tap)"
  appr_modif: int
  "Approval Information: Modified"
  psi0: float
  "Magnetising Reactance: Knee Flux"
  cknee: float
  "Knee Current"
  uk0_lho: float
  "Zero Sequence Impedance: LV-SHC-Voltage uk0 (HV open)"
  x0pu: float
  "Zero Sequence Impedance: Reactance x0"
  r0pu_hls: float
  "Zero Sequence Impedance: HV-Resistance r0 (LV short-circuit)"
  r0delta: float
  "Delta Winding, r0"
  strn: float
  "Rated Power"
  itrdr_lv: float
  "Distribution of Leakage Resistances (p.u.): r,Pos.Seq. LV-Side"
  x1pu: float
  "Positive Sequence Impedance: Reactance x1"
  twtt2: float
  "Max. Time"
  dutap: float
  "Tap Changer 1: Additional Voltage per Tap"
  desc: list
  "Description"
  oid_: int
  "ObjectID"
  ur0delta: float
  "Delta Winding, Re(uk0)"
  x0tor0delta: float
  "Delta Winding, X0/R0"
  gnrl_modif: int
  "Object modified"
  phitr2: float
  "Tap Changer 2: Phase of du"
  satcur: list
  "Magnetising Reactance: Current (peak)"
  strnfc: float
  "Rated Power (forced cooling)"
  tapchtype2: int
  "Tap Changer 2: Type:Ratio/Asym. Phase Shifter:Ideal Phase Shifter"
  eddypc: float
  "Data for K-factor, Factor-K, FHL and skin effect: Ratio: winding eddy current-/copper losses"
  ntpmx: int
  "Tap Changer 1: Maximum Position"
  dataExtDesc: list
  "Description"
  tr2cn_h: str
  "Vector Group: HV-Side:Y :YN:Z :ZN:D"
  tapchtype: int
  "Tap Changer 1: Type:Ratio/Asym. Phase Shifter:Ideal Phase Shifter:Sym. Phase Shifter"
  pict1: float
  "Inrush Peak Current: Ratio Ip/In (1)"
  dataExtUnit: list
  "Unit"
  oltc2: int
  "On-load Tap Changer 2"
  zx0hl_l: float
  "Distribution of Zero Sequ. Leakage-Impedances: z, Zero Sequ. LV-Side"
  x0tor0: float
  "Zero Sequence Impedance: Ratio X0/R0"
  l0pu: float
  "Frequency dependencies of zero sequence impedance: Inductance l0"
  typemetadata_version: list
  "Version"
  uk0tr: float
  "Zero Sequence Impedance: Short-Circuit Voltage uk0"
  typemetadata_changeLog: list
  "Change Log"
  x0putmn: float
  "Tap dependent impedance: x0 (min. tap)"
  bm1: float
  "Frequency dependencies of magnetising admittance: 1/lm"
  fcharl0: object
  "Frequency dependencies of zero sequence impedance: l0(f)"
  nntap02: int
  "Tap Changer 2: Neutral Position"
  tap_side: int
  "Tap Changer 1: at Side:HV:LV"
  x0delta: float
  "Delta Winding, x0"
  itratioadpt: int
  "Transformer Ratio Adaptation"
  ur0_hlo: float
  "Zero Sequence Impedance: HV-SHC-Voltage Re(uk0) (LV open)"
  uk0rtmn: float
  "Tap dependent impedance: Re(uk0) (min. tap)"
  doc_id: object
  "Additional Data"
  x0pu_lho: float
  "Zero Sequence Impedance: LV-Reactance x0 (HV open)"
  uktrr: float
  "Positive Sequence Impedance: SHC-Voltage (Re(uk)) ukr"
  x1putmn: float
  "Tap dependent impedance: x1 (min. tap)"
  ur0tr: float
  "Zero Sequence Impedance: SHC-Voltage (Re(uk0)) uk0r"
  pid_: int
  "ProjectID"
  uktr: float
  "Positive Sequence Impedance: Short-Circuit Voltage uk"
  pStoch: object
  "Stochastic model"
  oltc: int
  "On-load Tap Changer"
  it0mt: int
  "Type"
  ksat: int
  "Magnetising Reactance: Saturation Exponent"
  itapch: int
  "Tap Changer 1"
  nntap0: int
  "Tap Changer 1: Neutral Position"
  ntpmn: int
  "Tap Changer 1: Minimum Position"
  uk0tmx: float
  "Tap dependent impedance: uk0 (max. tap)"
  x0putmx: float
  "Tap dependent impedance: x0 (max. tap)"
  fold_id: object
  "In Folder"
  dutap2: float
  "Tap Changer 2: Additional Voltage per Tap"
  iIntDelta: int
  "Vector Group: Internal Delta Winding"
  typemetadata_key: list
  "Type Key"
  nt2ag: float
  "Vector Group: Phase Shift"
  bFrolich: float
  "Frolich equation coefficient b"
  r0pu_hlo: float
  "Zero Sequence Impedance: HV-Resistance r0 (LV open)"
  rtox0_n: float
  "Zero Sequence Magnetising Impedance: Mag. R/X"
  x0pu_hls: float
  "Zero Sequence Impedance: HV-Reactance x0 (LV short-circuit)"
  xmair: float
  "Magnetising Reactance: Saturated Reactance"
  Lwidth: float
  "Magnetising Reactance Hysteresis: Loop width"
  dat_src: str
  "Data source"
  fcharr0: object
  "Frequency dependencies of zero sequence impedance: r0(f)"
  xtortmx: float
  "Tap dependent impedance: X/R (max. tap)"
  uktmx: float
  "Tap dependent impedance: uk (max. tap)"
  pcutr: float
  "Positive Sequence Impedance: Copper Losses"
  utrn_h: float
  "Rated Voltage: HV-Side"
  itrmt: int
  "Magnetising Reactance: Type"
  satcue: list
  "Magnetising Reactance: Current (RMS)"
  pfe: float
  "Magnetising Impedance: No Load Losses"
  pcutmx: float
  "Tap dependent impedance: Pcu (max. tap)"
  uk0_hlo: float
  "Zero Sequence Impedance: HV-SHC-Voltage uk0 (LV open)"
  xtor: float
  "Positive Sequence Impedance: Ratio X/R"
  r1putmx: float
  "Tap dependent impedance: r1 (max. tap)"
  ur0_lho: float
  "Zero Sequence Impedance: LV-SHC-Voltage Re(uk0) (HV open)"
  satvol: list
  "Magnetising Reactance: Voltage (RMS)"
  uk0tmn: float
  "Tap dependent impedance: uk0 (min. tap)"
  for_name: str
  "Foreign Key"
  iIntPola: int
  "Magnetising Reactance: Interpolation:spline:piecewise linear"
  fcharr1: object
  "Frequency dependencies of positive sequence impedance: r1(f)"
  r1pu: float
  "Positive Sequence Impedance: Resistance r1"
  cpHeadFold: object
  "Head Folder"
  mseFrolich: float
  "Frolich equation, mean squared error"
  pict2: float
  "Inrush Peak Current: Ratio Ip/In (2)"
  pcutmn: float
  "Tap dependent impedance: Pcu (min. tap)"
  itapzdep: int
  "Tap dependent impedance"
  itrldf: int
  "Magnetising Reactance: Type"
  zx0hl_n: float
  "Zero Sequence Magnetising Impedance: Mag. Impedance/uk0"
  ntpmx2: int
  "Tap Changer 2: Maximum Position"
  iSchemeStatus: int
  "Scheme Status"
  r1putmn: float
  "Tap dependent impedance: r1 (min. tap)"
  ukrtmn: float
  "Tap dependent impedance: Re(uk) (min. tap)"
  pT: str
  "Voltage Range"
  vecgrp: str
  "Vector Group: Name"
  zx0hl_h: float
  "Distribution of Zero Sequ. Leakage-Impedances: z, Zero Sequ. HV-Side"
  uk0delta: float
  "Delta Winding, uk0"
  appr_status: int
  "Approval Information: Status"
  smoothfac: float
  "Magnetising Reactance: Smoothing Factor"
  ur0_hls: float
  "Zero Sequence Impedance: HV-SHC-Voltage Re(uk0) (LV short-circuit)"
  frnom: float
  "Nominal Frequency"
  ukrtmx: float
  "Tap dependent impedance: Re(uk) (max. tap)"
  iLimb: int
  "Magnetising Reactance: Core:&3&3 Limb:&5&5 Limb"
  pitt2: float
  "Inrush Peak Current: Max. Time (2)"
  aFrolich: float
  "Frolich equation coefficient a"
  xmlin: float
  "Magnetising Reactance: Linear Reactance"
  fcharbm: object
  "Frequency dependencies of magnetising admittance: 1/lm(f)"
  gm1: float
  "Frequency dependencies of magnetising admittance: gm"
  dphitap: float
  "Tap Changer 1: Additional Angle per Tap"
  charact: list
  "Charact."
  iFit: int
  "Magnetising Reactance: Data fitting:Piecewise linear:Frolich:Modified Frolich"
  ntpmn2: int
  "Tap Changer 2: Minimum Position"
  iFinalSlope: int
  "Magnetising Reactance: Set final slope (peak values)"
  xsatFrolich: float
  "Frolich equation saturated reactance (p.u.)"
  x0tor0tmn: float
  "Tap dependent impedance: X0/R0 (min. tap)"
  uk0rtmx: float
  "Tap dependent impedance: Re(uk0) (max. tap)"
  phitr: float
  "Tap Changer 1: Phase of du"
  xtr0_hlo: float
  "Zero Sequence Impedance: HV-Ratio X0/R0 (LV open)"
  fcharl1: object
  "Frequency dependencies of positive sequence impedance: l1(f)"
  curmg: float
  "Magnetising Impedance: No Load Current"
  uktmn: float
  "Tap dependent impedance: uk (min. tap)"
  iTapLoading: int
  "Tap dependent rating: Configuration:No dependency (constant current):Full Capacity Below Normal (FCBN):Reduced Capacity Below Normal (RCBN)"
  xtr0_hls: float
  "Zero Sequence Impedance: HV-Ratio X0/R0 (LV short-circuit)"
  r0pu: float
  "Zero Sequence Impedance: Resistance r0"
  xtr0_lho: float
  "Zero Sequence Impedance: LV-Ratio X0/R0 (HV open)"
  fchargm: object
  "Frequency dependencies of magnetising admittance: gm(f)"
  tap_side2: int
  "Tap Changer 2: at Side:HV:LV"
  satflux: list
  "Magnetising Reactance: Flux (peak)"
  gnrl_modby: str
  "Object modified by"
  smoothf: float
  "Magnetising Reactance: Smoothing Factor"
  nt2ph: int
  "Technology"
  itapch2: int
  "Tap Changer 2"
  iHyster: int
  "Magnetising Reactance Hysteresis: Model:None:History Independent"
  tid_: int
  "TimeID"
  itrdl_lv: float
  "Distribution of Leakage Reactances (p.u.): x,Pos.Seq. LV-Side"
  root_id: object
  "Original Location"
  x0tor0tmx: float
  "Tap dependent impedance: X0/R0 (max. tap)"
  x0pu_hlo: float
  "Zero Sequence Impedance: HV-Reactance x0 (LV open)"
  loc_name: str
  "Name"
  r0putmx: float
  "Tap dependent impedance: r0 (max. tap)"
  itrdr: float
  "Distribution of Leakage Resistances (p.u.): r,Pos.Seq. HV-Side"


  def GetChildren(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def Delete(*args):
    ...

  def IsOutOfService(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def GetInom(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def GetZeroSequenceHVLVT(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetContents(*args):
    ...

  def IsInFeeder(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetParent(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def GetImpedance(*args):
    ...



class VisBdia(Protocol):
  ResFile: list
  "Result File"
  ileg: int
  "Label"
  typ_id: object
  "Type"
  aleg: str
  "User Label"
  Depth: int
  "Visible"
  pObjs: list
  "Element"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  AutoCol: int
  "Automatic: Colour"
  for_name: str
  "Foreign Key"
  iBordFont: int
  "Font for frame label"
  cpHeadFold: object
  "Head Folder"
  y_min: float
  "Scale Limits: Minimum"
  Brush: list
  "Brush Style"
  Color: list
  "Colour"
  outserv: int
  "Out of Service"
  ishort: int
  "Standard Legend uses"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  Stack: float
  "Priority Level"
  gnrl_modif: int
  "Object modified"
  yvar: str
  "Variable: y"
  Utils: list
  "Contents"
  Position: list
  "Position"
  charact: list
  "Charact."
  nupd: int
  "Number of values between update"
  xvar: str
  "Variable: x"
  shw_leg: int
  "Show Legend"
  y_max: float
  "Scale Limits: Maximum"
  y_fit: int
  "Scale: Adapt Scale"
  gnrl_modby: str
  "Object modified by"
  sObjs: list
  "Object"
  pid_: int
  "ProjectID"
  limits: str
  "Show"
  AutoBrs: int
  "Automatic: Brush"
  FrmVis: int
  "Frame"
  tid_: int
  "TimeID"
  y_map: int
  "Scale: Scale"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  userdesc: list
  "Variable Description"


  def GetContents(*args):
    ...

  def SetScaleY(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SetYVariable(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Clear(*args):
    ...

  def AddObjs(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def SetXVariable(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def AddResObjs(*args):
    ...

  def GetImpedance(*args):
    ...



class VisDraw(Protocol):
  ResFile: list
  "Result File"
  vVarX: list
  "x-Variable"
  ileg: int
  "Frame: Label"
  typ_id: object
  "Type"
  aleg: str
  "Frame: User Label"
  Depth: int
  "Visible"
  vWidth: list
  "Width"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  gStyle: list
  "Style"
  x_start: int
  "x-Min."
  impResName: str
  "Sub-Result Name"
  autos: int
  "Auto Scale"
  AutoCol: int
  "Automatic: Colour"
  AutoWdt: int
  "Automatic: Line Width"
  for_name: str
  "Foreign Key"
  vColor: list
  "Colour"
  x_end: int
  "x-Max."
  iBordFont: int
  "Font for frame label"
  cpHeadFold: object
  "Head Folder"
  result: object
  "Branch impedance calculation: Results"
  shownResult: list
  "Branch impedance calculation: Displayed"
  outserv: int
  "Out of Service"
  ishort: int
  "Standard Legend uses"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gColor: list
  "Colour"
  vStyle: list
  "Style"
  Stack: float
  "Priority Level"
  gnrl_modif: int
  "Object modified"
  icircles: int
  "Representation of Coordinates"
  yvar: list
  "y-Variable"
  scale: list
  "Scale"
  Utils: list
  "Contents"
  shw_arr: int
  "Show direction arrows for curves"
  Position: list
  "Position"
  gObjs: list
  "Element"
  charact: list
  "Charact."
  pPath: object
  "Path"
  tmin: float
  "Range of Results: Minimum"
  unit: list
  "Unit"
  xvar: list
  "x-Variable"
  shw_leg: int
  "Show Legend"
  y_end: int
  "y-Max."
  vObjs: list
  "Element"
  vVarY: list
  "y-Variable"
  tickDist: int
  "Distance between Ticks"
  userdesc: list
  "Description"
  y_start: int
  "y-Min."
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  FrmVis: int
  "Frame"
  iAll: int
  "Range of Results: Complete"
  tid_: int
  "TimeID"
  gWidth: list
  "Width"
  AutoStl: int
  "Automatic: Line Style"
  root_id: object
  "Original Location"
  distance: int
  "Distance"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  cIdx: list
  "Curve index"
  tmax: float
  "Range of Results: Maximum"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def DoAutoScaleOnCharacteristics(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Clear(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def DoAutoScaleOnAll(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def DoAutoScaleOnImpedances(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AddRelay(*args):
    ...

  def AttributeType(*args):
    ...

  def AddRelays(*args):
    ...

  def DoAutoScaleY(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def CentreOrigin(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DoAutoScaleX(*args):
    ...

  def GetImpedance(*args):
    ...



class VisHrm(Protocol):
  x_max: float
  "Scale Limits: Maximum"
  Style: list
  "Style"
  ResFile: list
  "Result File"
  x_fit: int
  "Scale: Adapt Scale"
  ileg: int
  "Label"
  typ_id: object
  "Scale: Type"
  aleg: str
  "User Label"
  Depth: int
  "Visible"
  pObjs: list
  "Element"
  mag: list
  "Magnitude"
  phi: list
  "Angle"
  use_x: int
  "Scale: Use local xAxis"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  x_map: int
  "Scale: Scale"
  Phi: list
  "Angle"
  AutoWdt: int
  "Automatic: Line Width"
  AutoCol: int
  "Automatic: Colour"
  auto_yscl: int
  "Scale: Auto Scale"
  for_name: str
  "Foreign Key"
  iBordFont: int
  "Font for frame label"
  cpHeadFold: object
  "Head Folder"
  y_min: float
  "Scale Limits: Minimum"
  Color: list
  "Colour"
  outserv: int
  "Out of Service"
  ishort: int
  "Standard Legend uses"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  Mag: list
  "Magnitude"
  sh_off: int
  "Scale Adapt Scale: Show Deviation from Offset"
  Stack: float
  "Priority Level"
  gnrl_modif: int
  "Object modified"
  Utils: list
  "Contents"
  xgrid: int
  "Grid Lines"
  xgrid_item: str
  "Reference"
  Position: list
  "Position"
  charact: list
  "Charact."
  iopt_tim: int
  "Time Unit"
  shw_leg: int
  "Show Legend"
  Width: list
  "Width"
  y_max: float
  "Scale Limits: Maximum"
  y_off: float
  "Scale Adapt Scale: Offset"
  xgrid_count: int
  "Count"
  userdesc: list
  "Variable Description"
  x_min: float
  "Scale Limits: Minimum"
  use_y: int
  "Scale: Use local Axis"
  y_fit: int
  "Scale: Adapt Scale"
  gnrl_modby: str
  "Object modified by"
  isteps: int
  "Draw Steps"
  pid_: int
  "ProjectID"
  FrmVis: int
  "Frame"
  tid_: int
  "TimeID"
  auto_xscl: int
  "Scale: Auto Scale"
  AutoStl: int
  "Automatic: Line Style"
  root_id: object
  "Original Location"
  x_trg: float
  "Scale Adapt Scale: Trigger"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  cIdx: list
  "ID for Curve (used for Labels)"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Clear(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetDefScaleX(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def SetAutoScaleY(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def SetCrvDesc(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetScaleObjY(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetDataSource(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def DoAutoScaleY(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetScaleObjX(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DoAutoScaleX(*args):
    ...

  def SetDefScaleY(*args):
    ...

  def SetAutoScaleX(*args):
    ...

  def GetImpedance(*args):
    ...



class VisMagndiffplt(Protocol):
  x_max: float
  "x-Scale Limits: Maximum"
  x_fit: int
  "x-Scale: Adapt Scale"
  ileg: int
  "Label"
  typ_id: object
  "Type"
  aleg: str
  "User Label"
  Depth: int
  "Visible"
  iopt_sgl: int
  "Show Section of Single Line Graphic"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  gStyle: list
  "Style"
  AutoCol: int
  "Automatic: Colour"
  AutoWdt: int
  "Automatic: Line Width"
  for_name: str
  "Foreign Key"
  gSplit: list
  "Split Relay"
  iBordFont: int
  "Font for frame label"
  cpHeadFold: object
  "Head Folder"
  y_min: float
  "y-Scale Limits: Minimum"
  outserv: int
  "Out of Service"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gColor: list
  "Colour"
  Stack: float
  "Priority Level"
  gnrl_modif: int
  "Object modified"
  Utils: list
  "Contents"
  sglGrp: object
  "Show Section of Single Line Graphic: Graphic"
  Position: list
  "Position"
  gObjs: list
  "Element"
  charact: list
  "Charact."
  shw_leg: int
  "Show Legend"
  y_max: float
  "y-Scale Limits: Maximum"
  x_min: float
  "x-Scale Limits: Minimum"
  y_fit: int
  "y-Scale: Adapt Scale"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  FrmVis: int
  "Frame"
  tid_: int
  "TimeID"
  gWidth: list
  "Width"
  AutoStl: int
  "Automatic: Line Style"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Clear(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Refresh(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AddRelay(*args):
    ...

  def AttributeType(*args):
    ...

  def AddRelays(*args):
    ...

  def DoAutoScaleY(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DoAutoScaleX(*args):
    ...

  def GetImpedance(*args):
    ...



class VisOcplot(Protocol):
  x_max: float
  "x-Scale Limits: Maximum"
  x_fit: int
  "x-Scale: Adapt Scale"
  ileg: int
  "Label"
  typ_id: object
  "Type"
  aleg: str
  "User Label"
  Depth: int
  "Visible"
  iopt_sgl: int
  "Show Section of Single Line Graphic"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  x_map: int
  "x-Scale: Scale"
  gStyle: list
  "Style"
  AutoCol: int
  "Automatic: Colour"
  AutoWdt: int
  "Automatic: Line Width"
  for_name: str
  "Foreign Key"
  gSplit: list
  "Split Relay"
  gRes: list
  "Result File"
  iBordFont: int
  "Font for frame label"
  cpHeadFold: object
  "Head Folder"
  y_min: float
  "y-Scale Limits: Minimum"
  outserv: int
  "Out of Service"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gColor: list
  "Colour"
  Stack: float
  "Priority Level"
  gnrl_modif: int
  "Object modified"
  Utils: list
  "Contents"
  sglGrp: object
  "Show Section of Single Line Graphic: Graphic"
  Position: list
  "Position"
  gObjs: list
  "Element"
  charact: list
  "Charact."
  pPath: object
  "Path"
  shw_leg: int
  "Show Legend"
  y_max: float
  "y-Scale Limits: Maximum"
  x_min: float
  "x-Scale Limits: Minimum"
  y_fit: int
  "y-Scale: Adapt Scale"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  FrmVis: int
  "Frame"
  tid_: int
  "TimeID"
  gWidth: list
  "Width"
  AutoStl: int
  "Automatic: Line Style"
  y_map: int
  "y-Scale: Scale"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Clear(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Refresh(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AddRelay(*args):
    ...

  def AttributeType(*args):
    ...

  def AddRelays(*args):
    ...

  def DoAutoScaleY(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DoAutoScaleX(*args):
    ...

  def GetImpedance(*args):
    ...



class VisPath(Protocol):
  x_max: float
  "x-Scale Limits: Maximum"
  cVar: str
  "Branch Colouring: Variable"
  x_fit: int
  "x-Scale: Adapt Scale"
  ileg: int
  "Label"
  iopt_lim: int
  "Display Filter: Ignore nodes with a y-value smaller than"
  typ_id: object
  "Type"
  aleg: str
  "User Label"
  Depth: int
  "Visible"
  iopt_lvu: int
  "Display min/max voltages of low voltage grid in Loads"
  lim_low: float
  "Display Filter: y"
  iopt_x: int
  "x-Scale: x-Axis"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  gStyle: list
  "Style"
  pStartNode: object
  "Start Node"
  feeder: list
  "Feeder"
  AutoWdt: int
  "Automatic: Line Width"
  AutoCol: int
  "Automatic: Colour"
  for_name: str
  "Foreign Key"
  iBordFont: int
  "Font for frame label"
  UnomMax: float
  "Display Filter: and max."
  cpHeadFold: object
  "Head Folder"
  y_min: float
  "y-Scale Limits: Minimum"
  outserv: int
  "Out of Service"
  UnomFilt: int
  "Display Filter: Show only nodes with Nominal Voltage between"
  iSchemeStatus: int
  "Scheme Status"
  vmax: float
  "Branch Colouring: Upper Limit"
  oid_: int
  "ObjectID"
  gColor: list
  "Colour"
  iopt_par: int
  "Branch Colouring: Parallel Branches"
  Stack: float
  "Priority Level"
  gnrl_modif: int
  "Object modified"
  iopt_bus: int
  "Show Node Names"
  Utils: list
  "Contents"
  Position: list
  "Position"
  charact: list
  "Charact."
  ufiltset: float
  "Nominal Voltage"
  y_map: int
  "y-Scale: Scale"
  shw_leg: int
  "Show Legend"
  y_max: float
  "y-Scale Limits: Maximum"
  colvmin: int
  "Branch Colouring: "
  UnomMin: float
  "Display Filter: min."
  Variable: list
  "Variable"
  x_min: float
  "x-Scale Limits: Minimum"
  colvmax: int
  "Branch Colouring: "
  vmin: float
  "Branch Colouring: Lower Limit"
  y_fit: int
  "y-Scale: Adapt Scale"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  FrmVis: int
  "Frame"
  tid_: int
  "TimeID"
  gWidth: list
  "Width"
  AutoStl: int
  "Automatic: Line Style"
  pSelect: object
  "Feeder"
  xVar: str
  "x-Scale: Variable"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  iopt_ufilt: int
  "Nodes Filter:None:Ignore all smaller:Ignore all greater:only with"
  iopt_xrel: int
  "x-Scale: Relative to Start Node"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def SetScaleY(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetScaleX(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Clear(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def SetAdaptY(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def SetAdaptX(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def DoAutoScaleY(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DoAutoScaleX(*args):
    ...

  def GetImpedance(*args):
    ...



class VisPcompdiffplt(Protocol):
  ileg: int
  "Label"
  typ_id: object
  "Type"
  aleg: str
  "User Label"
  Depth: int
  "Visible"
  iopt_sgl: int
  "Show Section of Single Line Graphic"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  gStyle: list
  "Style"
  x_start: int
  "Axis: x-Min."
  autos: int
  "Axis: Auto Scale"
  AutoCol: int
  "Automatic: Colour"
  AutoWdt: int
  "Automatic: Line Width"
  for_name: str
  "Foreign Key"
  x_end: int
  "x-Max."
  iBordFont: int
  "Font for frame label"
  cpHeadFold: object
  "Head Folder"
  outserv: int
  "Out of Service"
  ishort: int
  "Axis: Standard Legend uses"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gColor: list
  "Colour"
  Stack: float
  "Priority Level"
  gnrl_modif: int
  "Object modified"
  icircles: int
  "Representation of Coordinates"
  scale: list
  "Axis: Scale"
  Utils: list
  "Contents"
  sglGrp: object
  "Show Section of Single Line Graphic: Graphic"
  Position: list
  "Position"
  gObjs: list
  "Element"
  charact: list
  "Charact."
  unit: list
  "Axis: Unit"
  shw_leg: int
  "Show Legend"
  y_end: int
  "y-Max."
  tickDist: int
  "Distance between Ticks"
  y_start: int
  "Axis: y-Min."
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  FrmVis: int
  "Frame"
  tid_: int
  "TimeID"
  gWidth: list
  "Width"
  AutoStl: int
  "Automatic: Line Style"
  root_id: object
  "Original Location"
  distance: int
  "Axis: Distance"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  cIdx: list
  "Curve index"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Clear(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AddRelay(*args):
    ...

  def AttributeType(*args):
    ...

  def AddRelays(*args):
    ...

  def DoAutoScaleY(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def CentreOrigin(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DoAutoScaleX(*args):
    ...

  def GetImpedance(*args):
    ...



class VisPlot(Protocol):
  x_max: float
  "Maximum"
  drawarea: int
  "Draw area below curve"
  Style: list
  "Style"
  ResFile: list
  "Result File"
  funObj: list
  "Function object"
  pObjx: object
  "Element"
  x_fit: int
  "Adapt Scale"
  tRef: list
  "Time Ref."
  iopt_rep: int
  "Representation"
  ileg: int
  "Frame: User defined"
  typ_id: object
  "Type"
  aleg: str
  "Frame: User Label"
  Depth: int
  "Visible"
  pObjs: list
  "Element"
  use_x: int
  "Axis"
  Objectx: list
  "Element"
  dStep: float
  "Resolution: Step Size"
  drel: float
  "Start Value"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  x_map: int
  "Scaling"
  Elements: list
  "Elements"
  iopt_view: int
  "Presentation"
  src_y: int
  "Axis"
  descx: list
  "User defined Legend"
  Height: list
  "Height"
  commonResults: object
  "Results: Common Results"
  AutoCol: int
  "Automatic: Colour"
  AutoWdt: int
  "Automatic: Line Width"
  auto_yscl: int
  "Auto Scale"
  for_name: str
  "Foreign Key"
  itRef: int
  "Results used for time reference"
  iopt_nom: str
  "Normalised Values"
  standard: str
  "Harmonic Limits: Standard"
  iBordFont: int
  "Font for frame label"
  iopt_tim1: int
  "x Variable"
  cpHeadFold: object
  "Head Folder"
  chart: int
  "Chart"
  y_min: float
  "Minimum"
  Brush: list
  "Brush Style"
  Color: list
  "Colour"
  outserv: int
  "Out of Service"
  cy_map: int
  "Scaling"
  ishort: int
  "Legend: Standard Legend uses"
  iSchemeStatus: int
  "Scheme Status"
  iopt_results: int
  "Results"
  oid_: int
  "ObjectID"
  dIsNom: list
  "Norm"
  variable: list
  "Variable"
  sh_off: int
  "Adapt Scale: Show Deviation from Offset"
  Stack: float
  "Priority Level"
  isample: int
  "Resolution"
  gnrl_modif: int
  "Object modified"
  Utils: list
  "Contents"
  Variablex: list
  "Variable"
  limit: str
  "Harmonic Limits: Show"
  xgrid: int
  "Grid Lines"
  xgrid_item: str
  "Reference"
  is_path: int
  "Diagram shows"
  shw_arr: int
  "Show direction arrows for curves"
  Position: list
  "Position"
  charact: list
  "Charact."
  usedfor: str
  "Results Type"
  iopt_tim: int
  "x Axis Variable"
  show_x: int
  "Display x-Axis"
  last: float
  "Range"
  cfunction: list
  "Function"
  shw_leg: int
  "Legend: Position:None:Bottom:Right"
  iopt_thds: int
  "Display corresponding THD or THF"
  Width: list
  "Width"
  show_title: int
  "Display plot name"
  y_max: float
  "Maximum"
  iopt_fund: str
  "Fund. Frequency"
  fullLimits: list
  "Limits"
  y_off: float
  "Adapt Scale: Offset"
  xgrid_count: int
  "Grid Lines: Count"
  Variable: list
  "Variable"
  userdesc: list
  "Variable Description"
  dDistAScale: float
  "Auto Scale: Margin"
  use_y: int
  "Use local Axis"
  x_min: float
  "Minimum"
  y_fit: int
  "Adapt Scale"
  gnrl_modby: str
  "Object modified by"
  isteps: int
  "Presentation: Draw Steps"
  dValNom: list
  "Nom.Value"
  pid_: int
  "ProjectID"
  limits: str
  "Show"
  AutoBrs: int
  "Automatic: Brush Style"
  FrmVis: int
  "Frame"
  tid_: int
  "TimeID"
  auto_xscl: int
  "Auto Scale"
  AutoStl: int
  "Automatic: Line Style"
  y_map: int
  "Scaling"
  root_id: object
  "Original Location"
  x_trg: float
  "Adapt Scale: Trigger"
  summate: int
  "Summate curve values (in reverse order; bottom top)"
  loc_name: str
  "Name"
  show_y: int
  "Display y-Axis"
  vPath: object
  "Path"
  fold_id: object
  "In Folder"
  cIdx: list
  "ID for Curve (used for Labels)"


  def GetContents(*args):
    ...

  def SetScaleY(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def SetXVar(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def GetIntCalcres(*args):
    ...

  def HasResults(*args):
    ...

  def SetScaleX(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def AddResVars(*args):
    ...

  def Clear(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetDefScaleX(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def SetAutoScaleY(*args):
    ...

  def SetAdaptY(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def SetCrvDesc(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetScaleObjY(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetDataSource(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def SetAdaptX(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AddVars(*args):
    ...

  def AttributeType(*args):
    ...

  def DoAutoScaleY(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetScaleObjX(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DoAutoScaleX(*args):
    ...

  def SetDefScaleY(*args):
    ...

  def SetAutoScaleX(*args):
    ...

  def GetImpedance(*args):
    ...



class VisPlot2(Protocol):
  y2_off: float
  "Adapt Scale: Offset"
  x_max: float
  "Maximum"
  cWidth: list
  "Width"
  pObjx: object
  "Element"
  Style: list
  "Style"
  ResFile: list
  "Result File"
  cStyle2: list
  "Style"
  x_fit: int
  "Adapt Scale"
  iopt_y2: int
  "Use second y Axis, Scale"
  tid_: int
  "TimeID"
  ileg: int
  "Frame: User defined"
  typ_id: object
  "Type"
  aleg: str
  "Frame: User Label"
  Depth: int
  "Visible"
  pObjs: list
  "Element"
  use_y2: int
  "Use local Axis"
  use_x: int
  "Axis"
  drel: float
  "Start Value"
  dat_src: str
  "Data source"
  cdIsNom: list
  "Norm"
  chr_name: str
  "Characteristic Name"
  x_map: int
  "Scaling"
  cdIsNom2: list
  "Norm"
  cVariable: list
  "Variable"
  src_y: int
  "Axis"
  cpObjs2: list
  "Element"
  descx: list
  "User defined Legend"
  cResFile2: list
  "Result File"
  AutoCol: int
  "Automatic (y1/y2): Colour"
  AutoWdt: int
  "Automatic (y1/y2): Line Width"
  auto_yscl: int
  "Auto Scale (y1/y2)"
  for_name: str
  "Foreign Key"
  cuserdesc2: list
  "Variable Description"
  iopt_nom: str
  "Normalised Values"
  iBordFont: int
  "Font for frame label"
  iopt_tim1: int
  "x Variable"
  cpHeadFold: object
  "Head Folder"
  chart: int
  "Chart"
  y_min: float
  "Minimum"
  cpObjs: list
  "Element"
  Color: list
  "Colour"
  iPlot: list
  "Axis Index"
  outserv: int
  "Out of Service"
  ishort: int
  "Legend: Standard Legend uses"
  cdValNom: list
  "Nom.Value"
  iSchemeStatus: int
  "Scheme Status"
  cdValNom2: list
  "Nom.Value"
  oid_: int
  "ObjectID"
  dIsNom: list
  "Norm"
  Stack: float
  "Priority Level"
  gnrl_modif: int
  "Object modified"
  src_y2: int
  "Axis"
  Utils: list
  "Contents"
  Variablex: list
  "Variable"
  y2_fit: int
  "Adapt Scale"
  xgrid: int
  "Grid Lines"
  xgrid_item: str
  "Reference"
  shw_arr: int
  "Show direction arrows for curves"
  cResFile: list
  "Result File"
  Position: list
  "Position"
  charact: list
  "Charact."
  usedfor: str
  "Results Type"
  iopt_tim: int
  "x Axis Variable"
  y_map: int
  "Scaling (y1/y2)"
  last: float
  "Range"
  cVariable2: list
  "Variable"
  shw_leg: int
  "Legend: Position:None:Bottom:Right"
  Width: list
  "Width"
  show_title: int
  "Display plot name"
  y_max: float
  "Maximum"
  cuserdesc: list
  "Variable Description"
  y_off: float
  "Adapt Scale: Offset"
  xgrid_count: int
  "Grid Lines: Count"
  Variable: list
  "Variable"
  userdesc: list
  "Variable Description"
  cColor: int
  "Colour"
  dDistAScale: float
  "Auto Scale (y1/y2): Margin"
  use_y: int
  "Use local Axis"
  x_min: float
  "Minimum"
  y_fit: int
  "Adapt Scale"
  gnrl_modby: str
  "Object modified by"
  isteps: int
  "Draw Steps"
  dValNom: list
  "Nom.Value"
  pid_: int
  "ProjectID"
  FrmVis: int
  "Frame"
  cWidth2: list
  "Width"
  auto_xscl: int
  "Auto Scale"
  AutoStl: int
  "Automatic (y1/y2): Line Style"
  cStyle: list
  "Style"
  y2_max: float
  "Maximum"
  root_id: object
  "Original Location"
  x_trg: float
  "Adapt Scale: Trigger"
  loc_name: str
  "Name"
  cColor2: int
  "Colour"
  y2_min: float
  "Minimum"
  fold_id: object
  "In Folder"
  cIdx: list
  "ID for Curve (used for Labels)"


  def GetContents(*args):
    ...

  def SetScaleY(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def SetXVar(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def SetScaleX(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def AddResVars(*args):
    ...

  def Clear(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetDefScaleX(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def SetAutoScaleY(*args):
    ...

  def SetAdaptY(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def SetCrvDesc(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetScaleObjY(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetDataSource(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def ShowY2(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def SetAdaptX(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AddVars(*args):
    ...

  def AttributeType(*args):
    ...

  def DoAutoScaleY(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetScaleObjX(*args):
    ...

  def DoAutoScaleY2(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DoAutoScaleX(*args):
    ...

  def SetDefScaleY(*args):
    ...

  def SetAutoScaleX(*args):
    ...

  def GetImpedance(*args):
    ...



class VisPlottz(Protocol):
  fObjs: list
  "Element"
  iopt_dia: str
  "Diagrams"
  shw_sgl: int
  "Show Section of Single Line Graphic"
  shw_bus: int
  "Hide names of busbars without relays"
  leg_bus: int
  "Show Legend: Include Terminal/Station Name"
  ileg: int
  "Label"
  typ_id: object
  "Type"
  subResName: str
  "Sub-Result Name"
  aleg: str
  "User Label"
  Depth: int
  "Visible"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  leg_numcol: int
  "Show Legend: Number of columns"
  pRefB: object
  "Reference Relay, Backward: Relay"
  AutoCol: int
  "Automatic: Colour"
  AutoWdt: int
  "Automatic: Line Width"
  for_name: str
  "Foreign Key"
  iTbrk: int
  "Consider Breaker Opening Time"
  iBordFont: int
  "Font for frame label"
  cpHeadFold: object
  "Head Folder"
  max: float
  "y-Scale Limits: Maximum"
  shownResult: list
  "Displayed"
  outserv: int
  "Out of Service"
  iopt_over: int
  "Overreach Zones: Representation:like zones:show:ignore"
  cRef: object
  "Reference Relay, Forward: Used one"
  fit: int
  "y-Scale: Adapt Scale"
  iSchemeStatus: int
  "Scheme Status"
  iopt_unit: str
  "x-Unit"
  fWidth: list
  "Width"
  oid_: int
  "ObjectID"
  xmin: float
  "x-Scale Limits: Minimum"
  Stack: float
  "Priority Level"
  gnrl_modif: int
  "Object modified"
  Utils: list
  "Contents"
  min: float
  "y-Scale Limits: Minimum"
  cres: object
  "Results"
  sglGrp: object
  "Show Section of Single Line Graphic: Graphic"
  Position: list
  "Position"
  charact: list
  "Charact."
  p_res: object
  "Results"
  pRef: object
  "Reference Relay, Forward: Relay"
  pPath: object
  "Path"
  cRefB: object
  "Reference Relay, Backward: Used One"
  shw_leg: int
  "Show Legend"
  xfit: int
  "x-Scale: Adapt Scale"
  xmaxb: float
  "x-Scale Limits: Maximum"
  xmax: float
  "x-Scale Limits: Maximum"
  fStyle: list
  "Style"
  cfCirc: list
  "Circular"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  iopt_mod: str
  "Method"
  FrmVis: int
  "Frame"
  fColor: list
  "Colour"
  tid_: int
  "TimeID"
  AutoStl: int
  "Automatic: Line Style"
  root_id: object
  "Original Location"
  fCirc: list
  "Circular"
  xminb: float
  "x-Scale Limits: Minimum"
  loc_name: str
  "Name"
  ilne_over: int
  "Overreach Zones: Line Style"
  fold_id: object
  "In Folder"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Clear(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AddRelay(*args):
    ...

  def AttributeType(*args):
    ...

  def AddRelays(*args):
    ...

  def DoAutoScaleY(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DoAutoScaleX(*args):
    ...

  def GetImpedance(*args):
    ...



class VisVec(Protocol):
  ileg: int
  "Label"
  typ_id: object
  "Type"
  aleg: str
  "User Label"
  Depth: int
  "Visible"
  vWidth: list
  "Width"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  x_start: int
  "Axis: x - Min."
  autos: int
  "Axis: Auto Scale"
  AutoCol: int
  "Automatic: Colour"
  for_name: str
  "Foreign Key"
  pObj: list
  "Element"
  vColor: list
  "Colour"
  x_end: int
  "x - Max."
  iBordFont: int
  "Font for frame label"
  cpHeadFold: object
  "Head Folder"
  outserv: int
  "Out of Service"
  ishort: int
  "Standard Legend uses"
  yVar: list
  "Imaginary Part/Angle"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  vStyle: list
  "Style"
  Stack: float
  "Priority Level"
  gnrl_modif: int
  "Object modified"
  icircles: int
  "Representation of Coordinates"
  scale: list
  "Axis: Scale"
  Utils: list
  "Contents"
  polar: list
  "Coordinates"
  Var: list
  "Complex Variable"
  Position: list
  "Position"
  charact: list
  "Charact."
  unit: list
  "Axis: Unit"
  shw_leg: int
  "Show Legend"
  y_end: int
  "y - Max."
  y_start: int
  "Axis: y - Min."
  ilabel: int
  "Label of Vectors"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  FrmVis: int
  "Frame"
  iallph: int
  "Show all phases in plot (otherwise only selected phase)"
  tid_: int
  "TimeID"
  xVar: list
  "Real Part/Magnitude"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  userdesc: list
  "Description"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def CentreOrigin(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class VisVecres(Protocol):
  Style: list
  "Style"
  ileg: int
  "Label"
  typ_id: object
  "Type"
  aleg: str
  "User Label"
  Depth: int
  "Visible"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  x_start: int
  "Axis: x - Min."
  autos: int
  "Axis: Auto Scale"
  AutoCol: int
  "Automatic: Colour"
  for_name: str
  "Foreign Key"
  pObj: list
  "Element"
  x_end: int
  "x - Max."
  iBordFont: int
  "Font for frame label"
  resObj: list
  "Results"
  cpHeadFold: object
  "Head Folder"
  Color: list
  "Colour"
  outserv: int
  "Out of Service"
  ishort: int
  "Legend: Standard Legend uses"
  iSchemeStatus: int
  "Scheme Status"
  msg_name: list
  "%s-%s"
  oid_: int
  "ObjectID"
  variable: list
  "Variable"
  Stack: float
  "Priority Level"
  gnrl_modif: int
  "Object modified"
  icircles: int
  "Representation of Coordinates"
  scale: list
  "Axis: Scale"
  Utils: list
  "Contents"
  cursor: object
  "Cursor"
  polar: list
  "Coordinates"
  Position: list
  "Position"
  charact: list
  "Charact."
  unit: list
  "Axis: Unit"
  shw_leg: int
  "Legend: Position:None:Bottom:Right"
  Width: list
  "Width"
  y_end: int
  "y - Max."
  Variable: list
  "Variable"
  y_start: int
  "Axis: y - Min."
  ilabel: int
  "Label of Vectors"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  FrmVis: int
  "Frame"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  fold_id: object
  "In Folder"
  userdesc: list
  "Description"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def CentreOrigin(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class VisXyplot(Protocol):
  x_max: list
  "x-Maximum"
  ResFile: list
  "Result File"
  x_fit: int
  "x-Axis: Adapt Scale"
  ileg: int
  "Label"
  typ_id: object
  "Type"
  aleg: str
  "User Label"
  Depth: int
  "Visible"
  vWidth: list
  "Width"
  x_off: list
  "x-Offset"
  dat_src: str
  "Data source"
  dValNomX: list
  "Nom.Value X"
  chr_name: str
  "Characteristic Name"
  x_map: int
  "x-Axis: Scale"
  iObjx: int
  "Show x-Element in Table"
  userdy: list
  "Description Y-Var."
  pxObj: list
  "Element x-Axis"
  AutoWdt: int
  "Automatic: Line Width"
  AutoCol: int
  "Automatic: Colour"
  p_Scale: object
  "Scale"
  for_name: str
  "Foreign Key"
  iopt_nom: str
  "Nom. Values"
  vColor: list
  "Colour"
  iBordFont: int
  "Font for frame label"
  cpHeadFold: object
  "Head Folder"
  y_min: list
  "y-Minimum"
  dIsNomX: list
  "Norm X"
  outserv: int
  "Out of Service"
  ishort: int
  "Standard Legend uses"
  yVar: list
  "Var. y-Axis"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  dIsNom: list
  "Norm"
  vStyle: list
  "Style"
  Stack: float
  "Priority Level"
  gnrl_modif: int
  "Object modified"
  yvar: list
  "Var. y-Axis"
  Utils: list
  "Contents"
  shw_arr: int
  "Show direction arrows for curves"
  Position: list
  "Position"
  charact: list
  "Charact."
  usedfor: str
  "Results Type"
  auto_x: int
  "x-Axis: Auto Scale"
  tmin: float
  "Range: Minimum"
  unit: list
  "Unit"
  xvar: list
  "Var. x-Axis"
  auto_y: int
  "y-Axis: Auto Scale"
  pyObj: list
  "Element y-Axis"
  shw_leg: int
  "Show Legend"
  userdx: list
  "Description X-Var."
  y_max: list
  "y-Maximum"
  y_off: list
  "y-Offset"
  iVector: int
  "Diagram shows"
  x_min: list
  "x-Minimum"
  y_fit: int
  "y-Axis: Adapt Scale"
  gnrl_modby: str
  "Object modified by"
  dValNom: list
  "Nom.Value"
  pid_: int
  "ProjectID"
  FrmVis: int
  "Frame"
  iAll: int
  "Show whole Time Range"
  tid_: int
  "TimeID"
  y_map: int
  "y-Axis: Scale"
  AutoStl: int
  "Automatic: Line Style"
  xVar: list
  "Var. x-Axis"
  root_id: object
  "Original Location"
  use_loc: int
  "Use local Scales"
  loc_name: str
  "Name"
  iArrow: int
  "Show Vector"
  fold_id: object
  "In Folder"
  cIdx: list
  "ID for Curve (used for Labels)"
  tmax: float
  "Range: Maximum"


  def GetContents(*args):
    ...

  def SetCrvDescY(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def Clear(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetDataSource(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def SetCrvDescX(*args):
    ...

  def AttributeType(*args):
    ...

  def DoAutoScaleY(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def DoAutoScaleX(*args):
    ...

  def GetImpedance(*args):
    ...



class IntPrj(Protocol):
  st_purgedate: int
  "Options: Date of last purging"
  iAutoSlack: int
  "Auto slack assignment:Method 1:Method 2"
  iCalcSymComp: int
  "Calculation of symmetrical components for untransposed lines"
  CTLimitNum: int
  "COMTRADE Data File import limit: Max. number of files"
  fkey_prefix: list
  "Foreign key prefix"
  iTowEarthRed: int
  "Tower: Earth wire reduction (0=V132, 1=V14)"
  chr_name: str
  "Characteristic Name"
  appr_modby: str
  "Approval Information: Modified by"
  pfm_func_path: object
  "Functions"
  archivedBy: list
  "Archiving: Archived by"
  st_purgeautoprd: int
  "Options Automatic purging: Automatic purging interval"
  onlineDig_open: int
  "Open online plot (binary bars) at measurement start"
  objectId: int
  "Object ID"
  ctdDays: int
  "COMTRADE Data: Days"
  icreation: int
  "Creation timestamp"
  appr_modif: int
  "Approval Information: Modified"
  offlineSynchtime: int
  "Date of last synchronisation"
  migrationStatus: str
  "Migration status"
  cspqexp: str
  "Loads/Asyn. Machines P, Q, S unit, VA,W,var"
  desc: list
  "Description"
  rmin: float
  "Min. Resistance rmin"
  der_baseversion2: object
  "New base version: Most recent version"
  oid_: int
  "ObjectID"
  iStatus: int
  "Status:Draft:Issued"
  gnrl_modif: int
  "Object modified"
  version_id: list
  "Version"
  lastNotifiedVersionTime: int
  "Last notified version timestamp"
  cStartTime: int
  "Start Time"
  pCase: object
  "Last open Study Case"
  share_a: list
  "Sharing access level"
  ctdStart: int
  "From"
  share_g: list
  "Groups"
  st_rec_purgeable: int
  "Statistics:    Purgeable records"
  iBuildNo: int
  "Migrated to Build"
  currency: str
  "Currency Unit"
  dataExtDesc: list
  "Description"
  dataExtUnit: list
  "Unit"
  CTLimit: int
  "COMTRADE Data File import limit: Maximum Number of Files"
  iAutoOufOfServ: int
  "Automatic Out of Service Detection"
  ilenunit: int
  "Units"
  pfm_dsm: int
  "PFM-System:&0&None:&2&Master Station:&3&Local Access Station"
  st_rec_versions: int
  "Statistics:    Records in versions"
  pPrjSettings: object
  "Settings: Project Settings"
  st_retention: int
  "Options: Object history retention period (before purge)"
  pfm_data_path: object
  "Data"
  pid_: int
  "ProjectID"
  archivingComments: list
  "Archiving: Archiving comments"
  ctdEnd: int
  "To"
  close_plots: int
  "Close all open plots at measurement start"
  pMigrPrj: object
  "Migrated Project"
  st_rec_retention: int
  "Statistics:    Records in retention hold"
  fold_id: object
  "In Folder"
  share_lockingUsers: str
  "Locked by"
  projectId: int
  "Project ID"
  project_mapped: list
  "Mapped to folder"
  der_baseversion: object
  "Base project: Used version"
  st_rec_date: int
  "Statistics: Statistics date"
  clenexp: str
  "Lines/Cables Length unit, m"
  st_purgeauto: int
  "Options: Automatic purging"
  dat_src: str
  "Data source"
  pfm_onlineDig: object
  "Online plot (binary bars)"
  Sbase: float
  "Base Apparent Power"
  offlineMode: str
  "Subscription Mode"
  st_rec_recbin: int
  "Statistics:    Records inside recycle bin"
  der_mergeNtfTime: int
  "New base version: Notify from"
  iStartTime: int
  "Start Time"
  st_prjdeldays: int
  "Options Housekeeping project deletion: Project retention period"
  pfm_auto_path: object
  "Automatically executed Scripts"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  pfm_plots_path: object
  "Plots"
  cpHeadFold: object
  "Head Folder"
  der_mergeNtf: int
  "Disable notification at activation"
  share_allowCopy: int
  "Other users may copy this project"
  base_versionId: int
  "Base project: Version Id"
  timestampId: int
  "Timestamp ID"
  iSchemeStatus: int
  "Scheme Status"
  pfm_statname: str
  "Station Name"
  UpRepeat: int
  "COMTRADE Data Import Synchronisation: Repeat every"
  appr_status: int
  "Approval Information: Status"
  optionNotifyAgain: int
  "New base version: Notify Again"
  st_undodate: int
  "Options: Minimum date for new versions"
  cEndTime: int
  "End Time"
  iEndTime: int
  "End Time"
  der_baseproject: object
  "Base project: Project"
  st_activationdate: int
  "Options: Date of last activation"
  charact: list
  "Charact."
  ComTradeUp: int
  "COMTRADE Data: Import Synchronisation"
  gmin: float
  "Min. Conductance gmin"
  ctdTime: int
  "COMTRADE Data: Restricted Import"
  migrationPriority: int
  "Migration Priority:Low:Medium:High"
  online_open: int
  "Open online plot (curve) at measurement start"
  tags: str
  "Tags"
  ciNodeCount: int
  "Licence Relevant Nodes: Number of Nodes"
  st_rec_current: int
  "Statistics:    Records for current state"
  der_noUpdates: int
  "New base version: Ignore all new versions"
  gnrl_modby: str
  "Object modified by"
  pfm_files: str
  "COMTRADE Data: Data Path"
  st_prjdel: int
  "Options: Housekeeping project deletion"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  project_id: list
  "Project"
  archiveDate: int
  "Archiving: Date archived"
  st_rec_all: int
  "Statistics: Total number of records"
  iFlowOrient: int
  "Flow Orientation:Mixed Mode:Load Oriented:Generator Oriented"
  pfm_online: object
  "Online plot (curve)"
  ymodmin: float
  "Threshold Impedance for Z-model"


  def GetLatestVersion(*args):
    ...

  def GetChildren(*args):
    ...

  def CopyDataExtensionFrom(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def MergeToBaseProject(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def Activate(*args):
    ...

  def IsEnergized(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def GetExternalReferences(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def __getattr__(*args):
    ...

  def Restore(*args):
    ...

  def PackExternalReferences(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def AddProjectToRemoteDatabase(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def Delete(*args):
    ...

  def IsOutOfService(*args):
    ...

  def SubscribeProjectReadWrite(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def Purge(*args):
    ...

  def GetAttributeType(*args):
    ...

  def EndDataExtensionModification(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def SetGeoCoordinateSystem(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def HasExternalReferences(*args):
    ...

  def AddProjectToCombined(*args):
    ...

  def GetInom(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetFullName(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def BeginDataExtensionModification(*args):
    ...

  def GetContents(*args):
    ...

  def Archive(*args):
    ...

  def GetDerivedProjects(*args):
    ...

  def IsInFeeder(*args):
    ...

  def CanSubscribeProjectReadOnly(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def PurgeObjectKeys(*args):
    ...

  def UpdateToDefaultStructure(*args):
    ...

  def CreateObject(*args):
    ...

  def NormaliseCombined(*args):
    ...

  def LoadData(*args):
    ...

  def Deactivate(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def GetVersions(*args):
    ...

  def IsNode(*args):
    ...

  def IsHidden(*args):
    ...

  def CanAddProjectToRemoteDatabase(*args):
    ...

  def CreateVersion(*args):
    ...

  def TransformGeoCoordinates(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def UnsubscribeProject(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def Migrate(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def GetGeoCoordinateSystem(*args):
    ...

  def GetParent(*args):
    ...

  def UpdateToMostRecentBaseVersion(*args):
    ...

  def TransformToGeographicCoordinateSystem(*args):
    ...

  def GetUnom(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def UpdateStatistics(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def RemoveProjectFromCombined(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetNode(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def ClearInvalidReferences(*args):
    ...

  def SubscribeProjectReadOnly(*args):
    ...

  def GetImpedance(*args):
    ...

  def CanSubscribeProjectReadWrite(*args):
    ...



class IntUser(Protocol):
  enabledTo: int
  "Enable user account Restrict in time: Enabled to"
  iCoreInput: int
  "Actual number of processes to be used: Number of processes"
  crypt: int
  "Corporate Modules: DPL/DSL/QDSL Encryption"
  script: int
  "Scripting and Automation"
  pwCatSymbols: int
  "Enforce password quality: Symbols (e.g. %, -, *, ...)"
  anaredefas: int
  "Corporate Modules: ANAREDE/ANAFAS Export"
  check_adv: int
  "Advanced Mode"
  stab: int
  "Stability Analysis Functions (RMS)"
  paramid: int
  "System Parameter Identification"
  sessionIdleTimerInterval: int
  "Enable user-specific idle settings Close application when idle session: Time interval"
  muld: int
  "Corporate Modules: Multi-User Database"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  ai: int
  "Artificial Intelligence"
  sysaccount: str
  "System Account"
  userhash: str
  "User hash"
  enabledFrom: int
  "Enable user account Restrict in time: Enabled from"
  pwCatNumbers: int
  "Enforce password quality: Digits (e.g. 1, 2, 3, ...)"
  enabled: int
  "Enable user account"
  numberOfLogons: int
  "Number of logons"
  probAnalysis: int
  "Probabilistic Analysis"
  masterstation: int
  "PFM Master Station"
  lvnet: int
  "Low Voltage Analysis"
  pwUserSpecEnabled: int
  "Enable user specific settings"
  user_id: int
  "User ID"
  disabledSolverIds: list
  "Disabled Solver ids"
  smallsig: int
  "Small Signal Stability (Eigenvalue Analysis)"
  shc: int
  "Fault Analysis"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  forcePwChange: int
  "Force password change"
  tececo: int
  "Techno-Economical Analysis"
  cpHeadFold: object
  "Head Folder"
  lastLogon: int
  "Last logon"
  requireServerAuth: int
  "Force Authentication Server usage"
  qdynsim: int
  "Quasi-Dynamic Simulation"
  opfact: int
  "Optimal Power Flow: OPF (Economic Dispatch)"
  bPublicArea: int
  "Publishing user"
  sessionIdleTimerUserSpecific: int
  "Enable user-specific idle settings"
  econom: int
  "Economic Analysis Tools"
  dataTT: int
  "Database Transfer Tool"
  reli: int
  "Reliability Analysis Functions"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  motstart: int
  "Motor Starting Functions"
  allowFloat: int
  "Floating Licence Generation"
  user_name: str
  "Full name"
  allowMaster: int
  "Usage of third party licence masterkey"
  oid_: int
  "ObjectID"
  unitcomm: int
  "Unit Commitment and Dispatch Optimisation"
  prot: int
  "Time-Overcurrent Protection"
  gnrl_modif: int
  "Object modified"
  pwCatLowerCase: int
  "Enforce password quality: Lowercase Letters (e.g. a, b, c, ...)"
  distr: int
  "Distribution Network Tools"
  pwChangeEnabled: int
  "Enforce regular password changes"
  charact: list
  "Charact."
  dataExtDesc: list
  "Description"
  iActUseCore: int
  "Actual number of processes to be used"
  cabOpt: int
  "Cable Analysis"
  maxFloatDays: int
  "Max. Borrow Time (days):"
  integral: int
  "Corporate Modules: Integral Export"
  opc: int
  "OPC Interface"
  dataExtUnit: list
  "Unit"
  fmuexp: int
  "Corporate Modules: FMU Model Export"
  status: str
  "Session status"
  expires: int
  "Enable user account: Restrict in time"
  opfreact: int
  "Optimal Power Flow: OPF (Reactive Power Optimisation)"
  staest: int
  "State Estimation"
  cimEentso: int
  "CIM: CIM Import/Export (ENTSO-E Profile)"
  enableParal: int
  "Allow Parallel Computing"
  ldf: int
  "Load Flow Analysis"
  psse: int
  "Corporate Modules: PSS/E Export"
  netred: int
  "Network Reduction"
  lastPwChange: int
  "Last change"
  cimIentso: int
  "CIM: CIM Import (ENTSO-E Profile)"
  contingency: int
  "Contingency Analysis"
  conrequest: int
  "Connection Request Assessment"
  arcflash: int
  "Arc-Flash Analysis"
  dist: int
  "Distance Protection"
  gnrl_modby: str
  "Object modified by"
  cosim: int
  "Co-Simulation Interface"
  pid_: int
  "ProjectID"
  pwCatUpperCase: int
  "Enforce password quality: Uppercase Letters (e.g. A, B, C, ...)"
  transmission: int
  "Transmission Network Tools"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  stabemt: int
  "Electromagnetic Transients (EMT)"
  loc_name: str
  "User name"
  pwChangeInterval: int
  "Enforce regular password changes: Every"
  pwQualityEnabled: int
  "Enforce password quality"
  sessionIdleTimerEnabled: int
  "Enable user-specific idle settings: Close application when idle session"
  harm: int
  "Power Quality and Harmonic Analysis"
  cimEentsoCorp: int
  "CIM: CIM Import/Export (ENTSO-E Profile) - corp."
  c37: int
  "C37 Simulation Interface"
  fold_id: object
  "In Folder"
  iopt_package: str
  "Package Type"
  pwLength: int
  "Enforce password quality: Minimum length"
  users: list
  "Permitted Users"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def TerminateSession(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def Purge(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def SetPassword(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



class IntLibrary(Protocol):
  st_purgedate: int
  "Options: Date of last purging"
  sharing_group: list
  "Groups"
  st_rec_date: int
  "Statistics: Statistics date"
  st_purgeauto: int
  "Options: Automatic purging"
  dat_src: str
  "Data source"
  chr_name: str
  "Characteristic Name"
  st_rec_recbin: int
  "Statistics:    Records inside recycle bin"
  st_purgeautoprd: int
  "Options Automatic purging: Automatic purging interval"
  icreation: int
  "Creation timestamp"
  for_name: str
  "Foreign Key"
  contents: list
  "Contents"
  cpHeadFold: object
  "Head Folder"
  desc: list
  "Description"
  iSchemeStatus: int
  "Scheme Status"
  oid_: int
  "ObjectID"
  gnrl_modif: int
  "Object modified"
  st_undodate: int
  "Options: Minimum date for new versions"
  st_activationdate: int
  "Options: Date of last activation"
  st_rec_purgeable: int
  "Statistics:    Purgeable records"
  charact: list
  "Charact."
  dataExtDesc: list
  "Options: Description"
  dataExtUnit: list
  "Options: Unit"
  st_rec_versions: int
  "Statistics:    Records in versions"
  st_rec_current: int
  "Statistics:    Records for current state"
  st_retention: int
  "Options: Object history retention period (before purge)"
  gnrl_modby: str
  "Object modified by"
  pid_: int
  "ProjectID"
  sharing_access: list
  "Sharing access level"
  tid_: int
  "TimeID"
  root_id: object
  "Original Location"
  loc_name: str
  "Name"
  st_rec_all: int
  "Statistics: Total number of records"
  st_rec_retention: int
  "Statistics:    Records in retention hold"
  fold_id: object
  "In Folder"
  share_lockingUsers: str
  "Locked by"


  def GetContents(*args):
    ...

  def GetChildren(*args):
    ...

  def IsInFeeder(*args):
    ...

  def GetCombinedProjectSource(*args):
    ...

  def GetCubicle(*args):
    ...

  def IsObjectActive(*args):
    ...

  def Energize(*args):
    ...

  def SearchObject(*args):
    ...

  def IsShortCircuited(*args):
    ...

  def SetAttribute(*args):
    ...

  def HasResults(*args):
    ...

  def GetAttributeShape(*args):
    ...

  def Move(*args):
    ...

  def GetConnectionCount(*args):
    ...

  def CreateObject(*args):
    ...

  def WriteChangesToDb(*args):
    ...

  def SetAttributeShape(*args):
    ...

  def Activate(*args):
    ...

  def Deactivate(*args):
    ...

  def IsNetworkDataFolder(*args):
    ...

  def HasReferences(*args):
    ...

  def IsEnergized(*args):
    ...

  def IsNode(*args):
    ...

  def GetSupplyingTrfstations(*args):
    ...

  def IsHidden(*args):
    ...

  def GetAttributeLength(*args):
    ...

  def IsDeleted(*args):
    ...

  def IsEarthed(*args):
    ...

  def ShowModalSelectTree(*args):
    ...

  def __getattr__(*args):
    ...

  def GetSupplyingSubstations(*args):
    ...

  def SwitchOn(*args):
    ...

  def GetAttributeUnit(*args):
    ...

  def IsObjectModifiedByVariation(*args):
    ...

  def ShowEditDialog(*args):
    ...

  def GetConnectedElements(*args):
    ...

  def SetAttributes(*args):
    ...

  def ReportUnusedObjects(*args):
    ...

  def SetAttributeLength(*args):
    ...

  def SwitchOff(*args):
    ...

  def Isolate(*args):
    ...

  def Delete(*args):
    ...

  def GetParent(*args):
    ...

  def IsOutOfService(*args):
    ...

  def GetUnom(*args):
    ...

  def HasAttribute(*args):
    ...

  def GetOwner(*args):
    ...

  def GetRegion(*args):
    ...

  def GetZeroImpedance(*args):
    ...

  def GetReferences(*args):
    ...

  def IsReducible(*args):
    ...

  def GetAttributeType(*args):
    ...

  def MarkInGraphics(*args):
    ...

  def PasteCopy(*args):
    ...

  def GetAttributeDescription(*args):
    ...

  def CopyData(*args):
    ...

  def AttributeType(*args):
    ...

  def GetClassName(*args):
    ...

  def GetInom(*args):
    ...

  def GetSupplyingTransformers(*args):
    ...

  def PurgeUnusedObjects(*args):
    ...

  def GetControlledNode(*args):
    ...

  def GetAttributes(*args):
    ...

  def GetNode(*args):
    ...

  def GetFullName(*args):
    ...

  def GetAttribute(*args):
    ...

  def IsCalcRelevant(*args):
    ...

  def AddCopy(*args):
    ...

  def GetOperator(*args):
    ...

  def GetSystemGrounding(*args):
    ...

  def GetImpedance(*args):
    ...



